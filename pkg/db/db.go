// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addRevokedCertificateStmt, err = db.PrepareContext(ctx, addRevokedCertificate); err != nil {
		return nil, fmt.Errorf("error preparing query AddRevokedCertificate: %w", err)
	}
	if q.checkNetworkNodeExistsStmt, err = db.PrepareContext(ctx, checkNetworkNodeExists); err != nil {
		return nil, fmt.Errorf("error preparing query CheckNetworkNodeExists: %w", err)
	}
	if q.countBackupsByScheduleStmt, err = db.PrepareContext(ctx, countBackupsBySchedule); err != nil {
		return nil, fmt.Errorf("error preparing query CountBackupsBySchedule: %w", err)
	}
	if q.countBackupsByTargetStmt, err = db.PrepareContext(ctx, countBackupsByTarget); err != nil {
		return nil, fmt.Errorf("error preparing query CountBackupsByTarget: %w", err)
	}
	if q.countNetworksStmt, err = db.PrepareContext(ctx, countNetworks); err != nil {
		return nil, fmt.Errorf("error preparing query CountNetworks: %w", err)
	}
	if q.countNodeEventsStmt, err = db.PrepareContext(ctx, countNodeEvents); err != nil {
		return nil, fmt.Errorf("error preparing query CountNodeEvents: %w", err)
	}
	if q.countNodesStmt, err = db.PrepareContext(ctx, countNodes); err != nil {
		return nil, fmt.Errorf("error preparing query CountNodes: %w", err)
	}
	if q.countNodesByPlatformStmt, err = db.PrepareContext(ctx, countNodesByPlatform); err != nil {
		return nil, fmt.Errorf("error preparing query CountNodesByPlatform: %w", err)
	}
	if q.countUsersStmt, err = db.PrepareContext(ctx, countUsers); err != nil {
		return nil, fmt.Errorf("error preparing query CountUsers: %w", err)
	}
	if q.createBackupStmt, err = db.PrepareContext(ctx, createBackup); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBackup: %w", err)
	}
	if q.createBackupScheduleStmt, err = db.PrepareContext(ctx, createBackupSchedule); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBackupSchedule: %w", err)
	}
	if q.createBackupTargetStmt, err = db.PrepareContext(ctx, createBackupTarget); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBackupTarget: %w", err)
	}
	if q.createFabricOrganizationStmt, err = db.PrepareContext(ctx, createFabricOrganization); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFabricOrganization: %w", err)
	}
	if q.createKeyStmt, err = db.PrepareContext(ctx, createKey); err != nil {
		return nil, fmt.Errorf("error preparing query CreateKey: %w", err)
	}
	if q.createKeyProviderStmt, err = db.PrepareContext(ctx, createKeyProvider); err != nil {
		return nil, fmt.Errorf("error preparing query CreateKeyProvider: %w", err)
	}
	if q.createNetworkStmt, err = db.PrepareContext(ctx, createNetwork); err != nil {
		return nil, fmt.Errorf("error preparing query CreateNetwork: %w", err)
	}
	if q.createNetworkFullStmt, err = db.PrepareContext(ctx, createNetworkFull); err != nil {
		return nil, fmt.Errorf("error preparing query CreateNetworkFull: %w", err)
	}
	if q.createNetworkNodeStmt, err = db.PrepareContext(ctx, createNetworkNode); err != nil {
		return nil, fmt.Errorf("error preparing query CreateNetworkNode: %w", err)
	}
	if q.createNodeStmt, err = db.PrepareContext(ctx, createNode); err != nil {
		return nil, fmt.Errorf("error preparing query CreateNode: %w", err)
	}
	if q.createNodeEventStmt, err = db.PrepareContext(ctx, createNodeEvent); err != nil {
		return nil, fmt.Errorf("error preparing query CreateNodeEvent: %w", err)
	}
	if q.createNotificationProviderStmt, err = db.PrepareContext(ctx, createNotificationProvider); err != nil {
		return nil, fmt.Errorf("error preparing query CreateNotificationProvider: %w", err)
	}
	if q.createSessionStmt, err = db.PrepareContext(ctx, createSession); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSession: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteBackupStmt, err = db.PrepareContext(ctx, deleteBackup); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteBackup: %w", err)
	}
	if q.deleteBackupScheduleStmt, err = db.PrepareContext(ctx, deleteBackupSchedule); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteBackupSchedule: %w", err)
	}
	if q.deleteBackupTargetStmt, err = db.PrepareContext(ctx, deleteBackupTarget); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteBackupTarget: %w", err)
	}
	if q.deleteBackupsByScheduleStmt, err = db.PrepareContext(ctx, deleteBackupsBySchedule); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteBackupsBySchedule: %w", err)
	}
	if q.deleteBackupsByTargetStmt, err = db.PrepareContext(ctx, deleteBackupsByTarget); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteBackupsByTarget: %w", err)
	}
	if q.deleteExpiredSessionsStmt, err = db.PrepareContext(ctx, deleteExpiredSessions); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteExpiredSessions: %w", err)
	}
	if q.deleteFabricOrganizationStmt, err = db.PrepareContext(ctx, deleteFabricOrganization); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFabricOrganization: %w", err)
	}
	if q.deleteKeyStmt, err = db.PrepareContext(ctx, deleteKey); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteKey: %w", err)
	}
	if q.deleteKeyProviderStmt, err = db.PrepareContext(ctx, deleteKeyProvider); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteKeyProvider: %w", err)
	}
	if q.deleteNetworkStmt, err = db.PrepareContext(ctx, deleteNetwork); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteNetwork: %w", err)
	}
	if q.deleteNetworkNodeStmt, err = db.PrepareContext(ctx, deleteNetworkNode); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteNetworkNode: %w", err)
	}
	if q.deleteNodeStmt, err = db.PrepareContext(ctx, deleteNode); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteNode: %w", err)
	}
	if q.deleteNotificationProviderStmt, err = db.PrepareContext(ctx, deleteNotificationProvider); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteNotificationProvider: %w", err)
	}
	if q.deleteOldBackupsStmt, err = db.PrepareContext(ctx, deleteOldBackups); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteOldBackups: %w", err)
	}
	if q.deleteSessionStmt, err = db.PrepareContext(ctx, deleteSession); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSession: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.deleteUserSessionsStmt, err = db.PrepareContext(ctx, deleteUserSessions); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserSessions: %w", err)
	}
	if q.disableBackupScheduleStmt, err = db.PrepareContext(ctx, disableBackupSchedule); err != nil {
		return nil, fmt.Errorf("error preparing query DisableBackupSchedule: %w", err)
	}
	if q.enableBackupScheduleStmt, err = db.PrepareContext(ctx, enableBackupSchedule); err != nil {
		return nil, fmt.Errorf("error preparing query EnableBackupSchedule: %w", err)
	}
	if q.getAllKeysStmt, err = db.PrepareContext(ctx, getAllKeys); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllKeys: %w", err)
	}
	if q.getAllNodesStmt, err = db.PrepareContext(ctx, getAllNodes); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllNodes: %w", err)
	}
	if q.getBackupStmt, err = db.PrepareContext(ctx, getBackup); err != nil {
		return nil, fmt.Errorf("error preparing query GetBackup: %w", err)
	}
	if q.getBackupScheduleStmt, err = db.PrepareContext(ctx, getBackupSchedule); err != nil {
		return nil, fmt.Errorf("error preparing query GetBackupSchedule: %w", err)
	}
	if q.getBackupTargetStmt, err = db.PrepareContext(ctx, getBackupTarget); err != nil {
		return nil, fmt.Errorf("error preparing query GetBackupTarget: %w", err)
	}
	if q.getBackupsByDateRangeStmt, err = db.PrepareContext(ctx, getBackupsByDateRange); err != nil {
		return nil, fmt.Errorf("error preparing query GetBackupsByDateRange: %w", err)
	}
	if q.getBackupsByScheduleAndStatusStmt, err = db.PrepareContext(ctx, getBackupsByScheduleAndStatus); err != nil {
		return nil, fmt.Errorf("error preparing query GetBackupsByScheduleAndStatus: %w", err)
	}
	if q.getBackupsByStatusStmt, err = db.PrepareContext(ctx, getBackupsByStatus); err != nil {
		return nil, fmt.Errorf("error preparing query GetBackupsByStatus: %w", err)
	}
	if q.getDefaultNotificationProviderStmt, err = db.PrepareContext(ctx, getDefaultNotificationProvider); err != nil {
		return nil, fmt.Errorf("error preparing query GetDefaultNotificationProvider: %w", err)
	}
	if q.getDefaultNotificationProviderForTypeStmt, err = db.PrepareContext(ctx, getDefaultNotificationProviderForType); err != nil {
		return nil, fmt.Errorf("error preparing query GetDefaultNotificationProviderForType: %w", err)
	}
	if q.getFabricOrganizationStmt, err = db.PrepareContext(ctx, getFabricOrganization); err != nil {
		return nil, fmt.Errorf("error preparing query GetFabricOrganization: %w", err)
	}
	if q.getFabricOrganizationByIDStmt, err = db.PrepareContext(ctx, getFabricOrganizationByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetFabricOrganizationByID: %w", err)
	}
	if q.getFabricOrganizationByMSPIDStmt, err = db.PrepareContext(ctx, getFabricOrganizationByMSPID); err != nil {
		return nil, fmt.Errorf("error preparing query GetFabricOrganizationByMSPID: %w", err)
	}
	if q.getFabricOrganizationByMspIDStmt, err = db.PrepareContext(ctx, getFabricOrganizationByMspID); err != nil {
		return nil, fmt.Errorf("error preparing query GetFabricOrganizationByMspID: %w", err)
	}
	if q.getFabricOrganizationWithKeysStmt, err = db.PrepareContext(ctx, getFabricOrganizationWithKeys); err != nil {
		return nil, fmt.Errorf("error preparing query GetFabricOrganizationWithKeys: %w", err)
	}
	if q.getKeyStmt, err = db.PrepareContext(ctx, getKey); err != nil {
		return nil, fmt.Errorf("error preparing query GetKey: %w", err)
	}
	if q.getKeyByEthereumAddressStmt, err = db.PrepareContext(ctx, getKeyByEthereumAddress); err != nil {
		return nil, fmt.Errorf("error preparing query GetKeyByEthereumAddress: %w", err)
	}
	if q.getKeyByIDStmt, err = db.PrepareContext(ctx, getKeyByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetKeyByID: %w", err)
	}
	if q.getKeyCountByProviderStmt, err = db.PrepareContext(ctx, getKeyCountByProvider); err != nil {
		return nil, fmt.Errorf("error preparing query GetKeyCountByProvider: %w", err)
	}
	if q.getKeyProviderStmt, err = db.PrepareContext(ctx, getKeyProvider); err != nil {
		return nil, fmt.Errorf("error preparing query GetKeyProvider: %w", err)
	}
	if q.getKeyProviderByDefaultStmt, err = db.PrepareContext(ctx, getKeyProviderByDefault); err != nil {
		return nil, fmt.Errorf("error preparing query GetKeyProviderByDefault: %w", err)
	}
	if q.getKeyProviderByIDStmt, err = db.PrepareContext(ctx, getKeyProviderByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetKeyProviderByID: %w", err)
	}
	if q.getKeysByAlgorithmStmt, err = db.PrepareContext(ctx, getKeysByAlgorithm); err != nil {
		return nil, fmt.Errorf("error preparing query GetKeysByAlgorithm: %w", err)
	}
	if q.getKeysByProviderAndCurveStmt, err = db.PrepareContext(ctx, getKeysByProviderAndCurve); err != nil {
		return nil, fmt.Errorf("error preparing query GetKeysByProviderAndCurve: %w", err)
	}
	if q.getKeysCountStmt, err = db.PrepareContext(ctx, getKeysCount); err != nil {
		return nil, fmt.Errorf("error preparing query GetKeysCount: %w", err)
	}
	if q.getLatestNodeEventStmt, err = db.PrepareContext(ctx, getLatestNodeEvent); err != nil {
		return nil, fmt.Errorf("error preparing query GetLatestNodeEvent: %w", err)
	}
	if q.getNetworkStmt, err = db.PrepareContext(ctx, getNetwork); err != nil {
		return nil, fmt.Errorf("error preparing query GetNetwork: %w", err)
	}
	if q.getNetworkByNameStmt, err = db.PrepareContext(ctx, getNetworkByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetNetworkByName: %w", err)
	}
	if q.getNetworkByNetworkIdStmt, err = db.PrepareContext(ctx, getNetworkByNetworkId); err != nil {
		return nil, fmt.Errorf("error preparing query GetNetworkByNetworkId: %w", err)
	}
	if q.getNetworkCurrentConfigBlockStmt, err = db.PrepareContext(ctx, getNetworkCurrentConfigBlock); err != nil {
		return nil, fmt.Errorf("error preparing query GetNetworkCurrentConfigBlock: %w", err)
	}
	if q.getNetworkNodeStmt, err = db.PrepareContext(ctx, getNetworkNode); err != nil {
		return nil, fmt.Errorf("error preparing query GetNetworkNode: %w", err)
	}
	if q.getNetworkNodesStmt, err = db.PrepareContext(ctx, getNetworkNodes); err != nil {
		return nil, fmt.Errorf("error preparing query GetNetworkNodes: %w", err)
	}
	if q.getNodeStmt, err = db.PrepareContext(ctx, getNode); err != nil {
		return nil, fmt.Errorf("error preparing query GetNode: %w", err)
	}
	if q.getNodeBySlugStmt, err = db.PrepareContext(ctx, getNodeBySlug); err != nil {
		return nil, fmt.Errorf("error preparing query GetNodeBySlug: %w", err)
	}
	if q.getNodeEventStmt, err = db.PrepareContext(ctx, getNodeEvent); err != nil {
		return nil, fmt.Errorf("error preparing query GetNodeEvent: %w", err)
	}
	if q.getNotificationProviderStmt, err = db.PrepareContext(ctx, getNotificationProvider); err != nil {
		return nil, fmt.Errorf("error preparing query GetNotificationProvider: %w", err)
	}
	if q.getOldestBackupByTargetStmt, err = db.PrepareContext(ctx, getOldestBackupByTarget); err != nil {
		return nil, fmt.Errorf("error preparing query GetOldestBackupByTarget: %w", err)
	}
	if q.getOrdererPortsStmt, err = db.PrepareContext(ctx, getOrdererPorts); err != nil {
		return nil, fmt.Errorf("error preparing query GetOrdererPorts: %w", err)
	}
	if q.getOrganizationCRLInfoStmt, err = db.PrepareContext(ctx, getOrganizationCRLInfo); err != nil {
		return nil, fmt.Errorf("error preparing query GetOrganizationCRLInfo: %w", err)
	}
	if q.getPeerPortsStmt, err = db.PrepareContext(ctx, getPeerPorts); err != nil {
		return nil, fmt.Errorf("error preparing query GetPeerPorts: %w", err)
	}
	if q.getProvidersByNotificationTypeStmt, err = db.PrepareContext(ctx, getProvidersByNotificationType); err != nil {
		return nil, fmt.Errorf("error preparing query GetProvidersByNotificationType: %w", err)
	}
	if q.getRecentCompletedBackupsStmt, err = db.PrepareContext(ctx, getRecentCompletedBackups); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecentCompletedBackups: %w", err)
	}
	if q.getRevokedCertificateStmt, err = db.PrepareContext(ctx, getRevokedCertificate); err != nil {
		return nil, fmt.Errorf("error preparing query GetRevokedCertificate: %w", err)
	}
	if q.getRevokedCertificatesStmt, err = db.PrepareContext(ctx, getRevokedCertificates); err != nil {
		return nil, fmt.Errorf("error preparing query GetRevokedCertificates: %w", err)
	}
	if q.getSessionStmt, err = db.PrepareContext(ctx, getSession); err != nil {
		return nil, fmt.Errorf("error preparing query GetSession: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserByUsernameStmt, err = db.PrepareContext(ctx, getUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUsername: %w", err)
	}
	if q.listBackupSchedulesStmt, err = db.PrepareContext(ctx, listBackupSchedules); err != nil {
		return nil, fmt.Errorf("error preparing query ListBackupSchedules: %w", err)
	}
	if q.listBackupTargetsStmt, err = db.PrepareContext(ctx, listBackupTargets); err != nil {
		return nil, fmt.Errorf("error preparing query ListBackupTargets: %w", err)
	}
	if q.listBackupsStmt, err = db.PrepareContext(ctx, listBackups); err != nil {
		return nil, fmt.Errorf("error preparing query ListBackups: %w", err)
	}
	if q.listBackupsByScheduleStmt, err = db.PrepareContext(ctx, listBackupsBySchedule); err != nil {
		return nil, fmt.Errorf("error preparing query ListBackupsBySchedule: %w", err)
	}
	if q.listBackupsByTargetStmt, err = db.PrepareContext(ctx, listBackupsByTarget); err != nil {
		return nil, fmt.Errorf("error preparing query ListBackupsByTarget: %w", err)
	}
	if q.listFabricOrganizationsStmt, err = db.PrepareContext(ctx, listFabricOrganizations); err != nil {
		return nil, fmt.Errorf("error preparing query ListFabricOrganizations: %w", err)
	}
	if q.listFabricOrganizationsWithKeysStmt, err = db.PrepareContext(ctx, listFabricOrganizationsWithKeys); err != nil {
		return nil, fmt.Errorf("error preparing query ListFabricOrganizationsWithKeys: %w", err)
	}
	if q.listKeyProvidersStmt, err = db.PrepareContext(ctx, listKeyProviders); err != nil {
		return nil, fmt.Errorf("error preparing query ListKeyProviders: %w", err)
	}
	if q.listKeysStmt, err = db.PrepareContext(ctx, listKeys); err != nil {
		return nil, fmt.Errorf("error preparing query ListKeys: %w", err)
	}
	if q.listNetworkNodesByNetworkStmt, err = db.PrepareContext(ctx, listNetworkNodesByNetwork); err != nil {
		return nil, fmt.Errorf("error preparing query ListNetworkNodesByNetwork: %w", err)
	}
	if q.listNetworkNodesByNodeStmt, err = db.PrepareContext(ctx, listNetworkNodesByNode); err != nil {
		return nil, fmt.Errorf("error preparing query ListNetworkNodesByNode: %w", err)
	}
	if q.listNetworksStmt, err = db.PrepareContext(ctx, listNetworks); err != nil {
		return nil, fmt.Errorf("error preparing query ListNetworks: %w", err)
	}
	if q.listNodeEventsStmt, err = db.PrepareContext(ctx, listNodeEvents); err != nil {
		return nil, fmt.Errorf("error preparing query ListNodeEvents: %w", err)
	}
	if q.listNodeEventsByTypeStmt, err = db.PrepareContext(ctx, listNodeEventsByType); err != nil {
		return nil, fmt.Errorf("error preparing query ListNodeEventsByType: %w", err)
	}
	if q.listNodesStmt, err = db.PrepareContext(ctx, listNodes); err != nil {
		return nil, fmt.Errorf("error preparing query ListNodes: %w", err)
	}
	if q.listNodesByNetworkStmt, err = db.PrepareContext(ctx, listNodesByNetwork); err != nil {
		return nil, fmt.Errorf("error preparing query ListNodesByNetwork: %w", err)
	}
	if q.listNodesByPlatformStmt, err = db.PrepareContext(ctx, listNodesByPlatform); err != nil {
		return nil, fmt.Errorf("error preparing query ListNodesByPlatform: %w", err)
	}
	if q.listNotificationProvidersStmt, err = db.PrepareContext(ctx, listNotificationProviders); err != nil {
		return nil, fmt.Errorf("error preparing query ListNotificationProviders: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.markBackupNotifiedStmt, err = db.PrepareContext(ctx, markBackupNotified); err != nil {
		return nil, fmt.Errorf("error preparing query MarkBackupNotified: %w", err)
	}
	if q.unsetDefaultNotificationProviderStmt, err = db.PrepareContext(ctx, unsetDefaultNotificationProvider); err != nil {
		return nil, fmt.Errorf("error preparing query UnsetDefaultNotificationProvider: %w", err)
	}
	if q.unsetDefaultProviderStmt, err = db.PrepareContext(ctx, unsetDefaultProvider); err != nil {
		return nil, fmt.Errorf("error preparing query UnsetDefaultProvider: %w", err)
	}
	if q.updateBackupCompletedStmt, err = db.PrepareContext(ctx, updateBackupCompleted); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBackupCompleted: %w", err)
	}
	if q.updateBackupFailedStmt, err = db.PrepareContext(ctx, updateBackupFailed); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBackupFailed: %w", err)
	}
	if q.updateBackupScheduleStmt, err = db.PrepareContext(ctx, updateBackupSchedule); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBackupSchedule: %w", err)
	}
	if q.updateBackupScheduleLastRunStmt, err = db.PrepareContext(ctx, updateBackupScheduleLastRun); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBackupScheduleLastRun: %w", err)
	}
	if q.updateBackupSizeStmt, err = db.PrepareContext(ctx, updateBackupSize); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBackupSize: %w", err)
	}
	if q.updateBackupStatusStmt, err = db.PrepareContext(ctx, updateBackupStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBackupStatus: %w", err)
	}
	if q.updateBackupTargetStmt, err = db.PrepareContext(ctx, updateBackupTarget); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBackupTarget: %w", err)
	}
	if q.updateDeploymentConfigStmt, err = db.PrepareContext(ctx, updateDeploymentConfig); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateDeploymentConfig: %w", err)
	}
	if q.updateFabricOrganizationStmt, err = db.PrepareContext(ctx, updateFabricOrganization); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateFabricOrganization: %w", err)
	}
	if q.updateKeyStmt, err = db.PrepareContext(ctx, updateKey); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateKey: %w", err)
	}
	if q.updateKeyProviderStmt, err = db.PrepareContext(ctx, updateKeyProvider); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateKeyProvider: %w", err)
	}
	if q.updateNetworkCurrentConfigBlockStmt, err = db.PrepareContext(ctx, updateNetworkCurrentConfigBlock); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNetworkCurrentConfigBlock: %w", err)
	}
	if q.updateNetworkGenesisBlockStmt, err = db.PrepareContext(ctx, updateNetworkGenesisBlock); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNetworkGenesisBlock: %w", err)
	}
	if q.updateNetworkNodeRoleStmt, err = db.PrepareContext(ctx, updateNetworkNodeRole); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNetworkNodeRole: %w", err)
	}
	if q.updateNetworkNodeStatusStmt, err = db.PrepareContext(ctx, updateNetworkNodeStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNetworkNodeStatus: %w", err)
	}
	if q.updateNetworkStatusStmt, err = db.PrepareContext(ctx, updateNetworkStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNetworkStatus: %w", err)
	}
	if q.updateNodeConfigStmt, err = db.PrepareContext(ctx, updateNodeConfig); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNodeConfig: %w", err)
	}
	if q.updateNodeDeploymentConfigStmt, err = db.PrepareContext(ctx, updateNodeDeploymentConfig); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNodeDeploymentConfig: %w", err)
	}
	if q.updateNodeEndpointStmt, err = db.PrepareContext(ctx, updateNodeEndpoint); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNodeEndpoint: %w", err)
	}
	if q.updateNodePublicEndpointStmt, err = db.PrepareContext(ctx, updateNodePublicEndpoint); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNodePublicEndpoint: %w", err)
	}
	if q.updateNodeStatusStmt, err = db.PrepareContext(ctx, updateNodeStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNodeStatus: %w", err)
	}
	if q.updateNotificationProviderStmt, err = db.PrepareContext(ctx, updateNotificationProvider); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNotificationProvider: %w", err)
	}
	if q.updateOrganizationCRLStmt, err = db.PrepareContext(ctx, updateOrganizationCRL); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateOrganizationCRL: %w", err)
	}
	if q.updateProviderTestResultsStmt, err = db.PrepareContext(ctx, updateProviderTestResults); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProviderTestResults: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	if q.updateUserLastLoginStmt, err = db.PrepareContext(ctx, updateUserLastLogin); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserLastLogin: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addRevokedCertificateStmt != nil {
		if cerr := q.addRevokedCertificateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addRevokedCertificateStmt: %w", cerr)
		}
	}
	if q.checkNetworkNodeExistsStmt != nil {
		if cerr := q.checkNetworkNodeExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkNetworkNodeExistsStmt: %w", cerr)
		}
	}
	if q.countBackupsByScheduleStmt != nil {
		if cerr := q.countBackupsByScheduleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countBackupsByScheduleStmt: %w", cerr)
		}
	}
	if q.countBackupsByTargetStmt != nil {
		if cerr := q.countBackupsByTargetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countBackupsByTargetStmt: %w", cerr)
		}
	}
	if q.countNetworksStmt != nil {
		if cerr := q.countNetworksStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countNetworksStmt: %w", cerr)
		}
	}
	if q.countNodeEventsStmt != nil {
		if cerr := q.countNodeEventsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countNodeEventsStmt: %w", cerr)
		}
	}
	if q.countNodesStmt != nil {
		if cerr := q.countNodesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countNodesStmt: %w", cerr)
		}
	}
	if q.countNodesByPlatformStmt != nil {
		if cerr := q.countNodesByPlatformStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countNodesByPlatformStmt: %w", cerr)
		}
	}
	if q.countUsersStmt != nil {
		if cerr := q.countUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countUsersStmt: %w", cerr)
		}
	}
	if q.createBackupStmt != nil {
		if cerr := q.createBackupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBackupStmt: %w", cerr)
		}
	}
	if q.createBackupScheduleStmt != nil {
		if cerr := q.createBackupScheduleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBackupScheduleStmt: %w", cerr)
		}
	}
	if q.createBackupTargetStmt != nil {
		if cerr := q.createBackupTargetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBackupTargetStmt: %w", cerr)
		}
	}
	if q.createFabricOrganizationStmt != nil {
		if cerr := q.createFabricOrganizationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFabricOrganizationStmt: %w", cerr)
		}
	}
	if q.createKeyStmt != nil {
		if cerr := q.createKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createKeyStmt: %w", cerr)
		}
	}
	if q.createKeyProviderStmt != nil {
		if cerr := q.createKeyProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createKeyProviderStmt: %w", cerr)
		}
	}
	if q.createNetworkStmt != nil {
		if cerr := q.createNetworkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createNetworkStmt: %w", cerr)
		}
	}
	if q.createNetworkFullStmt != nil {
		if cerr := q.createNetworkFullStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createNetworkFullStmt: %w", cerr)
		}
	}
	if q.createNetworkNodeStmt != nil {
		if cerr := q.createNetworkNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createNetworkNodeStmt: %w", cerr)
		}
	}
	if q.createNodeStmt != nil {
		if cerr := q.createNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createNodeStmt: %w", cerr)
		}
	}
	if q.createNodeEventStmt != nil {
		if cerr := q.createNodeEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createNodeEventStmt: %w", cerr)
		}
	}
	if q.createNotificationProviderStmt != nil {
		if cerr := q.createNotificationProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createNotificationProviderStmt: %w", cerr)
		}
	}
	if q.createSessionStmt != nil {
		if cerr := q.createSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSessionStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteBackupStmt != nil {
		if cerr := q.deleteBackupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteBackupStmt: %w", cerr)
		}
	}
	if q.deleteBackupScheduleStmt != nil {
		if cerr := q.deleteBackupScheduleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteBackupScheduleStmt: %w", cerr)
		}
	}
	if q.deleteBackupTargetStmt != nil {
		if cerr := q.deleteBackupTargetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteBackupTargetStmt: %w", cerr)
		}
	}
	if q.deleteBackupsByScheduleStmt != nil {
		if cerr := q.deleteBackupsByScheduleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteBackupsByScheduleStmt: %w", cerr)
		}
	}
	if q.deleteBackupsByTargetStmt != nil {
		if cerr := q.deleteBackupsByTargetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteBackupsByTargetStmt: %w", cerr)
		}
	}
	if q.deleteExpiredSessionsStmt != nil {
		if cerr := q.deleteExpiredSessionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteExpiredSessionsStmt: %w", cerr)
		}
	}
	if q.deleteFabricOrganizationStmt != nil {
		if cerr := q.deleteFabricOrganizationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFabricOrganizationStmt: %w", cerr)
		}
	}
	if q.deleteKeyStmt != nil {
		if cerr := q.deleteKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteKeyStmt: %w", cerr)
		}
	}
	if q.deleteKeyProviderStmt != nil {
		if cerr := q.deleteKeyProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteKeyProviderStmt: %w", cerr)
		}
	}
	if q.deleteNetworkStmt != nil {
		if cerr := q.deleteNetworkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteNetworkStmt: %w", cerr)
		}
	}
	if q.deleteNetworkNodeStmt != nil {
		if cerr := q.deleteNetworkNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteNetworkNodeStmt: %w", cerr)
		}
	}
	if q.deleteNodeStmt != nil {
		if cerr := q.deleteNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteNodeStmt: %w", cerr)
		}
	}
	if q.deleteNotificationProviderStmt != nil {
		if cerr := q.deleteNotificationProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteNotificationProviderStmt: %w", cerr)
		}
	}
	if q.deleteOldBackupsStmt != nil {
		if cerr := q.deleteOldBackupsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteOldBackupsStmt: %w", cerr)
		}
	}
	if q.deleteSessionStmt != nil {
		if cerr := q.deleteSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSessionStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.deleteUserSessionsStmt != nil {
		if cerr := q.deleteUserSessionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserSessionsStmt: %w", cerr)
		}
	}
	if q.disableBackupScheduleStmt != nil {
		if cerr := q.disableBackupScheduleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing disableBackupScheduleStmt: %w", cerr)
		}
	}
	if q.enableBackupScheduleStmt != nil {
		if cerr := q.enableBackupScheduleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing enableBackupScheduleStmt: %w", cerr)
		}
	}
	if q.getAllKeysStmt != nil {
		if cerr := q.getAllKeysStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllKeysStmt: %w", cerr)
		}
	}
	if q.getAllNodesStmt != nil {
		if cerr := q.getAllNodesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllNodesStmt: %w", cerr)
		}
	}
	if q.getBackupStmt != nil {
		if cerr := q.getBackupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBackupStmt: %w", cerr)
		}
	}
	if q.getBackupScheduleStmt != nil {
		if cerr := q.getBackupScheduleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBackupScheduleStmt: %w", cerr)
		}
	}
	if q.getBackupTargetStmt != nil {
		if cerr := q.getBackupTargetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBackupTargetStmt: %w", cerr)
		}
	}
	if q.getBackupsByDateRangeStmt != nil {
		if cerr := q.getBackupsByDateRangeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBackupsByDateRangeStmt: %w", cerr)
		}
	}
	if q.getBackupsByScheduleAndStatusStmt != nil {
		if cerr := q.getBackupsByScheduleAndStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBackupsByScheduleAndStatusStmt: %w", cerr)
		}
	}
	if q.getBackupsByStatusStmt != nil {
		if cerr := q.getBackupsByStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBackupsByStatusStmt: %w", cerr)
		}
	}
	if q.getDefaultNotificationProviderStmt != nil {
		if cerr := q.getDefaultNotificationProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDefaultNotificationProviderStmt: %w", cerr)
		}
	}
	if q.getDefaultNotificationProviderForTypeStmt != nil {
		if cerr := q.getDefaultNotificationProviderForTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDefaultNotificationProviderForTypeStmt: %w", cerr)
		}
	}
	if q.getFabricOrganizationStmt != nil {
		if cerr := q.getFabricOrganizationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFabricOrganizationStmt: %w", cerr)
		}
	}
	if q.getFabricOrganizationByIDStmt != nil {
		if cerr := q.getFabricOrganizationByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFabricOrganizationByIDStmt: %w", cerr)
		}
	}
	if q.getFabricOrganizationByMSPIDStmt != nil {
		if cerr := q.getFabricOrganizationByMSPIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFabricOrganizationByMSPIDStmt: %w", cerr)
		}
	}
	if q.getFabricOrganizationByMspIDStmt != nil {
		if cerr := q.getFabricOrganizationByMspIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFabricOrganizationByMspIDStmt: %w", cerr)
		}
	}
	if q.getFabricOrganizationWithKeysStmt != nil {
		if cerr := q.getFabricOrganizationWithKeysStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFabricOrganizationWithKeysStmt: %w", cerr)
		}
	}
	if q.getKeyStmt != nil {
		if cerr := q.getKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getKeyStmt: %w", cerr)
		}
	}
	if q.getKeyByEthereumAddressStmt != nil {
		if cerr := q.getKeyByEthereumAddressStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getKeyByEthereumAddressStmt: %w", cerr)
		}
	}
	if q.getKeyByIDStmt != nil {
		if cerr := q.getKeyByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getKeyByIDStmt: %w", cerr)
		}
	}
	if q.getKeyCountByProviderStmt != nil {
		if cerr := q.getKeyCountByProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getKeyCountByProviderStmt: %w", cerr)
		}
	}
	if q.getKeyProviderStmt != nil {
		if cerr := q.getKeyProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getKeyProviderStmt: %w", cerr)
		}
	}
	if q.getKeyProviderByDefaultStmt != nil {
		if cerr := q.getKeyProviderByDefaultStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getKeyProviderByDefaultStmt: %w", cerr)
		}
	}
	if q.getKeyProviderByIDStmt != nil {
		if cerr := q.getKeyProviderByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getKeyProviderByIDStmt: %w", cerr)
		}
	}
	if q.getKeysByAlgorithmStmt != nil {
		if cerr := q.getKeysByAlgorithmStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getKeysByAlgorithmStmt: %w", cerr)
		}
	}
	if q.getKeysByProviderAndCurveStmt != nil {
		if cerr := q.getKeysByProviderAndCurveStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getKeysByProviderAndCurveStmt: %w", cerr)
		}
	}
	if q.getKeysCountStmt != nil {
		if cerr := q.getKeysCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getKeysCountStmt: %w", cerr)
		}
	}
	if q.getLatestNodeEventStmt != nil {
		if cerr := q.getLatestNodeEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLatestNodeEventStmt: %w", cerr)
		}
	}
	if q.getNetworkStmt != nil {
		if cerr := q.getNetworkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNetworkStmt: %w", cerr)
		}
	}
	if q.getNetworkByNameStmt != nil {
		if cerr := q.getNetworkByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNetworkByNameStmt: %w", cerr)
		}
	}
	if q.getNetworkByNetworkIdStmt != nil {
		if cerr := q.getNetworkByNetworkIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNetworkByNetworkIdStmt: %w", cerr)
		}
	}
	if q.getNetworkCurrentConfigBlockStmt != nil {
		if cerr := q.getNetworkCurrentConfigBlockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNetworkCurrentConfigBlockStmt: %w", cerr)
		}
	}
	if q.getNetworkNodeStmt != nil {
		if cerr := q.getNetworkNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNetworkNodeStmt: %w", cerr)
		}
	}
	if q.getNetworkNodesStmt != nil {
		if cerr := q.getNetworkNodesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNetworkNodesStmt: %w", cerr)
		}
	}
	if q.getNodeStmt != nil {
		if cerr := q.getNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNodeStmt: %w", cerr)
		}
	}
	if q.getNodeBySlugStmt != nil {
		if cerr := q.getNodeBySlugStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNodeBySlugStmt: %w", cerr)
		}
	}
	if q.getNodeEventStmt != nil {
		if cerr := q.getNodeEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNodeEventStmt: %w", cerr)
		}
	}
	if q.getNotificationProviderStmt != nil {
		if cerr := q.getNotificationProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNotificationProviderStmt: %w", cerr)
		}
	}
	if q.getOldestBackupByTargetStmt != nil {
		if cerr := q.getOldestBackupByTargetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOldestBackupByTargetStmt: %w", cerr)
		}
	}
	if q.getOrdererPortsStmt != nil {
		if cerr := q.getOrdererPortsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOrdererPortsStmt: %w", cerr)
		}
	}
	if q.getOrganizationCRLInfoStmt != nil {
		if cerr := q.getOrganizationCRLInfoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOrganizationCRLInfoStmt: %w", cerr)
		}
	}
	if q.getPeerPortsStmt != nil {
		if cerr := q.getPeerPortsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPeerPortsStmt: %w", cerr)
		}
	}
	if q.getProvidersByNotificationTypeStmt != nil {
		if cerr := q.getProvidersByNotificationTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProvidersByNotificationTypeStmt: %w", cerr)
		}
	}
	if q.getRecentCompletedBackupsStmt != nil {
		if cerr := q.getRecentCompletedBackupsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecentCompletedBackupsStmt: %w", cerr)
		}
	}
	if q.getRevokedCertificateStmt != nil {
		if cerr := q.getRevokedCertificateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRevokedCertificateStmt: %w", cerr)
		}
	}
	if q.getRevokedCertificatesStmt != nil {
		if cerr := q.getRevokedCertificatesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRevokedCertificatesStmt: %w", cerr)
		}
	}
	if q.getSessionStmt != nil {
		if cerr := q.getSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSessionStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserByUsernameStmt != nil {
		if cerr := q.getUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUsernameStmt: %w", cerr)
		}
	}
	if q.listBackupSchedulesStmt != nil {
		if cerr := q.listBackupSchedulesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listBackupSchedulesStmt: %w", cerr)
		}
	}
	if q.listBackupTargetsStmt != nil {
		if cerr := q.listBackupTargetsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listBackupTargetsStmt: %w", cerr)
		}
	}
	if q.listBackupsStmt != nil {
		if cerr := q.listBackupsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listBackupsStmt: %w", cerr)
		}
	}
	if q.listBackupsByScheduleStmt != nil {
		if cerr := q.listBackupsByScheduleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listBackupsByScheduleStmt: %w", cerr)
		}
	}
	if q.listBackupsByTargetStmt != nil {
		if cerr := q.listBackupsByTargetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listBackupsByTargetStmt: %w", cerr)
		}
	}
	if q.listFabricOrganizationsStmt != nil {
		if cerr := q.listFabricOrganizationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFabricOrganizationsStmt: %w", cerr)
		}
	}
	if q.listFabricOrganizationsWithKeysStmt != nil {
		if cerr := q.listFabricOrganizationsWithKeysStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFabricOrganizationsWithKeysStmt: %w", cerr)
		}
	}
	if q.listKeyProvidersStmt != nil {
		if cerr := q.listKeyProvidersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listKeyProvidersStmt: %w", cerr)
		}
	}
	if q.listKeysStmt != nil {
		if cerr := q.listKeysStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listKeysStmt: %w", cerr)
		}
	}
	if q.listNetworkNodesByNetworkStmt != nil {
		if cerr := q.listNetworkNodesByNetworkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listNetworkNodesByNetworkStmt: %w", cerr)
		}
	}
	if q.listNetworkNodesByNodeStmt != nil {
		if cerr := q.listNetworkNodesByNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listNetworkNodesByNodeStmt: %w", cerr)
		}
	}
	if q.listNetworksStmt != nil {
		if cerr := q.listNetworksStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listNetworksStmt: %w", cerr)
		}
	}
	if q.listNodeEventsStmt != nil {
		if cerr := q.listNodeEventsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listNodeEventsStmt: %w", cerr)
		}
	}
	if q.listNodeEventsByTypeStmt != nil {
		if cerr := q.listNodeEventsByTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listNodeEventsByTypeStmt: %w", cerr)
		}
	}
	if q.listNodesStmt != nil {
		if cerr := q.listNodesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listNodesStmt: %w", cerr)
		}
	}
	if q.listNodesByNetworkStmt != nil {
		if cerr := q.listNodesByNetworkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listNodesByNetworkStmt: %w", cerr)
		}
	}
	if q.listNodesByPlatformStmt != nil {
		if cerr := q.listNodesByPlatformStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listNodesByPlatformStmt: %w", cerr)
		}
	}
	if q.listNotificationProvidersStmt != nil {
		if cerr := q.listNotificationProvidersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listNotificationProvidersStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.markBackupNotifiedStmt != nil {
		if cerr := q.markBackupNotifiedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing markBackupNotifiedStmt: %w", cerr)
		}
	}
	if q.unsetDefaultNotificationProviderStmt != nil {
		if cerr := q.unsetDefaultNotificationProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing unsetDefaultNotificationProviderStmt: %w", cerr)
		}
	}
	if q.unsetDefaultProviderStmt != nil {
		if cerr := q.unsetDefaultProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing unsetDefaultProviderStmt: %w", cerr)
		}
	}
	if q.updateBackupCompletedStmt != nil {
		if cerr := q.updateBackupCompletedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBackupCompletedStmt: %w", cerr)
		}
	}
	if q.updateBackupFailedStmt != nil {
		if cerr := q.updateBackupFailedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBackupFailedStmt: %w", cerr)
		}
	}
	if q.updateBackupScheduleStmt != nil {
		if cerr := q.updateBackupScheduleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBackupScheduleStmt: %w", cerr)
		}
	}
	if q.updateBackupScheduleLastRunStmt != nil {
		if cerr := q.updateBackupScheduleLastRunStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBackupScheduleLastRunStmt: %w", cerr)
		}
	}
	if q.updateBackupSizeStmt != nil {
		if cerr := q.updateBackupSizeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBackupSizeStmt: %w", cerr)
		}
	}
	if q.updateBackupStatusStmt != nil {
		if cerr := q.updateBackupStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBackupStatusStmt: %w", cerr)
		}
	}
	if q.updateBackupTargetStmt != nil {
		if cerr := q.updateBackupTargetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBackupTargetStmt: %w", cerr)
		}
	}
	if q.updateDeploymentConfigStmt != nil {
		if cerr := q.updateDeploymentConfigStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateDeploymentConfigStmt: %w", cerr)
		}
	}
	if q.updateFabricOrganizationStmt != nil {
		if cerr := q.updateFabricOrganizationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateFabricOrganizationStmt: %w", cerr)
		}
	}
	if q.updateKeyStmt != nil {
		if cerr := q.updateKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateKeyStmt: %w", cerr)
		}
	}
	if q.updateKeyProviderStmt != nil {
		if cerr := q.updateKeyProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateKeyProviderStmt: %w", cerr)
		}
	}
	if q.updateNetworkCurrentConfigBlockStmt != nil {
		if cerr := q.updateNetworkCurrentConfigBlockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNetworkCurrentConfigBlockStmt: %w", cerr)
		}
	}
	if q.updateNetworkGenesisBlockStmt != nil {
		if cerr := q.updateNetworkGenesisBlockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNetworkGenesisBlockStmt: %w", cerr)
		}
	}
	if q.updateNetworkNodeRoleStmt != nil {
		if cerr := q.updateNetworkNodeRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNetworkNodeRoleStmt: %w", cerr)
		}
	}
	if q.updateNetworkNodeStatusStmt != nil {
		if cerr := q.updateNetworkNodeStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNetworkNodeStatusStmt: %w", cerr)
		}
	}
	if q.updateNetworkStatusStmt != nil {
		if cerr := q.updateNetworkStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNetworkStatusStmt: %w", cerr)
		}
	}
	if q.updateNodeConfigStmt != nil {
		if cerr := q.updateNodeConfigStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNodeConfigStmt: %w", cerr)
		}
	}
	if q.updateNodeDeploymentConfigStmt != nil {
		if cerr := q.updateNodeDeploymentConfigStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNodeDeploymentConfigStmt: %w", cerr)
		}
	}
	if q.updateNodeEndpointStmt != nil {
		if cerr := q.updateNodeEndpointStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNodeEndpointStmt: %w", cerr)
		}
	}
	if q.updateNodePublicEndpointStmt != nil {
		if cerr := q.updateNodePublicEndpointStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNodePublicEndpointStmt: %w", cerr)
		}
	}
	if q.updateNodeStatusStmt != nil {
		if cerr := q.updateNodeStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNodeStatusStmt: %w", cerr)
		}
	}
	if q.updateNotificationProviderStmt != nil {
		if cerr := q.updateNotificationProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNotificationProviderStmt: %w", cerr)
		}
	}
	if q.updateOrganizationCRLStmt != nil {
		if cerr := q.updateOrganizationCRLStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateOrganizationCRLStmt: %w", cerr)
		}
	}
	if q.updateProviderTestResultsStmt != nil {
		if cerr := q.updateProviderTestResultsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProviderTestResultsStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	if q.updateUserLastLoginStmt != nil {
		if cerr := q.updateUserLastLoginStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserLastLoginStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                        DBTX
	tx                                        *sql.Tx
	addRevokedCertificateStmt                 *sql.Stmt
	checkNetworkNodeExistsStmt                *sql.Stmt
	countBackupsByScheduleStmt                *sql.Stmt
	countBackupsByTargetStmt                  *sql.Stmt
	countNetworksStmt                         *sql.Stmt
	countNodeEventsStmt                       *sql.Stmt
	countNodesStmt                            *sql.Stmt
	countNodesByPlatformStmt                  *sql.Stmt
	countUsersStmt                            *sql.Stmt
	createBackupStmt                          *sql.Stmt
	createBackupScheduleStmt                  *sql.Stmt
	createBackupTargetStmt                    *sql.Stmt
	createFabricOrganizationStmt              *sql.Stmt
	createKeyStmt                             *sql.Stmt
	createKeyProviderStmt                     *sql.Stmt
	createNetworkStmt                         *sql.Stmt
	createNetworkFullStmt                     *sql.Stmt
	createNetworkNodeStmt                     *sql.Stmt
	createNodeStmt                            *sql.Stmt
	createNodeEventStmt                       *sql.Stmt
	createNotificationProviderStmt            *sql.Stmt
	createSessionStmt                         *sql.Stmt
	createUserStmt                            *sql.Stmt
	deleteBackupStmt                          *sql.Stmt
	deleteBackupScheduleStmt                  *sql.Stmt
	deleteBackupTargetStmt                    *sql.Stmt
	deleteBackupsByScheduleStmt               *sql.Stmt
	deleteBackupsByTargetStmt                 *sql.Stmt
	deleteExpiredSessionsStmt                 *sql.Stmt
	deleteFabricOrganizationStmt              *sql.Stmt
	deleteKeyStmt                             *sql.Stmt
	deleteKeyProviderStmt                     *sql.Stmt
	deleteNetworkStmt                         *sql.Stmt
	deleteNetworkNodeStmt                     *sql.Stmt
	deleteNodeStmt                            *sql.Stmt
	deleteNotificationProviderStmt            *sql.Stmt
	deleteOldBackupsStmt                      *sql.Stmt
	deleteSessionStmt                         *sql.Stmt
	deleteUserStmt                            *sql.Stmt
	deleteUserSessionsStmt                    *sql.Stmt
	disableBackupScheduleStmt                 *sql.Stmt
	enableBackupScheduleStmt                  *sql.Stmt
	getAllKeysStmt                            *sql.Stmt
	getAllNodesStmt                           *sql.Stmt
	getBackupStmt                             *sql.Stmt
	getBackupScheduleStmt                     *sql.Stmt
	getBackupTargetStmt                       *sql.Stmt
	getBackupsByDateRangeStmt                 *sql.Stmt
	getBackupsByScheduleAndStatusStmt         *sql.Stmt
	getBackupsByStatusStmt                    *sql.Stmt
	getDefaultNotificationProviderStmt        *sql.Stmt
	getDefaultNotificationProviderForTypeStmt *sql.Stmt
	getFabricOrganizationStmt                 *sql.Stmt
	getFabricOrganizationByIDStmt             *sql.Stmt
	getFabricOrganizationByMSPIDStmt          *sql.Stmt
	getFabricOrganizationByMspIDStmt          *sql.Stmt
	getFabricOrganizationWithKeysStmt         *sql.Stmt
	getKeyStmt                                *sql.Stmt
	getKeyByEthereumAddressStmt               *sql.Stmt
	getKeyByIDStmt                            *sql.Stmt
	getKeyCountByProviderStmt                 *sql.Stmt
	getKeyProviderStmt                        *sql.Stmt
	getKeyProviderByDefaultStmt               *sql.Stmt
	getKeyProviderByIDStmt                    *sql.Stmt
	getKeysByAlgorithmStmt                    *sql.Stmt
	getKeysByProviderAndCurveStmt             *sql.Stmt
	getKeysCountStmt                          *sql.Stmt
	getLatestNodeEventStmt                    *sql.Stmt
	getNetworkStmt                            *sql.Stmt
	getNetworkByNameStmt                      *sql.Stmt
	getNetworkByNetworkIdStmt                 *sql.Stmt
	getNetworkCurrentConfigBlockStmt          *sql.Stmt
	getNetworkNodeStmt                        *sql.Stmt
	getNetworkNodesStmt                       *sql.Stmt
	getNodeStmt                               *sql.Stmt
	getNodeBySlugStmt                         *sql.Stmt
	getNodeEventStmt                          *sql.Stmt
	getNotificationProviderStmt               *sql.Stmt
	getOldestBackupByTargetStmt               *sql.Stmt
	getOrdererPortsStmt                       *sql.Stmt
	getOrganizationCRLInfoStmt                *sql.Stmt
	getPeerPortsStmt                          *sql.Stmt
	getProvidersByNotificationTypeStmt        *sql.Stmt
	getRecentCompletedBackupsStmt             *sql.Stmt
	getRevokedCertificateStmt                 *sql.Stmt
	getRevokedCertificatesStmt                *sql.Stmt
	getSessionStmt                            *sql.Stmt
	getUserStmt                               *sql.Stmt
	getUserByUsernameStmt                     *sql.Stmt
	listBackupSchedulesStmt                   *sql.Stmt
	listBackupTargetsStmt                     *sql.Stmt
	listBackupsStmt                           *sql.Stmt
	listBackupsByScheduleStmt                 *sql.Stmt
	listBackupsByTargetStmt                   *sql.Stmt
	listFabricOrganizationsStmt               *sql.Stmt
	listFabricOrganizationsWithKeysStmt       *sql.Stmt
	listKeyProvidersStmt                      *sql.Stmt
	listKeysStmt                              *sql.Stmt
	listNetworkNodesByNetworkStmt             *sql.Stmt
	listNetworkNodesByNodeStmt                *sql.Stmt
	listNetworksStmt                          *sql.Stmt
	listNodeEventsStmt                        *sql.Stmt
	listNodeEventsByTypeStmt                  *sql.Stmt
	listNodesStmt                             *sql.Stmt
	listNodesByNetworkStmt                    *sql.Stmt
	listNodesByPlatformStmt                   *sql.Stmt
	listNotificationProvidersStmt             *sql.Stmt
	listUsersStmt                             *sql.Stmt
	markBackupNotifiedStmt                    *sql.Stmt
	unsetDefaultNotificationProviderStmt      *sql.Stmt
	unsetDefaultProviderStmt                  *sql.Stmt
	updateBackupCompletedStmt                 *sql.Stmt
	updateBackupFailedStmt                    *sql.Stmt
	updateBackupScheduleStmt                  *sql.Stmt
	updateBackupScheduleLastRunStmt           *sql.Stmt
	updateBackupSizeStmt                      *sql.Stmt
	updateBackupStatusStmt                    *sql.Stmt
	updateBackupTargetStmt                    *sql.Stmt
	updateDeploymentConfigStmt                *sql.Stmt
	updateFabricOrganizationStmt              *sql.Stmt
	updateKeyStmt                             *sql.Stmt
	updateKeyProviderStmt                     *sql.Stmt
	updateNetworkCurrentConfigBlockStmt       *sql.Stmt
	updateNetworkGenesisBlockStmt             *sql.Stmt
	updateNetworkNodeRoleStmt                 *sql.Stmt
	updateNetworkNodeStatusStmt               *sql.Stmt
	updateNetworkStatusStmt                   *sql.Stmt
	updateNodeConfigStmt                      *sql.Stmt
	updateNodeDeploymentConfigStmt            *sql.Stmt
	updateNodeEndpointStmt                    *sql.Stmt
	updateNodePublicEndpointStmt              *sql.Stmt
	updateNodeStatusStmt                      *sql.Stmt
	updateNotificationProviderStmt            *sql.Stmt
	updateOrganizationCRLStmt                 *sql.Stmt
	updateProviderTestResultsStmt             *sql.Stmt
	updateUserStmt                            *sql.Stmt
	updateUserLastLoginStmt                   *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                        tx,
		tx:                                        tx,
		addRevokedCertificateStmt:                 q.addRevokedCertificateStmt,
		checkNetworkNodeExistsStmt:                q.checkNetworkNodeExistsStmt,
		countBackupsByScheduleStmt:                q.countBackupsByScheduleStmt,
		countBackupsByTargetStmt:                  q.countBackupsByTargetStmt,
		countNetworksStmt:                         q.countNetworksStmt,
		countNodeEventsStmt:                       q.countNodeEventsStmt,
		countNodesStmt:                            q.countNodesStmt,
		countNodesByPlatformStmt:                  q.countNodesByPlatformStmt,
		countUsersStmt:                            q.countUsersStmt,
		createBackupStmt:                          q.createBackupStmt,
		createBackupScheduleStmt:                  q.createBackupScheduleStmt,
		createBackupTargetStmt:                    q.createBackupTargetStmt,
		createFabricOrganizationStmt:              q.createFabricOrganizationStmt,
		createKeyStmt:                             q.createKeyStmt,
		createKeyProviderStmt:                     q.createKeyProviderStmt,
		createNetworkStmt:                         q.createNetworkStmt,
		createNetworkFullStmt:                     q.createNetworkFullStmt,
		createNetworkNodeStmt:                     q.createNetworkNodeStmt,
		createNodeStmt:                            q.createNodeStmt,
		createNodeEventStmt:                       q.createNodeEventStmt,
		createNotificationProviderStmt:            q.createNotificationProviderStmt,
		createSessionStmt:                         q.createSessionStmt,
		createUserStmt:                            q.createUserStmt,
		deleteBackupStmt:                          q.deleteBackupStmt,
		deleteBackupScheduleStmt:                  q.deleteBackupScheduleStmt,
		deleteBackupTargetStmt:                    q.deleteBackupTargetStmt,
		deleteBackupsByScheduleStmt:               q.deleteBackupsByScheduleStmt,
		deleteBackupsByTargetStmt:                 q.deleteBackupsByTargetStmt,
		deleteExpiredSessionsStmt:                 q.deleteExpiredSessionsStmt,
		deleteFabricOrganizationStmt:              q.deleteFabricOrganizationStmt,
		deleteKeyStmt:                             q.deleteKeyStmt,
		deleteKeyProviderStmt:                     q.deleteKeyProviderStmt,
		deleteNetworkStmt:                         q.deleteNetworkStmt,
		deleteNetworkNodeStmt:                     q.deleteNetworkNodeStmt,
		deleteNodeStmt:                            q.deleteNodeStmt,
		deleteNotificationProviderStmt:            q.deleteNotificationProviderStmt,
		deleteOldBackupsStmt:                      q.deleteOldBackupsStmt,
		deleteSessionStmt:                         q.deleteSessionStmt,
		deleteUserStmt:                            q.deleteUserStmt,
		deleteUserSessionsStmt:                    q.deleteUserSessionsStmt,
		disableBackupScheduleStmt:                 q.disableBackupScheduleStmt,
		enableBackupScheduleStmt:                  q.enableBackupScheduleStmt,
		getAllKeysStmt:                            q.getAllKeysStmt,
		getAllNodesStmt:                           q.getAllNodesStmt,
		getBackupStmt:                             q.getBackupStmt,
		getBackupScheduleStmt:                     q.getBackupScheduleStmt,
		getBackupTargetStmt:                       q.getBackupTargetStmt,
		getBackupsByDateRangeStmt:                 q.getBackupsByDateRangeStmt,
		getBackupsByScheduleAndStatusStmt:         q.getBackupsByScheduleAndStatusStmt,
		getBackupsByStatusStmt:                    q.getBackupsByStatusStmt,
		getDefaultNotificationProviderStmt:        q.getDefaultNotificationProviderStmt,
		getDefaultNotificationProviderForTypeStmt: q.getDefaultNotificationProviderForTypeStmt,
		getFabricOrganizationStmt:                 q.getFabricOrganizationStmt,
		getFabricOrganizationByIDStmt:             q.getFabricOrganizationByIDStmt,
		getFabricOrganizationByMSPIDStmt:          q.getFabricOrganizationByMSPIDStmt,
		getFabricOrganizationByMspIDStmt:          q.getFabricOrganizationByMspIDStmt,
		getFabricOrganizationWithKeysStmt:         q.getFabricOrganizationWithKeysStmt,
		getKeyStmt:                                q.getKeyStmt,
		getKeyByEthereumAddressStmt:               q.getKeyByEthereumAddressStmt,
		getKeyByIDStmt:                            q.getKeyByIDStmt,
		getKeyCountByProviderStmt:                 q.getKeyCountByProviderStmt,
		getKeyProviderStmt:                        q.getKeyProviderStmt,
		getKeyProviderByDefaultStmt:               q.getKeyProviderByDefaultStmt,
		getKeyProviderByIDStmt:                    q.getKeyProviderByIDStmt,
		getKeysByAlgorithmStmt:                    q.getKeysByAlgorithmStmt,
		getKeysByProviderAndCurveStmt:             q.getKeysByProviderAndCurveStmt,
		getKeysCountStmt:                          q.getKeysCountStmt,
		getLatestNodeEventStmt:                    q.getLatestNodeEventStmt,
		getNetworkStmt:                            q.getNetworkStmt,
		getNetworkByNameStmt:                      q.getNetworkByNameStmt,
		getNetworkByNetworkIdStmt:                 q.getNetworkByNetworkIdStmt,
		getNetworkCurrentConfigBlockStmt:          q.getNetworkCurrentConfigBlockStmt,
		getNetworkNodeStmt:                        q.getNetworkNodeStmt,
		getNetworkNodesStmt:                       q.getNetworkNodesStmt,
		getNodeStmt:                               q.getNodeStmt,
		getNodeBySlugStmt:                         q.getNodeBySlugStmt,
		getNodeEventStmt:                          q.getNodeEventStmt,
		getNotificationProviderStmt:               q.getNotificationProviderStmt,
		getOldestBackupByTargetStmt:               q.getOldestBackupByTargetStmt,
		getOrdererPortsStmt:                       q.getOrdererPortsStmt,
		getOrganizationCRLInfoStmt:                q.getOrganizationCRLInfoStmt,
		getPeerPortsStmt:                          q.getPeerPortsStmt,
		getProvidersByNotificationTypeStmt:        q.getProvidersByNotificationTypeStmt,
		getRecentCompletedBackupsStmt:             q.getRecentCompletedBackupsStmt,
		getRevokedCertificateStmt:                 q.getRevokedCertificateStmt,
		getRevokedCertificatesStmt:                q.getRevokedCertificatesStmt,
		getSessionStmt:                            q.getSessionStmt,
		getUserStmt:                               q.getUserStmt,
		getUserByUsernameStmt:                     q.getUserByUsernameStmt,
		listBackupSchedulesStmt:                   q.listBackupSchedulesStmt,
		listBackupTargetsStmt:                     q.listBackupTargetsStmt,
		listBackupsStmt:                           q.listBackupsStmt,
		listBackupsByScheduleStmt:                 q.listBackupsByScheduleStmt,
		listBackupsByTargetStmt:                   q.listBackupsByTargetStmt,
		listFabricOrganizationsStmt:               q.listFabricOrganizationsStmt,
		listFabricOrganizationsWithKeysStmt:       q.listFabricOrganizationsWithKeysStmt,
		listKeyProvidersStmt:                      q.listKeyProvidersStmt,
		listKeysStmt:                              q.listKeysStmt,
		listNetworkNodesByNetworkStmt:             q.listNetworkNodesByNetworkStmt,
		listNetworkNodesByNodeStmt:                q.listNetworkNodesByNodeStmt,
		listNetworksStmt:                          q.listNetworksStmt,
		listNodeEventsStmt:                        q.listNodeEventsStmt,
		listNodeEventsByTypeStmt:                  q.listNodeEventsByTypeStmt,
		listNodesStmt:                             q.listNodesStmt,
		listNodesByNetworkStmt:                    q.listNodesByNetworkStmt,
		listNodesByPlatformStmt:                   q.listNodesByPlatformStmt,
		listNotificationProvidersStmt:             q.listNotificationProvidersStmt,
		listUsersStmt:                             q.listUsersStmt,
		markBackupNotifiedStmt:                    q.markBackupNotifiedStmt,
		unsetDefaultNotificationProviderStmt:      q.unsetDefaultNotificationProviderStmt,
		unsetDefaultProviderStmt:                  q.unsetDefaultProviderStmt,
		updateBackupCompletedStmt:                 q.updateBackupCompletedStmt,
		updateBackupFailedStmt:                    q.updateBackupFailedStmt,
		updateBackupScheduleStmt:                  q.updateBackupScheduleStmt,
		updateBackupScheduleLastRunStmt:           q.updateBackupScheduleLastRunStmt,
		updateBackupSizeStmt:                      q.updateBackupSizeStmt,
		updateBackupStatusStmt:                    q.updateBackupStatusStmt,
		updateBackupTargetStmt:                    q.updateBackupTargetStmt,
		updateDeploymentConfigStmt:                q.updateDeploymentConfigStmt,
		updateFabricOrganizationStmt:              q.updateFabricOrganizationStmt,
		updateKeyStmt:                             q.updateKeyStmt,
		updateKeyProviderStmt:                     q.updateKeyProviderStmt,
		updateNetworkCurrentConfigBlockStmt:       q.updateNetworkCurrentConfigBlockStmt,
		updateNetworkGenesisBlockStmt:             q.updateNetworkGenesisBlockStmt,
		updateNetworkNodeRoleStmt:                 q.updateNetworkNodeRoleStmt,
		updateNetworkNodeStatusStmt:               q.updateNetworkNodeStatusStmt,
		updateNetworkStatusStmt:                   q.updateNetworkStatusStmt,
		updateNodeConfigStmt:                      q.updateNodeConfigStmt,
		updateNodeDeploymentConfigStmt:            q.updateNodeDeploymentConfigStmt,
		updateNodeEndpointStmt:                    q.updateNodeEndpointStmt,
		updateNodePublicEndpointStmt:              q.updateNodePublicEndpointStmt,
		updateNodeStatusStmt:                      q.updateNodeStatusStmt,
		updateNotificationProviderStmt:            q.updateNotificationProviderStmt,
		updateOrganizationCRLStmt:                 q.updateOrganizationCRLStmt,
		updateProviderTestResultsStmt:             q.updateProviderTestResultsStmt,
		updateUserStmt:                            q.updateUserStmt,
		updateUserLastLoginStmt:                   q.updateUserLastLoginStmt,
	}
}
