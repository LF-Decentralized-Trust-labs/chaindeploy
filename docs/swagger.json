{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "ChainLaunch API provides services for managing blockchain networks and cryptographic keys",
        "title": "ChainLaunch API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.chainlaunch.com/support",
            "email": "support@chainlaunch.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8100",
    "basePath": "/api/v1",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Authenticates a user and returns a session cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/auth.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Invalidates the current session and clears the session cookie",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout user",
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "schema": {
                            "$ref": "#/definitions/auth.LogoutResponse"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    },
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Returns information about the currently authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Get current user",
                "responses": {
                    "200": {
                        "description": "User information",
                        "schema": {
                            "$ref": "#/definitions/auth.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/backups": {
            "get": {
                "description": "Get a list of all backups",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backups"
                ],
                "summary": "List all backups",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/http.BackupResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new backup with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backups"
                ],
                "summary": "Create a new backup",
                "parameters": [
                    {
                        "description": "Backup creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.CreateBackupRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/http.BackupResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/backups/schedules": {
            "get": {
                "description": "Get a list of all backup schedules",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backup-schedules"
                ],
                "summary": "List all backup schedules",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/http.BackupScheduleResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new backup schedule with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backup-schedules"
                ],
                "summary": "Create a new backup schedule",
                "parameters": [
                    {
                        "description": "Backup schedule creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.CreateBackupScheduleRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/http.BackupScheduleResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/backups/schedules/{id}": {
            "get": {
                "description": "Get detailed information about a specific backup schedule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backup-schedules"
                ],
                "summary": "Get a backup schedule by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Schedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.BackupScheduleResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Schedule not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing backup schedule with new configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backup-schedules"
                ],
                "summary": "Update a backup schedule",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Schedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Backup schedule update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.UpdateBackupScheduleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.BackupScheduleResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Schedule not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a backup schedule and stop its execution",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backup-schedules"
                ],
                "summary": "Delete a backup schedule",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Schedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Schedule not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/backups/schedules/{id}/disable": {
            "put": {
                "description": "Disable a backup schedule to stop it from running",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backup-schedules"
                ],
                "summary": "Disable a backup schedule",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Schedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.BackupScheduleResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Schedule not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/backups/schedules/{id}/enable": {
            "put": {
                "description": "Enable a backup schedule to start running",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backup-schedules"
                ],
                "summary": "Enable a backup schedule",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Schedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.BackupScheduleResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Schedule not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/backups/targets": {
            "get": {
                "description": "Get a list of all backup targets",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backup-targets"
                ],
                "summary": "List all backup targets",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/http.BackupTargetResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new backup target with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backup-targets"
                ],
                "summary": "Create a new backup target",
                "parameters": [
                    {
                        "description": "Backup target creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.CreateBackupTargetRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/http.BackupTargetResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/backups/targets/{id}": {
            "get": {
                "description": "Get detailed information about a specific backup target",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backup-targets"
                ],
                "summary": "Get a backup target by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Backup Target ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.BackupTargetResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Target not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing backup target with new configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backup-targets"
                ],
                "summary": "Update a backup target",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Backup Target ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Backup target update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.UpdateBackupTargetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.BackupTargetResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Target not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a backup target and all associated backups",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backup-targets"
                ],
                "summary": "Delete a backup target",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Backup Target ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Target not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/backups/{id}": {
            "get": {
                "description": "Get detailed information about a specific backup",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backups"
                ],
                "summary": "Get a backup by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Backup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.BackupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Backup not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a backup and its associated files",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backups"
                ],
                "summary": "Delete a backup",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Backup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Backup not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/dummy": {
            "post": {
                "description": "Submit a signed config update proposal for execution",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "fabric-networks"
                ],
                "summary": "Submit config update proposal",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Proposal ID",
                        "name": "proposalId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.RemoveOrgPayload"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/http.UpdateOrgMSPPayload"
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/http.SetAnchorPeersPayload"
                        }
                    },
                    "203": {
                        "description": "Non-Authoritative Information",
                        "schema": {
                            "$ref": "#/definitions/http.AddConsenterPayload"
                        }
                    },
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/http.RemoveConsenterPayload"
                        }
                    },
                    "205": {
                        "description": "Reset Content",
                        "schema": {
                            "$ref": "#/definitions/http.UpdateConsenterPayload"
                        }
                    },
                    "206": {
                        "description": "Partial Content",
                        "schema": {
                            "$ref": "#/definitions/http.UpdateEtcdRaftOptionsPayload"
                        }
                    },
                    "207": {
                        "description": "Multi-Status",
                        "schema": {
                            "$ref": "#/definitions/http.UpdateBatchSizePayload"
                        }
                    },
                    "208": {
                        "description": "Already Reported",
                        "schema": {
                            "$ref": "#/definitions/http.UpdateBatchTimeoutPayload"
                        }
                    }
                }
            }
        },
        "/key-providers": {
            "get": {
                "description": "Get a list of all configured key providers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "providers"
                ],
                "summary": "List all key providers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ProviderResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new provider for key management",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "providers"
                ],
                "summary": "Create a new key provider",
                "parameters": [
                    {
                        "description": "Provider creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateProviderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.ProviderResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/key-providers/{id}": {
            "get": {
                "description": "Get detailed information about a specific key provider",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "providers"
                ],
                "summary": "Get a specific provider",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Provider ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ProviderResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Provider not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a specific key provider",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "providers"
                ],
                "summary": "Delete a provider",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Provider ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Provider not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Provider has existing keys",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/keys": {
            "get": {
                "description": "Get a paginated list of keys",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "keys"
                ],
                "summary": "Get paginated keys",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new key pair with specified algorithm and parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "keys"
                ],
                "summary": "Create a new key",
                "parameters": [
                    {
                        "description": "Key creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.KeyResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/keys/all": {
            "get": {
                "description": "Get all keys with their certificates and metadata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "keys"
                ],
                "summary": "Get all keys",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.KeyResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/keys/filter": {
            "get": {
                "description": "Get keys filtered by algorithm type and/or curve type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "keys"
                ],
                "summary": "Filter keys by algorithm and curve",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Algorithm type (e.g., RSA, ECDSA)",
                        "name": "algorithm",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Curve type (e.g., P256, P384, P521)",
                        "name": "curve",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/keys/{id}": {
            "get": {
                "description": "Get detailed information about a specific key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "keys"
                ],
                "summary": "Get a specific key by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Key ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.KeyResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Key not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a specific key by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "keys"
                ],
                "summary": "Delete a key",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Key ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Key not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/keys/{keyID}/sign": {
            "post": {
                "description": "Sign a certificate for a key using a CA key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "keys"
                ],
                "summary": "Sign a certificate",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Key ID to sign",
                        "name": "keyID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Certificate signing request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.KeyResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Key not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/networks/besu": {
            "get": {
                "description": "Get a paginated list of Besu networks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "besu-networks"
                ],
                "summary": "List Besu networks",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of items to return (default: 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to skip (default: 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.ListBesuNetworksResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Besu network with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "besu-networks"
                ],
                "summary": "Create a new Besu network",
                "parameters": [
                    {
                        "description": "Network creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.CreateBesuNetworkRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/http.BesuNetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/besu/import": {
            "post": {
                "description": "Import an existing Besu network using its genesis file",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "besu-networks"
                ],
                "summary": "Import a Besu network",
                "parameters": [
                    {
                        "description": "Import network request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.ImportBesuNetworkRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.ImportNetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/besu/{id}": {
            "get": {
                "description": "Get details of a specific Besu network",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "besu-networks"
                ],
                "summary": "Get a Besu network by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.BesuNetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing Besu network and all its resources",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "besu-networks"
                ],
                "summary": "Delete a Besu network",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric": {
            "get": {
                "description": "Get a paginated list of Fabric networks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "fabric-networks"
                ],
                "summary": "List Fabric networks",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of items to return (default: 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to skip (default: 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.ListNetworksResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Hyperledger Fabric network with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "fabric-networks"
                ],
                "summary": "Create a new Fabric network",
                "parameters": [
                    {
                        "description": "Network creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.CreateFabricNetworkRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/http.NetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/by-name/{name}": {
            "get": {
                "description": "Get details of a specific Fabric network using its slug",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "fabric-networks"
                ],
                "summary": "Get a Fabric network by slug",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Network Slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/import": {
            "post": {
                "description": "Import an existing Fabric network using its genesis block",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "fabric-networks"
                ],
                "summary": "Import a Fabric network",
                "parameters": [
                    {
                        "description": "Import network request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.ImportFabricNetworkRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.ImportNetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/import-with-org": {
            "post": {
                "description": "Import an existing Fabric network using organization details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "fabric-networks"
                ],
                "summary": "Import a Fabric network with organization",
                "parameters": [
                    {
                        "description": "Import network with org request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.ImportFabricNetworkWithOrgRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.ImportNetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}": {
            "get": {
                "description": "Get details of a specific Fabric network",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "fabric-networks"
                ],
                "summary": "Get a Fabric network by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing Fabric network and all its resources",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "fabric-networks"
                ],
                "summary": "Delete a Fabric network",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/anchor-peers": {
            "post": {
                "description": "Set the anchor peers for an organization in a Fabric network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "fabric-networks"
                ],
                "summary": "Set anchor peers for an organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Anchor peers configuration",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.SetAnchorPeersRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.SetAnchorPeersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/channel-config": {
            "get": {
                "description": "Retrieve the channel configuration for a Fabric network",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "fabric-networks"
                ],
                "summary": "Get Fabric network channel configuration",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.ChannelConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/current-channel-config": {
            "get": {
                "description": "Retrieve the current channel configuration for a Fabric network",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "fabric-networks"
                ],
                "summary": "Get Fabric network current channel configuration",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.ChannelConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/nodes": {
            "get": {
                "description": "Get all nodes associated with a network",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "fabric-networks"
                ],
                "summary": "Get network nodes",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.GetNetworkNodesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a node (peer or orderer) to an existing network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "fabric-networks"
                ],
                "summary": "Add node to network",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Node addition request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.AddNodeToNetworkRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/orderers/{ordererId}": {
            "delete": {
                "description": "Remove an orderer node from an existing Fabric network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "fabric-networks"
                ],
                "summary": "Remove orderer from Fabric network",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Orderer ID",
                        "name": "ordererId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/orderers/{ordererId}/join": {
            "post": {
                "description": "Join an orderer node to an existing Fabric network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "fabric-networks"
                ],
                "summary": "Join orderer to Fabric network",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Orderer ID",
                        "name": "ordererId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/orderers/{ordererId}/unjoin": {
            "post": {
                "description": "Remove an orderer node from a channel but keep it in the network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "fabric-networks"
                ],
                "summary": "Unjoin orderer from Fabric network",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Orderer ID",
                        "name": "ordererId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/organizations/{orgId}/config": {
            "get": {
                "description": "Get the network configuration as YAML",
                "produces": [
                    "text/yaml"
                ],
                "tags": [
                    "fabric-networks"
                ],
                "summary": "Get network configuration",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Network configuration YAML",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/peers/{peerId}": {
            "delete": {
                "description": "Remove a peer node from an existing Fabric network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "fabric-networks"
                ],
                "summary": "Remove peer from Fabric network",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Peer ID",
                        "name": "peerId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/peers/{peerId}/join": {
            "post": {
                "description": "Join a peer node to an existing Fabric network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "fabric-networks"
                ],
                "summary": "Join peer to Fabric network",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Peer ID",
                        "name": "peerId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/peers/{peerId}/unjoin": {
            "post": {
                "description": "Remove a peer node from a channel but keep it in the network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "fabric-networks"
                ],
                "summary": "Unjoin peer from Fabric network",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Peer ID",
                        "name": "peerId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/reload-block": {
            "post": {
                "description": "Reloads the current config block for a network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "fabric-networks"
                ],
                "summary": "Reload network config block",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/nodes": {
            "get": {
                "description": "Get a paginated list of nodes with optional platform filter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "List all nodes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by blockchain platform",
                        "name": "platform",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.PaginatedNodesResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new node with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Create a new node",
                "parameters": [
                    {
                        "description": "Node creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.CreateNodeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/http.NodeResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/defaults/besu-node": {
            "get": {
                "description": "Get default configuration values for a Besu node",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Get default values for Besu node",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.BesuNodeDefaults"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/defaults/fabric": {
            "get": {
                "description": "Get default configuration values for multiple Fabric nodes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Get default values for multiple Fabric nodes",
                "parameters": [
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 1,
                        "description": "Number of peer nodes",
                        "name": "peerCount",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 1,
                        "description": "Number of orderer nodes",
                        "name": "ordererCount",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "service",
                            "docker"
                        ],
                        "type": "string",
                        "default": "service",
                        "description": "Deployment mode",
                        "name": "mode",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.NodesDefaultsResult"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/defaults/fabric-orderer": {
            "get": {
                "description": "Get default configuration values for a Fabric orderer node",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Get default values for Fabric orderer node",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.NodeDefaults"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/defaults/fabric-peer": {
            "get": {
                "description": "Get default configuration values for a Fabric peer node",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Get default values for Fabric peer node",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.NodeDefaults"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/platform/{platform}": {
            "get": {
                "description": "Get a paginated list of nodes filtered by blockchain platform",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "List nodes by platform",
                "parameters": [
                    {
                        "enum": [
                            "FABRIC",
                            "BESU"
                        ],
                        "type": "string",
                        "description": "Blockchain platform (FABRIC/BESU)",
                        "name": "platform",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.PaginatedNodesResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/{id}": {
            "get": {
                "description": "Get a node by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Get a node",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NodeResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Node not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a node by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Delete a node",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Node not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/{id}/channels": {
            "get": {
                "description": "Retrieves all channels for a specific Fabric node",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Get channels for a Fabric node",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NodeChannelsResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Node not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/{id}/events": {
            "get": {
                "description": "Get a paginated list of events for a specific node",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Get node events",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.PaginatedNodeEventsResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Node not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/{id}/logs": {
            "get": {
                "description": "Stream logs from a specific node",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Tail node logs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Follow logs",
                        "name": "follow",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 100,
                        "description": "Number of lines to show from the end",
                        "name": "tail",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Log stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Node not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/{id}/restart": {
            "post": {
                "description": "Restart a node by ID (stops and starts the node)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Restart a node",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NodeResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Node not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/{id}/start": {
            "post": {
                "description": "Start a node by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Start a node",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NodeResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Node not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/{id}/stop": {
            "post": {
                "description": "Stop a node by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Stop a node",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NodeResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Node not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/notifications/providers": {
            "get": {
                "description": "Get a list of all notification providers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "List notification providers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/http.ProviderResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new notification provider with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Create a notification provider",
                "parameters": [
                    {
                        "description": "Provider creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.CreateProviderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/http.ProviderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/notifications/providers/{id}": {
            "get": {
                "description": "Get detailed information about a specific notification provider",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Get a notification provider",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Provider ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.ProviderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing notification provider with new configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Update a notification provider",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Provider ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Provider update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.UpdateProviderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.ProviderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a notification provider",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Delete a notification provider",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Provider ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/notifications/providers/{id}/test": {
            "post": {
                "description": "Test a notification provider",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Test a notification provider",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Provider ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Test provider request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.TestProviderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.TestProviderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/organizations": {
            "get": {
                "description": "Get a list of all Fabric organizations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "List all Fabric organizations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handler.OrganizationResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Fabric organization with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Create a new Fabric organization",
                "parameters": [
                    {
                        "description": "Organization creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.CreateOrganizationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handler.OrganizationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/organizations/by-mspid/{mspid}": {
            "get": {
                "description": "Get a Fabric organization by MSP ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Get a Fabric organization by MSP ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MSP ID",
                        "name": "mspid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.OrganizationResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/organizations/{id}": {
            "get": {
                "description": "Get a Fabric organization by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Get a Fabric organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.OrganizationResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing Fabric organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Update a Fabric organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Organization update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.UpdateOrganizationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.OrganizationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a Fabric organization by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Delete a Fabric organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.LoginRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "auth.LoginResponse": {
            "description": "Login response",
            "type": "object",
            "properties": {
                "message": {
                    "description": "Success message\n@Example \"Login successful\"",
                    "type": "string"
                }
            }
        },
        "auth.LogoutResponse": {
            "description": "Logout response",
            "type": "object",
            "properties": {
                "message": {
                    "description": "Success message\n@Example \"Logout successful\"",
                    "type": "string"
                }
            }
        },
        "auth.UserResponse": {
            "description": "User information response",
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Time when the user was created\n@Example \"2024-01-01T00:00:00Z\"",
                    "type": "string"
                },
                "last_login_at": {
                    "description": "Last time the user logged in\n@Example \"2024-01-01T12:34:56Z\"",
                    "type": "string"
                },
                "username": {
                    "description": "Username of the user\n@Example \"admin\"",
                    "type": "string"
                }
            }
        },
        "crypto_x509.ExtKeyUsage": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13
            ],
            "x-enum-varnames": [
                "ExtKeyUsageAny",
                "ExtKeyUsageServerAuth",
                "ExtKeyUsageClientAuth",
                "ExtKeyUsageCodeSigning",
                "ExtKeyUsageEmailProtection",
                "ExtKeyUsageIPSECEndSystem",
                "ExtKeyUsageIPSECTunnel",
                "ExtKeyUsageIPSECUser",
                "ExtKeyUsageTimeStamping",
                "ExtKeyUsageOCSPSigning",
                "ExtKeyUsageMicrosoftServerGatedCrypto",
                "ExtKeyUsageNetscapeServerGatedCrypto",
                "ExtKeyUsageMicrosoftCommercialCodeSigning",
                "ExtKeyUsageMicrosoftKernelCodeSigning"
            ]
        },
        "crypto_x509.KeyUsage": {
            "type": "integer",
            "enum": [
                1,
                2,
                4,
                8,
                16,
                32,
                64,
                128,
                256
            ],
            "x-enum-varnames": [
                "KeyUsageDigitalSignature",
                "KeyUsageContentCommitment",
                "KeyUsageKeyEncipherment",
                "KeyUsageDataEncipherment",
                "KeyUsageKeyAgreement",
                "KeyUsageCertSign",
                "KeyUsageCRLSign",
                "KeyUsageEncipherOnly",
                "KeyUsageDecipherOnly"
            ]
        },
        "github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "handler.CreateOrganizationRequest": {
            "type": "object",
            "required": [
                "mspId",
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "mspId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "providerId": {
                    "type": "integer"
                }
            }
        },
        "handler.OrganizationResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "mspId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "integer"
                },
                "providerName": {
                    "type": "string"
                },
                "signCertificate": {
                    "type": "string"
                },
                "signPublicKey": {
                    "type": "string"
                },
                "tlsCertificate": {
                    "type": "string"
                },
                "tlsPublicKey": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "handler.UpdateOrganizationRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                }
            }
        },
        "http.AddConsenterPayload": {
            "type": "object",
            "required": [
                "client_tls_cert",
                "host",
                "port",
                "server_tls_cert"
            ],
            "properties": {
                "client_tls_cert": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 1
                },
                "server_tls_cert": {
                    "type": "string"
                }
            }
        },
        "http.AddNodeToNetworkRequest": {
            "type": "object",
            "required": [
                "nodeId",
                "role"
            ],
            "properties": {
                "nodeId": {
                    "type": "integer"
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "peer",
                        "orderer"
                    ]
                }
            }
        },
        "http.AddOrgPayload": {
            "type": "object",
            "required": [
                "msp_id",
                "root_certs",
                "tls_root_certs"
            ],
            "properties": {
                "msp_id": {
                    "type": "string"
                },
                "root_certs": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                },
                "tls_root_certs": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "http.AnchorPeer": {
            "type": "object",
            "required": [
                "host",
                "port"
            ],
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            }
        },
        "http.BackupResponse": {
            "type": "object",
            "properties": {
                "completedAt": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "errorMessage": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "metadata": {},
                "scheduleId": {
                    "type": "integer"
                },
                "sizeBytes": {
                    "type": "integer"
                },
                "startedAt": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "targetId": {
                    "type": "integer"
                }
            }
        },
        "http.BackupScheduleResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "cronExpression": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "lastRunAt": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nextRunAt": {
                    "type": "string"
                },
                "retentionDays": {
                    "type": "integer"
                },
                "targetId": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "http.BackupTargetResponse": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "type": "string"
                },
                "bucketName": {
                    "type": "string"
                },
                "bucketPath": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                },
                "forcePathStyle": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "http.BesuNetworkResponse": {
            "type": "object",
            "properties": {
                "chainId": {
                    "type": "integer"
                },
                "config": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "genesisConfig": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "platform": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "http.ChannelConfigResponse": {
            "type": "object",
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": true
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "http.ChannelResponse": {
            "type": "object",
            "properties": {
                "blockNum": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "http.ConsenterConfig": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "http.CreateBackupRequest": {
            "type": "object",
            "required": [
                "targetId"
            ],
            "properties": {
                "metadata": {},
                "scheduleId": {
                    "type": "integer"
                },
                "targetId": {
                    "type": "integer"
                }
            }
        },
        "http.CreateBackupScheduleRequest": {
            "description": "Request body for creating a new backup schedule",
            "type": "object",
            "required": [
                "cronExpression",
                "name",
                "retentionDays",
                "targetId"
            ],
            "properties": {
                "cronExpression": {
                    "description": "Cron expression for schedule\n@Example \"0 0 * * *\"",
                    "type": "string"
                },
                "description": {
                    "description": "Optional description\n@Example \"Daily backup at midnight\"",
                    "type": "string"
                },
                "enabled": {
                    "description": "Whether the schedule is enabled\n@Example true",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of the backup schedule\n@Example \"daily-backup\"",
                    "type": "string"
                },
                "retentionDays": {
                    "description": "Number of days to retain backups\n@Example 30",
                    "type": "integer",
                    "minimum": 1
                },
                "targetId": {
                    "description": "ID of the backup target to use\n@Example 1",
                    "type": "integer"
                }
            }
        },
        "http.CreateBackupTargetRequest": {
            "description": "Request body for creating a new backup target",
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "accessKeyId": {
                    "description": "AWS access key ID (required for S3 type)\n@Example \"AKIAXXXXXXXXXXXXXXXX\"",
                    "type": "string"
                },
                "bucketName": {
                    "description": "S3 bucket name (required for S3 type)\n@Example \"my-backup-bucket\"",
                    "type": "string"
                },
                "bucketPath": {
                    "description": "Path within the bucket (required for S3 type)\n@Example \"backups/app1\"",
                    "type": "string"
                },
                "endpoint": {
                    "description": "Custom S3 endpoint (optional)\n@Example \"https://s3.custom-domain.com\"",
                    "type": "string"
                },
                "forcePathStyle": {
                    "description": "Use path-style S3 URLs\n@Example false",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of the backup target\n@Example \"daily-backup-s3\"",
                    "type": "string"
                },
                "region": {
                    "description": "AWS region (required for S3 type)\n@Example \"us-east-1\"",
                    "type": "string"
                },
                "secretKey": {
                    "description": "AWS secret key (required for S3 type)",
                    "type": "string"
                },
                "type": {
                    "description": "Type of backup target (S3 or LOCAL)\n@Example \"S3\"",
                    "type": "string",
                    "enum": [
                        "S3",
                        "LOCAL"
                    ]
                }
            }
        },
        "http.CreateBesuNetworkRequest": {
            "description": "Request body for creating a new Besu network",
            "type": "object",
            "required": [
                "config",
                "name"
            ],
            "properties": {
                "config": {
                    "description": "@Description Network configuration",
                    "type": "object",
                    "required": [
                        "blockPeriod",
                        "chainId",
                        "consensus",
                        "epochLength",
                        "initialValidatorsKeyIds",
                        "requestTimeout"
                    ],
                    "properties": {
                        "blockPeriod": {
                            "description": "@Description Block period in seconds\n@Default 5\n@Required",
                            "type": "integer",
                            "example": 5
                        },
                        "chainId": {
                            "description": "@Description Chain ID for the network\n@Default 1337\n@Required",
                            "type": "integer",
                            "example": 1337
                        },
                        "coinbase": {
                            "description": "@Description Optional coinbase address",
                            "type": "string"
                        },
                        "consensus": {
                            "description": "@Description Consensus algorithm (e.g. \"qbft\")\n@Required",
                            "type": "string"
                        },
                        "difficulty": {
                            "description": "@Description Optional difficulty value",
                            "type": "string"
                        },
                        "epochLength": {
                            "description": "@Description Epoch length in blocks\n@Default 30000\n@Required",
                            "type": "integer",
                            "example": 30000
                        },
                        "gasLimit": {
                            "description": "@Description Optional gas limit value",
                            "type": "string"
                        },
                        "initialValidatorsKeyIds": {
                            "description": "@Description List of initial validator key IDs\n@Required\n@MinItems 1",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                                "type": "integer"
                            }
                        },
                        "mixHash": {
                            "description": "@Description Optional mix hash value",
                            "type": "string"
                        },
                        "nonce": {
                            "description": "@Description Optional nonce value",
                            "type": "string"
                        },
                        "requestTimeout": {
                            "description": "@Description Request timeout in seconds\n@Required",
                            "type": "integer"
                        },
                        "timestamp": {
                            "description": "@Description Optional timestamp value",
                            "type": "string"
                        }
                    }
                },
                "description": {
                    "description": "@Description Optional description of the network",
                    "type": "string"
                },
                "name": {
                    "description": "@Description Name of the network",
                    "type": "string"
                }
            }
        },
        "http.CreateFabricNetworkRequest": {
            "type": "object",
            "required": [
                "config",
                "name"
            ],
            "properties": {
                "config": {
                    "$ref": "#/definitions/http.FabricNetworkConfig"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "http.CreateNodeRequest": {
            "description": "Request payload for creating a new node",
            "type": "object",
            "required": [
                "blockchainPlatform",
                "name"
            ],
            "properties": {
                "besuNode": {
                    "description": "@Description Besu node configuration, required when creating a Besu node",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.BesuNodeConfig"
                        }
                    ]
                },
                "blockchainPlatform": {
                    "description": "@Description Blockchain platform (fabric or besu)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.BlockchainPlatform"
                        }
                    ],
                    "example": "fabric"
                },
                "fabricOrderer": {
                    "description": "@Description Fabric orderer configuration, required when creating a Fabric orderer node",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.FabricOrdererConfig"
                        }
                    ]
                },
                "fabricPeer": {
                    "description": "@Description Fabric peer configuration, required when creating a Fabric peer node",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.FabricPeerConfig"
                        }
                    ]
                },
                "name": {
                    "description": "@Description Name of the node",
                    "type": "string",
                    "example": "peer0-org1"
                }
            }
        },
        "http.CreateProviderRequest": {
            "type": "object",
            "required": [
                "config",
                "name",
                "type"
            ],
            "properties": {
                "config": {},
                "isDefault": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "notifyBackupFailure": {
                    "type": "boolean"
                },
                "notifyBackupSuccess": {
                    "type": "boolean"
                },
                "notifyNodeDowntime": {
                    "type": "boolean"
                },
                "notifyS3ConnIssue": {
                    "type": "boolean"
                },
                "type": {
                    "enum": [
                        "SMTP"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/notifications.ProviderType"
                        }
                    ]
                }
            }
        },
        "http.ExternalOrgConfig": {
            "type": "object",
            "required": [
                "id",
                "mspid"
            ],
            "properties": {
                "consenters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.ConsenterConfig"
                    }
                },
                "id": {
                    "type": "string"
                },
                "mspid": {
                    "type": "string"
                }
            }
        },
        "http.FabricNetworkConfig": {
            "type": "object",
            "properties": {
                "externalOrdererOrgs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.ExternalOrgConfig"
                    }
                },
                "externalPeerOrgs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.ExternalOrgConfig"
                    }
                },
                "ordererOrganizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.OrganizationConfig"
                    }
                },
                "peerOrganizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.OrganizationConfig"
                    }
                }
            }
        },
        "http.GetNetworkNodesResponse": {
            "type": "object",
            "properties": {
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.NetworkNode"
                    }
                }
            }
        },
        "http.ImportBesuNetworkRequest": {
            "type": "object",
            "required": [
                "chainId",
                "genesisFile",
                "name"
            ],
            "properties": {
                "chainId": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "genesisFile": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "http.ImportFabricNetworkRequest": {
            "type": "object",
            "required": [
                "genesisFile"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "genesisFile": {
                    "type": "string"
                }
            }
        },
        "http.ImportFabricNetworkWithOrgRequest": {
            "type": "object",
            "required": [
                "channelId",
                "ordererTlsCert",
                "ordererUrl",
                "organizationId"
            ],
            "properties": {
                "channelId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "ordererTlsCert": {
                    "type": "string"
                },
                "ordererUrl": {
                    "type": "string"
                },
                "organizationId": {
                    "type": "integer"
                }
            }
        },
        "http.ImportNetworkResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "networkId": {
                    "type": "string"
                }
            }
        },
        "http.ListBesuNetworksResponse": {
            "type": "object",
            "properties": {
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.BesuNetworkResponse"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "http.ListNetworksResponse": {
            "type": "object",
            "properties": {
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.NetworkResponse"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "http.NetworkResponse": {
            "type": "object",
            "properties": {
                "config": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "integer"
                },
                "currentConfigBlock": {
                    "type": "string"
                },
                "deploymentConfig": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "description": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "exposedPorts": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "genesisBlock": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "platform": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "http.NodeChannelsResponse": {
            "type": "object",
            "properties": {
                "channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.ChannelResponse"
                    }
                },
                "nodeId": {
                    "type": "integer"
                }
            }
        },
        "http.NodeEventResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "data": {},
                "id": {
                    "type": "integer"
                },
                "node_id": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "http.NodeResponse": {
            "type": "object",
            "properties": {
                "besuNode": {
                    "$ref": "#/definitions/service.BesuNodeProperties"
                },
                "createdAt": {
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                },
                "fabricOrderer": {
                    "$ref": "#/definitions/service.FabricOrdererProperties"
                },
                "fabricPeer": {
                    "$ref": "#/definitions/service.FabricPeerProperties"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "nodeType": {
                    "type": "string"
                },
                "platform": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "http.OrganizationConfig": {
            "type": "object",
            "required": [
                "id",
                "nodeIds"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "nodeIds": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "http.PaginatedNodeEventsResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.NodeEventResponse"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "http.PaginatedNodesResponse": {
            "type": "object",
            "properties": {
                "hasNextPage": {
                    "type": "boolean"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.NodeResponse"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "pageCount": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "http.ProviderResponse": {
            "type": "object",
            "properties": {
                "config": {},
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "lastTestAt": {
                    "type": "string"
                },
                "lastTestMessage": {
                    "type": "string"
                },
                "lastTestStatus": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notifyBackupFailure": {
                    "type": "boolean"
                },
                "notifyBackupSuccess": {
                    "type": "boolean"
                },
                "notifyNodeDowntime": {
                    "type": "boolean"
                },
                "notifyS3ConnIssue": {
                    "type": "boolean"
                },
                "type": {
                    "$ref": "#/definitions/notifications.ProviderType"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "http.RemoveConsenterPayload": {
            "type": "object",
            "required": [
                "host",
                "port"
            ],
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 1
                }
            }
        },
        "http.RemoveOrgPayload": {
            "type": "object",
            "required": [
                "msp_id"
            ],
            "properties": {
                "msp_id": {
                    "type": "string"
                }
            }
        },
        "http.SetAnchorPeersPayload": {
            "type": "object",
            "required": [
                "anchor_peers",
                "msp_id"
            ],
            "properties": {
                "anchor_peers": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "object",
                        "required": [
                            "host",
                            "port"
                        ],
                        "properties": {
                            "host": {
                                "type": "string"
                            },
                            "port": {
                                "type": "integer",
                                "maximum": 65535,
                                "minimum": 1
                            }
                        }
                    }
                },
                "msp_id": {
                    "type": "string"
                }
            }
        },
        "http.SetAnchorPeersRequest": {
            "type": "object",
            "required": [
                "anchorPeers",
                "organizationId"
            ],
            "properties": {
                "anchorPeers": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/http.AnchorPeer"
                    }
                },
                "organizationId": {
                    "type": "integer"
                }
            }
        },
        "http.SetAnchorPeersResponse": {
            "type": "object",
            "properties": {
                "transactionId": {
                    "type": "string"
                }
            }
        },
        "http.TestProviderRequest": {
            "type": "object",
            "required": [
                "testEmail"
            ],
            "properties": {
                "testEmail": {
                    "type": "string"
                }
            }
        },
        "http.TestProviderResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "testedAt": {
                    "type": "string"
                }
            }
        },
        "http.UpdateBackupScheduleRequest": {
            "type": "object",
            "required": [
                "cronExpression",
                "name",
                "retentionDays",
                "targetId"
            ],
            "properties": {
                "cronExpression": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "retentionDays": {
                    "type": "integer",
                    "minimum": 1
                },
                "targetId": {
                    "type": "integer"
                }
            }
        },
        "http.UpdateBackupTargetRequest": {
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "accessKeyId": {
                    "type": "string"
                },
                "bucketName": {
                    "type": "string"
                },
                "bucketPath": {
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                },
                "forcePathStyle": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "secretKey": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "S3",
                        "LOCAL"
                    ]
                }
            }
        },
        "http.UpdateBatchSizePayload": {
            "type": "object",
            "required": [
                "absolute_max_bytes",
                "max_message_count",
                "preferred_max_bytes"
            ],
            "properties": {
                "absolute_max_bytes": {
                    "type": "integer",
                    "minimum": 1
                },
                "max_message_count": {
                    "type": "integer",
                    "minimum": 1
                },
                "preferred_max_bytes": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "http.UpdateBatchTimeoutPayload": {
            "type": "object",
            "required": [
                "timeout"
            ],
            "properties": {
                "timeout": {
                    "description": "e.g., \"2s\"",
                    "type": "string"
                }
            }
        },
        "http.UpdateConsenterPayload": {
            "type": "object",
            "required": [
                "client_tls_cert",
                "host",
                "new_host",
                "new_port",
                "port",
                "server_tls_cert"
            ],
            "properties": {
                "client_tls_cert": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "new_host": {
                    "type": "string"
                },
                "new_port": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 1
                },
                "port": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 1
                },
                "server_tls_cert": {
                    "type": "string"
                }
            }
        },
        "http.UpdateEtcdRaftOptionsPayload": {
            "type": "object",
            "required": [
                "election_tick",
                "heartbeat_tick",
                "max_inflight_blocks",
                "snapshot_interval_size",
                "tick_interval"
            ],
            "properties": {
                "election_tick": {
                    "type": "integer",
                    "minimum": 1
                },
                "heartbeat_tick": {
                    "type": "integer",
                    "minimum": 1
                },
                "max_inflight_blocks": {
                    "type": "integer",
                    "minimum": 1
                },
                "snapshot_interval_size": {
                    "type": "integer",
                    "minimum": 1
                },
                "tick_interval": {
                    "type": "string"
                }
            }
        },
        "http.UpdateOrgMSPPayload": {
            "type": "object",
            "required": [
                "msp_id",
                "root_certs",
                "tls_root_certs"
            ],
            "properties": {
                "msp_id": {
                    "type": "string"
                },
                "root_certs": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                },
                "tls_root_certs": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "http.UpdateProviderRequest": {
            "type": "object",
            "required": [
                "config",
                "name",
                "type"
            ],
            "properties": {
                "config": {},
                "isDefault": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "notifyBackupFailure": {
                    "type": "boolean"
                },
                "notifyBackupSuccess": {
                    "type": "boolean"
                },
                "notifyNodeDowntime": {
                    "type": "boolean"
                },
                "notifyS3ConnIssue": {
                    "type": "boolean"
                },
                "type": {
                    "enum": [
                        "SMTP"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/notifications.ProviderType"
                        }
                    ]
                }
            }
        },
        "models.CertificateRequest": {
            "type": "object",
            "required": [
                "commonName",
                "validFor"
            ],
            "properties": {
                "commonName": {
                    "type": "string"
                },
                "country": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dnsNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "emailAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extKeyUsage": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/crypto_x509.ExtKeyUsage"
                    }
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "isCA": {
                    "type": "boolean"
                },
                "keyUsage": {
                    "$ref": "#/definitions/crypto_x509.KeyUsage"
                },
                "locality": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "organization": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "organizationalUnit": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "postalCode": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "province": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "streetAddress": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "uris": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/url.URL"
                    }
                },
                "validFor": {
                    "$ref": "#/definitions/models.Duration"
                }
            }
        },
        "models.CreateKeyRequest": {
            "description": "Supported key algorithms",
            "type": "object",
            "required": [
                "algorithm",
                "name"
            ],
            "properties": {
                "algorithm": {
                    "description": "Key algorithm (RSA, EC, ED25519)\n@Required",
                    "enum": [
                        "RSA",
                        "EC",
                        "ED25519"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.KeyAlgorithm"
                        }
                    ],
                    "example": "RSA"
                },
                "certificate": {
                    "description": "Optional: configure CA certificate properties",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.CertificateRequest"
                        }
                    ]
                },
                "curve": {
                    "description": "Elliptic curve name (for EC keys)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ECCurve"
                        }
                    ],
                    "example": "P-256"
                },
                "description": {
                    "description": "Optional description",
                    "type": "string",
                    "example": "Key for signing certificates"
                },
                "isCA": {
                    "description": "Whether this key is a CA",
                    "type": "integer",
                    "example": 0
                },
                "keySize": {
                    "description": "Key size in bits (for RSA)",
                    "type": "integer",
                    "maximum": 8192,
                    "minimum": 2048,
                    "example": 2048
                },
                "name": {
                    "description": "Name of the key\n@Required",
                    "type": "string",
                    "example": "my-key"
                },
                "providerId": {
                    "description": "Optional provider ID",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "models.CreateProviderRequest": {
            "type": "object",
            "required": [
                "isDefault",
                "name",
                "type"
            ],
            "properties": {
                "config": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "isDefault": {
                    "type": "integer",
                    "enum": [
                        0,
                        1
                    ]
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "DATABASE",
                        "VAULT",
                        "HSM"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.KeyProviderType"
                        }
                    ]
                }
            }
        },
        "models.Duration": {
            "type": "integer",
            "enum": [
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000
            ],
            "x-enum-varnames": [
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour"
            ]
        },
        "models.ECCurve": {
            "type": "string",
            "enum": [
                "P-256",
                "P-384",
                "P-521",
                "secp256k1"
            ],
            "x-enum-varnames": [
                "ECCurveP256",
                "ECCurveP384",
                "ECCurveP521",
                "ECCurveSECP256K1"
            ]
        },
        "models.KeyAlgorithm": {
            "type": "string",
            "enum": [
                "RSA",
                "EC",
                "ED25519"
            ],
            "x-enum-varnames": [
                "KeyAlgorithmRSA",
                "KeyAlgorithmEC",
                "KeyAlgorithmED25519"
            ]
        },
        "models.KeyProviderInfo": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.KeyProviderType": {
            "type": "string",
            "enum": [
                "DATABASE",
                "VAULT",
                "HSM"
            ],
            "x-enum-varnames": [
                "KeyProviderTypeDatabase",
                "KeyProviderTypeVault",
                "KeyProviderTypeHSM"
            ]
        },
        "models.KeyResponse": {
            "type": "object",
            "properties": {
                "algorithm": {
                    "$ref": "#/definitions/models.KeyAlgorithm"
                },
                "certificate": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "curve": {
                    "$ref": "#/definitions/models.ECCurve"
                },
                "description": {
                    "type": "string"
                },
                "ethereumAddress": {
                    "type": "string"
                },
                "expiresAt": {
                    "type": "string"
                },
                "format": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "keySize": {
                    "type": "integer"
                },
                "lastRotatedAt": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "privateKey": {
                    "type": "string"
                },
                "provider": {
                    "$ref": "#/definitions/models.KeyProviderInfo"
                },
                "publicKey": {
                    "type": "string"
                },
                "sha1Fingerprint": {
                    "type": "string"
                },
                "sha256Fingerprint": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.PaginatedResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.KeyResponse"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "totalItems": {
                    "type": "integer"
                }
            }
        },
        "models.ProviderResponse": {
            "type": "object",
            "properties": {
                "config": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "isDefault": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/models.KeyProviderType"
                }
            }
        },
        "notifications.ProviderType": {
            "type": "string",
            "enum": [
                "SMTP"
            ],
            "x-enum-varnames": [
                "ProviderTypeSMTP"
            ]
        },
        "response.ErrorResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "object",
                    "additionalProperties": true
                },
                "message": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "response.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "$ref": "#/definitions/response.ErrorResponse"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "service.BesuNodeDefaults": {
            "type": "object",
            "properties": {
                "externalIP": {
                    "type": "string"
                },
                "internalIP": {
                    "type": "string"
                },
                "mode": {
                    "$ref": "#/definitions/service.Mode"
                },
                "networkId": {
                    "type": "integer"
                },
                "p2pAddress": {
                    "type": "string"
                },
                "rpcAddress": {
                    "type": "string"
                }
            }
        },
        "service.BesuNodeProperties": {
            "type": "object",
            "properties": {
                "enodeUrl": {
                    "type": "string"
                },
                "externalIp": {
                    "type": "string"
                },
                "internalIp": {
                    "type": "string"
                },
                "keyId": {
                    "type": "integer"
                },
                "mode": {
                    "type": "string"
                },
                "networkId": {
                    "type": "integer"
                },
                "p2pHost": {
                    "description": "Add deployment config fields",
                    "type": "string"
                },
                "p2pPort": {
                    "type": "integer"
                },
                "rpcHost": {
                    "type": "string"
                },
                "rpcPort": {
                    "type": "integer"
                }
            }
        },
        "service.FabricOrdererProperties": {
            "type": "object",
            "properties": {
                "adminAddress": {
                    "type": "string"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "externalEndpoint": {
                    "type": "string"
                },
                "listenAddress": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "mspId": {
                    "type": "string"
                },
                "operationsAddress": {
                    "type": "string"
                },
                "organizationId": {
                    "type": "integer"
                },
                "signCaCert": {
                    "type": "string"
                },
                "signCert": {
                    "description": "Add certificate information",
                    "type": "string"
                },
                "signKeyId": {
                    "description": "Add deployment config fields",
                    "type": "integer"
                },
                "tlsCaCert": {
                    "type": "string"
                },
                "tlsCert": {
                    "type": "string"
                },
                "tlsKeyId": {
                    "type": "integer"
                }
            }
        },
        "service.FabricPeerProperties": {
            "type": "object",
            "properties": {
                "chaincodeAddress": {
                    "type": "string"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "eventsAddress": {
                    "type": "string"
                },
                "externalEndpoint": {
                    "type": "string"
                },
                "listenAddress": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "mspId": {
                    "type": "string"
                },
                "operationsAddress": {
                    "type": "string"
                },
                "organizationId": {
                    "type": "integer"
                },
                "signCaCert": {
                    "type": "string"
                },
                "signCert": {
                    "description": "Add certificate information",
                    "type": "string"
                },
                "signKeyId": {
                    "description": "Add deployment config fields",
                    "type": "integer"
                },
                "tlsCaCert": {
                    "type": "string"
                },
                "tlsCert": {
                    "type": "string"
                },
                "tlsKeyId": {
                    "type": "integer"
                }
            }
        },
        "service.Mode": {
            "type": "string",
            "enum": [
                "service",
                "docker"
            ],
            "x-enum-varnames": [
                "ModeService",
                "ModeDocker"
            ]
        },
        "service.NetworkNode": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "networkId": {
                    "type": "integer"
                },
                "node": {
                    "$ref": "#/definitions/service.Node"
                },
                "nodeId": {
                    "type": "integer"
                },
                "role": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "service.Node": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deploymentConfig": {
                    "description": "Node deployment configuration interface that can be one of: FabricPeerDeploymentConfig, FabricOrdererDeploymentConfig, or BesuNodeDeploymentConfig"
                },
                "endpoint": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "mspId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nodeConfig": {
                    "description": "Base interface for all node configurations"
                },
                "nodeType": {
                    "$ref": "#/definitions/types.NodeType"
                },
                "platform": {
                    "$ref": "#/definitions/types.BlockchainPlatform"
                },
                "publicEndpoint": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.NodeStatus"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "service.NodeDefaults": {
            "type": "object",
            "properties": {
                "adminAddress": {
                    "type": "string"
                },
                "chaincodeAddress": {
                    "type": "string"
                },
                "containerName": {
                    "type": "string"
                },
                "errorLogPath": {
                    "type": "string"
                },
                "eventsAddress": {
                    "type": "string"
                },
                "externalEndpoint": {
                    "type": "string"
                },
                "listenAddress": {
                    "type": "string"
                },
                "logPath": {
                    "type": "string"
                },
                "mode": {
                    "$ref": "#/definitions/service.Mode"
                },
                "operationsListenAddress": {
                    "type": "string"
                },
                "serviceName": {
                    "type": "string"
                }
            }
        },
        "service.NodesDefaultsResult": {
            "type": "object",
            "properties": {
                "availableAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "orderers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.NodeDefaults"
                    }
                },
                "peers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.NodeDefaults"
                    }
                }
            }
        },
        "types.BesuNodeConfig": {
            "type": "object",
            "required": [
                "externalIp",
                "internalIp",
                "keyId",
                "networkId",
                "p2pHost",
                "p2pPort",
                "rpcHost",
                "rpcPort"
            ],
            "properties": {
                "bootNodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "externalIp": {
                    "type": "string"
                },
                "internalIp": {
                    "type": "string"
                },
                "keyId": {
                    "type": "integer"
                },
                "mode": {
                    "description": "@Description The deployment mode (service or docker)",
                    "type": "string",
                    "example": "service"
                },
                "networkId": {
                    "type": "integer"
                },
                "p2pHost": {
                    "type": "string"
                },
                "p2pPort": {
                    "type": "integer"
                },
                "rpcHost": {
                    "type": "string"
                },
                "rpcPort": {
                    "type": "integer"
                },
                "type": {
                    "description": "@Description The type of node (fabric-peer, fabric-orderer, besu)",
                    "type": "string",
                    "example": "fabric-peer"
                }
            }
        },
        "types.BlockchainPlatform": {
            "type": "string",
            "enum": [
                "FABRIC",
                "BESU"
            ],
            "x-enum-varnames": [
                "PlatformFabric",
                "PlatformBesu"
            ]
        },
        "types.FabricOrdererConfig": {
            "type": "object",
            "required": [
                "mspId",
                "name",
                "organizationId"
            ],
            "properties": {
                "adminAddress": {
                    "type": "string"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "externalEndpoint": {
                    "type": "string"
                },
                "listenAddress": {
                    "type": "string"
                },
                "mode": {
                    "description": "@Description The deployment mode (service or docker)",
                    "type": "string",
                    "example": "service"
                },
                "mspId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "operationsListenAddress": {
                    "type": "string"
                },
                "organizationId": {
                    "type": "integer"
                },
                "type": {
                    "description": "@Description The type of node (fabric-peer, fabric-orderer, besu)",
                    "type": "string",
                    "example": "fabric-peer"
                },
                "version": {
                    "description": "Fabric version to use",
                    "type": "string"
                }
            }
        },
        "types.FabricPeerConfig": {
            "description": "Configuration for creating a new Fabric peer node",
            "type": "object",
            "required": [
                "mspId",
                "name",
                "organizationId"
            ],
            "properties": {
                "chaincodeAddress": {
                    "description": "@Description Chaincode listen address",
                    "type": "string",
                    "example": "0.0.0.0:7052"
                },
                "domainNames": {
                    "description": "@Description Domain names for the peer",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "env": {
                    "description": "@Description Environment variables for the peer",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "eventsAddress": {
                    "description": "@Description Events listen address",
                    "type": "string",
                    "example": "0.0.0.0:7053"
                },
                "externalEndpoint": {
                    "description": "@Description External endpoint for the peer",
                    "type": "string",
                    "example": "peer0.org1.example.com:7051"
                },
                "listenAddress": {
                    "description": "@Description Listen address for the peer",
                    "type": "string",
                    "example": "0.0.0.0:7051"
                },
                "mode": {
                    "description": "@Description The deployment mode (service or docker)",
                    "type": "string",
                    "example": "service"
                },
                "mspId": {
                    "description": "@Description MSP ID for the organization",
                    "type": "string",
                    "example": "Org1MSP"
                },
                "name": {
                    "description": "@Description Name of the peer node",
                    "type": "string",
                    "example": "peer0-org1"
                },
                "operationsListenAddress": {
                    "description": "@Description Operations listen address",
                    "type": "string",
                    "example": "0.0.0.0:9443"
                },
                "organizationId": {
                    "description": "@Description Organization ID that owns this peer",
                    "type": "integer",
                    "example": 1
                },
                "type": {
                    "description": "@Description The type of node (fabric-peer, fabric-orderer, besu)",
                    "type": "string",
                    "example": "fabric-peer"
                },
                "version": {
                    "description": "@Description Fabric version to use",
                    "type": "string",
                    "example": "2.2.0"
                }
            }
        },
        "types.NodeStatus": {
            "type": "string",
            "enum": [
                "PENDING",
                "RUNNING",
                "STOPPED",
                "STOPPING",
                "STARTING",
                "ERROR"
            ],
            "x-enum-varnames": [
                "NodeStatusPending",
                "NodeStatusRunning",
                "NodeStatusStopped",
                "NodeStatusStopping",
                "NodeStatusStarting",
                "NodeStatusError"
            ]
        },
        "types.NodeType": {
            "type": "string",
            "enum": [
                "FABRIC_PEER",
                "FABRIC_ORDERER",
                "BESU_FULLNODE"
            ],
            "x-enum-varnames": [
                "NodeTypeFabricPeer",
                "NodeTypeFabricOrderer",
                "NodeTypeBesuFullnode"
            ]
        },
        "url.URL": {
            "type": "object",
            "properties": {
                "forceQuery": {
                    "description": "append a query ('?') even if RawQuery is empty",
                    "type": "boolean"
                },
                "fragment": {
                    "description": "fragment for references, without '#'",
                    "type": "string"
                },
                "host": {
                    "description": "host or host:port (see Hostname and Port methods)",
                    "type": "string"
                },
                "omitHost": {
                    "description": "do not emit empty host (authority)",
                    "type": "boolean"
                },
                "opaque": {
                    "description": "encoded opaque data",
                    "type": "string"
                },
                "path": {
                    "description": "path (relative paths may omit leading slash)",
                    "type": "string"
                },
                "rawFragment": {
                    "description": "encoded fragment hint (see EscapedFragment method)",
                    "type": "string"
                },
                "rawPath": {
                    "description": "encoded path hint (see EscapedPath method)",
                    "type": "string"
                },
                "rawQuery": {
                    "description": "encoded query values, without '?'",
                    "type": "string"
                },
                "scheme": {
                    "type": "string"
                },
                "user": {
                    "description": "username and password information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/url.Userinfo"
                        }
                    ]
                }
            }
        },
        "url.Userinfo": {
            "type": "object"
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        },
        "CookieAuth": {
            "type": "apiKey",
            "name": "session_id",
            "in": "cookie"
        }
    },
    "tags": [
        {
            "description": "Cryptographic key management operations",
            "name": "Keys"
        },
        {
            "description": "Key provider management operations",
            "name": "Providers"
        },
        {
            "description": "Blockchain network management operations",
            "name": "Networks"
        },
        {
            "description": "Network node management operations",
            "name": "Nodes"
        }
    ]
}