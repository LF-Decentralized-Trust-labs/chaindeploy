// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import { queryOptions, type UseMutationOptions, type DefaultError, infiniteQueryOptions, type InfiniteData } from '@tanstack/react-query';
import type { PostAuthLoginData, PostAuthLoginError, PostAuthLoginResponse, PostAuthLogoutData, PostAuthLogoutError, PostAuthLogoutResponse, GetAuthMeData, GetBackupsData, PostBackupsData, PostBackupsError, PostBackupsResponse, GetBackupsSchedulesData, PostBackupsSchedulesData, PostBackupsSchedulesError, PostBackupsSchedulesResponse, DeleteBackupsSchedulesByIdData, DeleteBackupsSchedulesByIdError, GetBackupsSchedulesByIdData, PutBackupsSchedulesByIdData, PutBackupsSchedulesByIdError, PutBackupsSchedulesByIdResponse, PutBackupsSchedulesByIdDisableData, PutBackupsSchedulesByIdDisableError, PutBackupsSchedulesByIdDisableResponse, PutBackupsSchedulesByIdEnableData, PutBackupsSchedulesByIdEnableError, PutBackupsSchedulesByIdEnableResponse, GetBackupsTargetsData, PostBackupsTargetsData, PostBackupsTargetsError, PostBackupsTargetsResponse, DeleteBackupsTargetsByIdData, DeleteBackupsTargetsByIdError, GetBackupsTargetsByIdData, PutBackupsTargetsByIdData, PutBackupsTargetsByIdError, PutBackupsTargetsByIdResponse, DeleteBackupsByIdData, DeleteBackupsByIdError, GetBackupsByIdData, PostDummyData, PostDummyResponse, GetKeyProvidersData, PostKeyProvidersData, PostKeyProvidersError, PostKeyProvidersResponse, DeleteKeyProvidersByIdData, DeleteKeyProvidersByIdError, GetKeyProvidersByIdData, GetKeysData, GetKeysError, GetKeysResponse, PostKeysData, PostKeysError, PostKeysResponse, GetKeysAllData, GetKeysFilterData, GetKeysFilterError, GetKeysFilterResponse, DeleteKeysByIdData, DeleteKeysByIdError, GetKeysByIdData, PostKeysByKeyIdSignData, PostKeysByKeyIdSignError, PostKeysByKeyIdSignResponse, GetNetworksBesuData, GetNetworksBesuError, GetNetworksBesuResponse, PostNetworksBesuData, PostNetworksBesuError, PostNetworksBesuResponse, PostNetworksBesuImportData, PostNetworksBesuImportError, PostNetworksBesuImportResponse, DeleteNetworksBesuByIdData, DeleteNetworksBesuByIdError, GetNetworksBesuByIdData, GetNetworksFabricData, GetNetworksFabricError, GetNetworksFabricResponse, PostNetworksFabricData, PostNetworksFabricError, PostNetworksFabricResponse, GetNetworksFabricByNameByNameData, PostNetworksFabricImportData, PostNetworksFabricImportError, PostNetworksFabricImportResponse, PostNetworksFabricImportWithOrgData, PostNetworksFabricImportWithOrgError, PostNetworksFabricImportWithOrgResponse, DeleteNetworksFabricByIdData, DeleteNetworksFabricByIdError, GetNetworksFabricByIdData, PostNetworksFabricByIdAnchorPeersData, PostNetworksFabricByIdAnchorPeersError, PostNetworksFabricByIdAnchorPeersResponse, GetNetworksFabricByIdChannelConfigData, GetNetworksFabricByIdCurrentChannelConfigData, GetNetworksFabricByIdNodesData, PostNetworksFabricByIdNodesData, PostNetworksFabricByIdNodesError, PostNetworksFabricByIdNodesResponse, DeleteNetworksFabricByIdOrderersByOrdererIdData, DeleteNetworksFabricByIdOrderersByOrdererIdError, DeleteNetworksFabricByIdOrderersByOrdererIdResponse, PostNetworksFabricByIdOrderersByOrdererIdJoinData, PostNetworksFabricByIdOrderersByOrdererIdJoinError, PostNetworksFabricByIdOrderersByOrdererIdJoinResponse, PostNetworksFabricByIdOrderersByOrdererIdUnjoinData, PostNetworksFabricByIdOrderersByOrdererIdUnjoinError, PostNetworksFabricByIdOrderersByOrdererIdUnjoinResponse, GetNetworksFabricByIdOrganizationsByOrgIdConfigData, DeleteNetworksFabricByIdPeersByPeerIdData, DeleteNetworksFabricByIdPeersByPeerIdError, DeleteNetworksFabricByIdPeersByPeerIdResponse, PostNetworksFabricByIdPeersByPeerIdJoinData, PostNetworksFabricByIdPeersByPeerIdJoinError, PostNetworksFabricByIdPeersByPeerIdJoinResponse, PostNetworksFabricByIdPeersByPeerIdUnjoinData, PostNetworksFabricByIdPeersByPeerIdUnjoinError, PostNetworksFabricByIdPeersByPeerIdUnjoinResponse, PostNetworksFabricByIdReloadBlockData, PostNetworksFabricByIdReloadBlockError, PostNetworksFabricByIdReloadBlockResponse, GetNodesData, GetNodesError, GetNodesResponse, PostNodesData, PostNodesError, PostNodesResponse, GetNodesDefaultsBesuNodeData, GetNodesDefaultsFabricData, GetNodesDefaultsFabricOrdererData, GetNodesDefaultsFabricPeerData, GetNodesPlatformByPlatformData, GetNodesPlatformByPlatformError, GetNodesPlatformByPlatformResponse, DeleteNodesByIdData, DeleteNodesByIdError, GetNodesByIdData, PostNodesByIdCertificatesRenewData, PostNodesByIdCertificatesRenewError, PostNodesByIdCertificatesRenewResponse, GetNodesByIdChannelsData, GetNodesByIdEventsData, GetNodesByIdEventsError, GetNodesByIdEventsResponse, GetNodesByIdLogsData, PostNodesByIdRestartData, PostNodesByIdRestartError, PostNodesByIdRestartResponse, PostNodesByIdStartData, PostNodesByIdStartError, PostNodesByIdStartResponse, PostNodesByIdStopData, PostNodesByIdStopError, PostNodesByIdStopResponse, GetNotificationsProvidersData, PostNotificationsProvidersData, PostNotificationsProvidersError, PostNotificationsProvidersResponse, DeleteNotificationsProvidersByIdData, DeleteNotificationsProvidersByIdError, GetNotificationsProvidersByIdData, PutNotificationsProvidersByIdData, PutNotificationsProvidersByIdError, PutNotificationsProvidersByIdResponse, PostNotificationsProvidersByIdTestData, PostNotificationsProvidersByIdTestError, PostNotificationsProvidersByIdTestResponse, GetOrganizationsData, PostOrganizationsData, PostOrganizationsError, PostOrganizationsResponse, GetOrganizationsByMspidByMspidData, DeleteOrganizationsByIdData, DeleteOrganizationsByIdError, GetOrganizationsByIdData, PutOrganizationsByIdData, PutOrganizationsByIdError, PutOrganizationsByIdResponse } from '../types.gen';
import { postAuthLogin, postAuthLogout, getAuthMe, getBackups, postBackups, getBackupsSchedules, postBackupsSchedules, deleteBackupsSchedulesById, getBackupsSchedulesById, putBackupsSchedulesById, putBackupsSchedulesByIdDisable, putBackupsSchedulesByIdEnable, getBackupsTargets, postBackupsTargets, deleteBackupsTargetsById, getBackupsTargetsById, putBackupsTargetsById, deleteBackupsById, getBackupsById, postDummy, getKeyProviders, postKeyProviders, deleteKeyProvidersById, getKeyProvidersById, getKeys, postKeys, getKeysAll, getKeysFilter, deleteKeysById, getKeysById, postKeysByKeyIdSign, getNetworksBesu, postNetworksBesu, postNetworksBesuImport, deleteNetworksBesuById, getNetworksBesuById, getNetworksFabric, postNetworksFabric, getNetworksFabricByNameByName, postNetworksFabricImport, postNetworksFabricImportWithOrg, deleteNetworksFabricById, getNetworksFabricById, postNetworksFabricByIdAnchorPeers, getNetworksFabricByIdChannelConfig, getNetworksFabricByIdCurrentChannelConfig, getNetworksFabricByIdNodes, postNetworksFabricByIdNodes, deleteNetworksFabricByIdOrderersByOrdererId, postNetworksFabricByIdOrderersByOrdererIdJoin, postNetworksFabricByIdOrderersByOrdererIdUnjoin, getNetworksFabricByIdOrganizationsByOrgIdConfig, deleteNetworksFabricByIdPeersByPeerId, postNetworksFabricByIdPeersByPeerIdJoin, postNetworksFabricByIdPeersByPeerIdUnjoin, postNetworksFabricByIdReloadBlock, getNodes, postNodes, getNodesDefaultsBesuNode, getNodesDefaultsFabric, getNodesDefaultsFabricOrderer, getNodesDefaultsFabricPeer, getNodesPlatformByPlatform, deleteNodesById, getNodesById, postNodesByIdCertificatesRenew, getNodesByIdChannels, getNodesByIdEvents, getNodesByIdLogs, postNodesByIdRestart, postNodesByIdStart, postNodesByIdStop, getNotificationsProviders, postNotificationsProviders, deleteNotificationsProvidersById, getNotificationsProvidersById, putNotificationsProvidersById, postNotificationsProvidersByIdTest, getOrganizations, postOrganizations, getOrganizationsByMspidByMspid, deleteOrganizationsById, getOrganizationsById, putOrganizationsById, client } from '../sdk.gen';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const postAuthLoginQueryKey = (options: Options<PostAuthLoginData>) => [
    createQueryKey('postAuthLogin', options)
];

export const postAuthLoginOptions = (options: Options<PostAuthLoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAuthLogin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAuthLoginQueryKey(options)
    });
};

export const postAuthLoginMutation = (options?: Partial<Options<PostAuthLoginData>>) => {
    const mutationOptions: UseMutationOptions<PostAuthLoginResponse, PostAuthLoginError, Options<PostAuthLoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postAuthLogin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAuthLogoutQueryKey = (options?: Options<PostAuthLogoutData>) => [
    createQueryKey('postAuthLogout', options)
];

export const postAuthLogoutOptions = (options?: Options<PostAuthLogoutData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAuthLogout({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAuthLogoutQueryKey(options)
    });
};

export const postAuthLogoutMutation = (options?: Partial<Options<PostAuthLogoutData>>) => {
    const mutationOptions: UseMutationOptions<PostAuthLogoutResponse, PostAuthLogoutError, Options<PostAuthLogoutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postAuthLogout({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAuthMeQueryKey = (options?: Options<GetAuthMeData>) => [
    createQueryKey('getAuthMe', options)
];

export const getAuthMeOptions = (options?: Options<GetAuthMeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAuthMe({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAuthMeQueryKey(options)
    });
};

export const getBackupsQueryKey = (options?: Options<GetBackupsData>) => [
    createQueryKey('getBackups', options)
];

export const getBackupsOptions = (options?: Options<GetBackupsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBackups({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBackupsQueryKey(options)
    });
};

export const postBackupsQueryKey = (options: Options<PostBackupsData>) => [
    createQueryKey('postBackups', options)
];

export const postBackupsOptions = (options: Options<PostBackupsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postBackups({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postBackupsQueryKey(options)
    });
};

export const postBackupsMutation = (options?: Partial<Options<PostBackupsData>>) => {
    const mutationOptions: UseMutationOptions<PostBackupsResponse, PostBackupsError, Options<PostBackupsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postBackups({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getBackupsSchedulesQueryKey = (options?: Options<GetBackupsSchedulesData>) => [
    createQueryKey('getBackupsSchedules', options)
];

export const getBackupsSchedulesOptions = (options?: Options<GetBackupsSchedulesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBackupsSchedules({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBackupsSchedulesQueryKey(options)
    });
};

export const postBackupsSchedulesQueryKey = (options: Options<PostBackupsSchedulesData>) => [
    createQueryKey('postBackupsSchedules', options)
];

export const postBackupsSchedulesOptions = (options: Options<PostBackupsSchedulesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postBackupsSchedules({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postBackupsSchedulesQueryKey(options)
    });
};

export const postBackupsSchedulesMutation = (options?: Partial<Options<PostBackupsSchedulesData>>) => {
    const mutationOptions: UseMutationOptions<PostBackupsSchedulesResponse, PostBackupsSchedulesError, Options<PostBackupsSchedulesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postBackupsSchedules({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteBackupsSchedulesByIdMutation = (options?: Partial<Options<DeleteBackupsSchedulesByIdData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DeleteBackupsSchedulesByIdError, Options<DeleteBackupsSchedulesByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteBackupsSchedulesById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getBackupsSchedulesByIdQueryKey = (options: Options<GetBackupsSchedulesByIdData>) => [
    createQueryKey('getBackupsSchedulesById', options)
];

export const getBackupsSchedulesByIdOptions = (options: Options<GetBackupsSchedulesByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBackupsSchedulesById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBackupsSchedulesByIdQueryKey(options)
    });
};

export const putBackupsSchedulesByIdMutation = (options?: Partial<Options<PutBackupsSchedulesByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutBackupsSchedulesByIdResponse, PutBackupsSchedulesByIdError, Options<PutBackupsSchedulesByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putBackupsSchedulesById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const putBackupsSchedulesByIdDisableMutation = (options?: Partial<Options<PutBackupsSchedulesByIdDisableData>>) => {
    const mutationOptions: UseMutationOptions<PutBackupsSchedulesByIdDisableResponse, PutBackupsSchedulesByIdDisableError, Options<PutBackupsSchedulesByIdDisableData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putBackupsSchedulesByIdDisable({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const putBackupsSchedulesByIdEnableMutation = (options?: Partial<Options<PutBackupsSchedulesByIdEnableData>>) => {
    const mutationOptions: UseMutationOptions<PutBackupsSchedulesByIdEnableResponse, PutBackupsSchedulesByIdEnableError, Options<PutBackupsSchedulesByIdEnableData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putBackupsSchedulesByIdEnable({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getBackupsTargetsQueryKey = (options?: Options<GetBackupsTargetsData>) => [
    createQueryKey('getBackupsTargets', options)
];

export const getBackupsTargetsOptions = (options?: Options<GetBackupsTargetsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBackupsTargets({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBackupsTargetsQueryKey(options)
    });
};

export const postBackupsTargetsQueryKey = (options: Options<PostBackupsTargetsData>) => [
    createQueryKey('postBackupsTargets', options)
];

export const postBackupsTargetsOptions = (options: Options<PostBackupsTargetsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postBackupsTargets({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postBackupsTargetsQueryKey(options)
    });
};

export const postBackupsTargetsMutation = (options?: Partial<Options<PostBackupsTargetsData>>) => {
    const mutationOptions: UseMutationOptions<PostBackupsTargetsResponse, PostBackupsTargetsError, Options<PostBackupsTargetsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postBackupsTargets({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteBackupsTargetsByIdMutation = (options?: Partial<Options<DeleteBackupsTargetsByIdData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DeleteBackupsTargetsByIdError, Options<DeleteBackupsTargetsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteBackupsTargetsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getBackupsTargetsByIdQueryKey = (options: Options<GetBackupsTargetsByIdData>) => [
    createQueryKey('getBackupsTargetsById', options)
];

export const getBackupsTargetsByIdOptions = (options: Options<GetBackupsTargetsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBackupsTargetsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBackupsTargetsByIdQueryKey(options)
    });
};

export const putBackupsTargetsByIdMutation = (options?: Partial<Options<PutBackupsTargetsByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutBackupsTargetsByIdResponse, PutBackupsTargetsByIdError, Options<PutBackupsTargetsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putBackupsTargetsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteBackupsByIdMutation = (options?: Partial<Options<DeleteBackupsByIdData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DeleteBackupsByIdError, Options<DeleteBackupsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteBackupsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getBackupsByIdQueryKey = (options: Options<GetBackupsByIdData>) => [
    createQueryKey('getBackupsById', options)
];

export const getBackupsByIdOptions = (options: Options<GetBackupsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBackupsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBackupsByIdQueryKey(options)
    });
};

export const postDummyQueryKey = (options: Options<PostDummyData>) => [
    createQueryKey('postDummy', options)
];

export const postDummyOptions = (options: Options<PostDummyData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postDummy({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postDummyQueryKey(options)
    });
};

export const postDummyMutation = (options?: Partial<Options<PostDummyData>>) => {
    const mutationOptions: UseMutationOptions<PostDummyResponse, DefaultError, Options<PostDummyData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postDummy({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getKeyProvidersQueryKey = (options?: Options<GetKeyProvidersData>) => [
    createQueryKey('getKeyProviders', options)
];

export const getKeyProvidersOptions = (options?: Options<GetKeyProvidersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getKeyProviders({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getKeyProvidersQueryKey(options)
    });
};

export const postKeyProvidersQueryKey = (options: Options<PostKeyProvidersData>) => [
    createQueryKey('postKeyProviders', options)
];

export const postKeyProvidersOptions = (options: Options<PostKeyProvidersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postKeyProviders({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postKeyProvidersQueryKey(options)
    });
};

export const postKeyProvidersMutation = (options?: Partial<Options<PostKeyProvidersData>>) => {
    const mutationOptions: UseMutationOptions<PostKeyProvidersResponse, PostKeyProvidersError, Options<PostKeyProvidersData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postKeyProviders({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteKeyProvidersByIdMutation = (options?: Partial<Options<DeleteKeyProvidersByIdData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DeleteKeyProvidersByIdError, Options<DeleteKeyProvidersByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteKeyProvidersById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getKeyProvidersByIdQueryKey = (options: Options<GetKeyProvidersByIdData>) => [
    createQueryKey('getKeyProvidersById', options)
];

export const getKeyProvidersByIdOptions = (options: Options<GetKeyProvidersByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getKeyProvidersById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getKeyProvidersByIdQueryKey(options)
    });
};

export const getKeysQueryKey = (options?: Options<GetKeysData>) => [
    createQueryKey('getKeys', options)
];

export const getKeysOptions = (options?: Options<GetKeysData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getKeys({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getKeysQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = queryKey[0];
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const getKeysInfiniteQueryKey = (options?: Options<GetKeysData>): QueryKey<Options<GetKeysData>> => [
    createQueryKey('getKeys', options, true)
];

export const getKeysInfiniteOptions = (options?: Options<GetKeysData>) => {
    return infiniteQueryOptions<GetKeysResponse, GetKeysError, InfiniteData<GetKeysResponse>, QueryKey<Options<GetKeysData>>, number | Pick<QueryKey<Options<GetKeysData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetKeysData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getKeys({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getKeysInfiniteQueryKey(options)
    });
};

export const postKeysQueryKey = (options: Options<PostKeysData>) => [
    createQueryKey('postKeys', options)
];

export const postKeysOptions = (options: Options<PostKeysData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postKeys({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postKeysQueryKey(options)
    });
};

export const postKeysMutation = (options?: Partial<Options<PostKeysData>>) => {
    const mutationOptions: UseMutationOptions<PostKeysResponse, PostKeysError, Options<PostKeysData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postKeys({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getKeysAllQueryKey = (options?: Options<GetKeysAllData>) => [
    createQueryKey('getKeysAll', options)
];

export const getKeysAllOptions = (options?: Options<GetKeysAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getKeysAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getKeysAllQueryKey(options)
    });
};

export const getKeysFilterQueryKey = (options?: Options<GetKeysFilterData>) => [
    createQueryKey('getKeysFilter', options)
];

export const getKeysFilterOptions = (options?: Options<GetKeysFilterData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getKeysFilter({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getKeysFilterQueryKey(options)
    });
};

export const getKeysFilterInfiniteQueryKey = (options?: Options<GetKeysFilterData>): QueryKey<Options<GetKeysFilterData>> => [
    createQueryKey('getKeysFilter', options, true)
];

export const getKeysFilterInfiniteOptions = (options?: Options<GetKeysFilterData>) => {
    return infiniteQueryOptions<GetKeysFilterResponse, GetKeysFilterError, InfiniteData<GetKeysFilterResponse>, QueryKey<Options<GetKeysFilterData>>, number | Pick<QueryKey<Options<GetKeysFilterData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetKeysFilterData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getKeysFilter({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getKeysFilterInfiniteQueryKey(options)
    });
};

export const deleteKeysByIdMutation = (options?: Partial<Options<DeleteKeysByIdData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DeleteKeysByIdError, Options<DeleteKeysByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteKeysById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getKeysByIdQueryKey = (options: Options<GetKeysByIdData>) => [
    createQueryKey('getKeysById', options)
];

export const getKeysByIdOptions = (options: Options<GetKeysByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getKeysById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getKeysByIdQueryKey(options)
    });
};

export const postKeysByKeyIdSignQueryKey = (options: Options<PostKeysByKeyIdSignData>) => [
    createQueryKey('postKeysByKeyIdSign', options)
];

export const postKeysByKeyIdSignOptions = (options: Options<PostKeysByKeyIdSignData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postKeysByKeyIdSign({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postKeysByKeyIdSignQueryKey(options)
    });
};

export const postKeysByKeyIdSignMutation = (options?: Partial<Options<PostKeysByKeyIdSignData>>) => {
    const mutationOptions: UseMutationOptions<PostKeysByKeyIdSignResponse, PostKeysByKeyIdSignError, Options<PostKeysByKeyIdSignData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postKeysByKeyIdSign({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNetworksBesuQueryKey = (options?: Options<GetNetworksBesuData>) => [
    createQueryKey('getNetworksBesu', options)
];

export const getNetworksBesuOptions = (options?: Options<GetNetworksBesuData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNetworksBesu({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNetworksBesuQueryKey(options)
    });
};

export const getNetworksBesuInfiniteQueryKey = (options?: Options<GetNetworksBesuData>): QueryKey<Options<GetNetworksBesuData>> => [
    createQueryKey('getNetworksBesu', options, true)
];

export const getNetworksBesuInfiniteOptions = (options?: Options<GetNetworksBesuData>) => {
    return infiniteQueryOptions<GetNetworksBesuResponse, GetNetworksBesuError, InfiniteData<GetNetworksBesuResponse>, QueryKey<Options<GetNetworksBesuData>>, number | Pick<QueryKey<Options<GetNetworksBesuData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetNetworksBesuData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getNetworksBesu({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNetworksBesuInfiniteQueryKey(options)
    });
};

export const postNetworksBesuQueryKey = (options: Options<PostNetworksBesuData>) => [
    createQueryKey('postNetworksBesu', options)
];

export const postNetworksBesuOptions = (options: Options<PostNetworksBesuData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNetworksBesu({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNetworksBesuQueryKey(options)
    });
};

export const postNetworksBesuMutation = (options?: Partial<Options<PostNetworksBesuData>>) => {
    const mutationOptions: UseMutationOptions<PostNetworksBesuResponse, PostNetworksBesuError, Options<PostNetworksBesuData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNetworksBesu({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postNetworksBesuImportQueryKey = (options: Options<PostNetworksBesuImportData>) => [
    createQueryKey('postNetworksBesuImport', options)
];

export const postNetworksBesuImportOptions = (options: Options<PostNetworksBesuImportData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNetworksBesuImport({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNetworksBesuImportQueryKey(options)
    });
};

export const postNetworksBesuImportMutation = (options?: Partial<Options<PostNetworksBesuImportData>>) => {
    const mutationOptions: UseMutationOptions<PostNetworksBesuImportResponse, PostNetworksBesuImportError, Options<PostNetworksBesuImportData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNetworksBesuImport({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteNetworksBesuByIdMutation = (options?: Partial<Options<DeleteNetworksBesuByIdData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DeleteNetworksBesuByIdError, Options<DeleteNetworksBesuByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteNetworksBesuById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNetworksBesuByIdQueryKey = (options: Options<GetNetworksBesuByIdData>) => [
    createQueryKey('getNetworksBesuById', options)
];

export const getNetworksBesuByIdOptions = (options: Options<GetNetworksBesuByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNetworksBesuById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNetworksBesuByIdQueryKey(options)
    });
};

export const getNetworksFabricQueryKey = (options?: Options<GetNetworksFabricData>) => [
    createQueryKey('getNetworksFabric', options)
];

export const getNetworksFabricOptions = (options?: Options<GetNetworksFabricData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNetworksFabric({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNetworksFabricQueryKey(options)
    });
};

export const getNetworksFabricInfiniteQueryKey = (options?: Options<GetNetworksFabricData>): QueryKey<Options<GetNetworksFabricData>> => [
    createQueryKey('getNetworksFabric', options, true)
];

export const getNetworksFabricInfiniteOptions = (options?: Options<GetNetworksFabricData>) => {
    return infiniteQueryOptions<GetNetworksFabricResponse, GetNetworksFabricError, InfiniteData<GetNetworksFabricResponse>, QueryKey<Options<GetNetworksFabricData>>, number | Pick<QueryKey<Options<GetNetworksFabricData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetNetworksFabricData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getNetworksFabric({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNetworksFabricInfiniteQueryKey(options)
    });
};

export const postNetworksFabricQueryKey = (options: Options<PostNetworksFabricData>) => [
    createQueryKey('postNetworksFabric', options)
];

export const postNetworksFabricOptions = (options: Options<PostNetworksFabricData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNetworksFabric({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNetworksFabricQueryKey(options)
    });
};

export const postNetworksFabricMutation = (options?: Partial<Options<PostNetworksFabricData>>) => {
    const mutationOptions: UseMutationOptions<PostNetworksFabricResponse, PostNetworksFabricError, Options<PostNetworksFabricData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNetworksFabric({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNetworksFabricByNameByNameQueryKey = (options: Options<GetNetworksFabricByNameByNameData>) => [
    createQueryKey('getNetworksFabricByNameByName', options)
];

export const getNetworksFabricByNameByNameOptions = (options: Options<GetNetworksFabricByNameByNameData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNetworksFabricByNameByName({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNetworksFabricByNameByNameQueryKey(options)
    });
};

export const postNetworksFabricImportQueryKey = (options: Options<PostNetworksFabricImportData>) => [
    createQueryKey('postNetworksFabricImport', options)
];

export const postNetworksFabricImportOptions = (options: Options<PostNetworksFabricImportData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNetworksFabricImport({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNetworksFabricImportQueryKey(options)
    });
};

export const postNetworksFabricImportMutation = (options?: Partial<Options<PostNetworksFabricImportData>>) => {
    const mutationOptions: UseMutationOptions<PostNetworksFabricImportResponse, PostNetworksFabricImportError, Options<PostNetworksFabricImportData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNetworksFabricImport({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postNetworksFabricImportWithOrgQueryKey = (options: Options<PostNetworksFabricImportWithOrgData>) => [
    createQueryKey('postNetworksFabricImportWithOrg', options)
];

export const postNetworksFabricImportWithOrgOptions = (options: Options<PostNetworksFabricImportWithOrgData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNetworksFabricImportWithOrg({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNetworksFabricImportWithOrgQueryKey(options)
    });
};

export const postNetworksFabricImportWithOrgMutation = (options?: Partial<Options<PostNetworksFabricImportWithOrgData>>) => {
    const mutationOptions: UseMutationOptions<PostNetworksFabricImportWithOrgResponse, PostNetworksFabricImportWithOrgError, Options<PostNetworksFabricImportWithOrgData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNetworksFabricImportWithOrg({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteNetworksFabricByIdMutation = (options?: Partial<Options<DeleteNetworksFabricByIdData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DeleteNetworksFabricByIdError, Options<DeleteNetworksFabricByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteNetworksFabricById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNetworksFabricByIdQueryKey = (options: Options<GetNetworksFabricByIdData>) => [
    createQueryKey('getNetworksFabricById', options)
];

export const getNetworksFabricByIdOptions = (options: Options<GetNetworksFabricByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNetworksFabricById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNetworksFabricByIdQueryKey(options)
    });
};

export const postNetworksFabricByIdAnchorPeersQueryKey = (options: Options<PostNetworksFabricByIdAnchorPeersData>) => [
    createQueryKey('postNetworksFabricByIdAnchorPeers', options)
];

export const postNetworksFabricByIdAnchorPeersOptions = (options: Options<PostNetworksFabricByIdAnchorPeersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNetworksFabricByIdAnchorPeers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNetworksFabricByIdAnchorPeersQueryKey(options)
    });
};

export const postNetworksFabricByIdAnchorPeersMutation = (options?: Partial<Options<PostNetworksFabricByIdAnchorPeersData>>) => {
    const mutationOptions: UseMutationOptions<PostNetworksFabricByIdAnchorPeersResponse, PostNetworksFabricByIdAnchorPeersError, Options<PostNetworksFabricByIdAnchorPeersData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNetworksFabricByIdAnchorPeers({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNetworksFabricByIdChannelConfigQueryKey = (options: Options<GetNetworksFabricByIdChannelConfigData>) => [
    createQueryKey('getNetworksFabricByIdChannelConfig', options)
];

export const getNetworksFabricByIdChannelConfigOptions = (options: Options<GetNetworksFabricByIdChannelConfigData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNetworksFabricByIdChannelConfig({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNetworksFabricByIdChannelConfigQueryKey(options)
    });
};

export const getNetworksFabricByIdCurrentChannelConfigQueryKey = (options: Options<GetNetworksFabricByIdCurrentChannelConfigData>) => [
    createQueryKey('getNetworksFabricByIdCurrentChannelConfig', options)
];

export const getNetworksFabricByIdCurrentChannelConfigOptions = (options: Options<GetNetworksFabricByIdCurrentChannelConfigData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNetworksFabricByIdCurrentChannelConfig({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNetworksFabricByIdCurrentChannelConfigQueryKey(options)
    });
};

export const getNetworksFabricByIdNodesQueryKey = (options: Options<GetNetworksFabricByIdNodesData>) => [
    createQueryKey('getNetworksFabricByIdNodes', options)
];

export const getNetworksFabricByIdNodesOptions = (options: Options<GetNetworksFabricByIdNodesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNetworksFabricByIdNodes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNetworksFabricByIdNodesQueryKey(options)
    });
};

export const postNetworksFabricByIdNodesQueryKey = (options: Options<PostNetworksFabricByIdNodesData>) => [
    createQueryKey('postNetworksFabricByIdNodes', options)
];

export const postNetworksFabricByIdNodesOptions = (options: Options<PostNetworksFabricByIdNodesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNetworksFabricByIdNodes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNetworksFabricByIdNodesQueryKey(options)
    });
};

export const postNetworksFabricByIdNodesMutation = (options?: Partial<Options<PostNetworksFabricByIdNodesData>>) => {
    const mutationOptions: UseMutationOptions<PostNetworksFabricByIdNodesResponse, PostNetworksFabricByIdNodesError, Options<PostNetworksFabricByIdNodesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNetworksFabricByIdNodes({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteNetworksFabricByIdOrderersByOrdererIdMutation = (options?: Partial<Options<DeleteNetworksFabricByIdOrderersByOrdererIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteNetworksFabricByIdOrderersByOrdererIdResponse, DeleteNetworksFabricByIdOrderersByOrdererIdError, Options<DeleteNetworksFabricByIdOrderersByOrdererIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteNetworksFabricByIdOrderersByOrdererId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postNetworksFabricByIdOrderersByOrdererIdJoinQueryKey = (options: Options<PostNetworksFabricByIdOrderersByOrdererIdJoinData>) => [
    createQueryKey('postNetworksFabricByIdOrderersByOrdererIdJoin', options)
];

export const postNetworksFabricByIdOrderersByOrdererIdJoinOptions = (options: Options<PostNetworksFabricByIdOrderersByOrdererIdJoinData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNetworksFabricByIdOrderersByOrdererIdJoin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNetworksFabricByIdOrderersByOrdererIdJoinQueryKey(options)
    });
};

export const postNetworksFabricByIdOrderersByOrdererIdJoinMutation = (options?: Partial<Options<PostNetworksFabricByIdOrderersByOrdererIdJoinData>>) => {
    const mutationOptions: UseMutationOptions<PostNetworksFabricByIdOrderersByOrdererIdJoinResponse, PostNetworksFabricByIdOrderersByOrdererIdJoinError, Options<PostNetworksFabricByIdOrderersByOrdererIdJoinData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNetworksFabricByIdOrderersByOrdererIdJoin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postNetworksFabricByIdOrderersByOrdererIdUnjoinQueryKey = (options: Options<PostNetworksFabricByIdOrderersByOrdererIdUnjoinData>) => [
    createQueryKey('postNetworksFabricByIdOrderersByOrdererIdUnjoin', options)
];

export const postNetworksFabricByIdOrderersByOrdererIdUnjoinOptions = (options: Options<PostNetworksFabricByIdOrderersByOrdererIdUnjoinData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNetworksFabricByIdOrderersByOrdererIdUnjoin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNetworksFabricByIdOrderersByOrdererIdUnjoinQueryKey(options)
    });
};

export const postNetworksFabricByIdOrderersByOrdererIdUnjoinMutation = (options?: Partial<Options<PostNetworksFabricByIdOrderersByOrdererIdUnjoinData>>) => {
    const mutationOptions: UseMutationOptions<PostNetworksFabricByIdOrderersByOrdererIdUnjoinResponse, PostNetworksFabricByIdOrderersByOrdererIdUnjoinError, Options<PostNetworksFabricByIdOrderersByOrdererIdUnjoinData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNetworksFabricByIdOrderersByOrdererIdUnjoin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNetworksFabricByIdOrganizationsByOrgIdConfigQueryKey = (options: Options<GetNetworksFabricByIdOrganizationsByOrgIdConfigData>) => [
    createQueryKey('getNetworksFabricByIdOrganizationsByOrgIdConfig', options)
];

export const getNetworksFabricByIdOrganizationsByOrgIdConfigOptions = (options: Options<GetNetworksFabricByIdOrganizationsByOrgIdConfigData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNetworksFabricByIdOrganizationsByOrgIdConfig({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNetworksFabricByIdOrganizationsByOrgIdConfigQueryKey(options)
    });
};

export const deleteNetworksFabricByIdPeersByPeerIdMutation = (options?: Partial<Options<DeleteNetworksFabricByIdPeersByPeerIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteNetworksFabricByIdPeersByPeerIdResponse, DeleteNetworksFabricByIdPeersByPeerIdError, Options<DeleteNetworksFabricByIdPeersByPeerIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteNetworksFabricByIdPeersByPeerId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postNetworksFabricByIdPeersByPeerIdJoinQueryKey = (options: Options<PostNetworksFabricByIdPeersByPeerIdJoinData>) => [
    createQueryKey('postNetworksFabricByIdPeersByPeerIdJoin', options)
];

export const postNetworksFabricByIdPeersByPeerIdJoinOptions = (options: Options<PostNetworksFabricByIdPeersByPeerIdJoinData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNetworksFabricByIdPeersByPeerIdJoin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNetworksFabricByIdPeersByPeerIdJoinQueryKey(options)
    });
};

export const postNetworksFabricByIdPeersByPeerIdJoinMutation = (options?: Partial<Options<PostNetworksFabricByIdPeersByPeerIdJoinData>>) => {
    const mutationOptions: UseMutationOptions<PostNetworksFabricByIdPeersByPeerIdJoinResponse, PostNetworksFabricByIdPeersByPeerIdJoinError, Options<PostNetworksFabricByIdPeersByPeerIdJoinData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNetworksFabricByIdPeersByPeerIdJoin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postNetworksFabricByIdPeersByPeerIdUnjoinQueryKey = (options: Options<PostNetworksFabricByIdPeersByPeerIdUnjoinData>) => [
    createQueryKey('postNetworksFabricByIdPeersByPeerIdUnjoin', options)
];

export const postNetworksFabricByIdPeersByPeerIdUnjoinOptions = (options: Options<PostNetworksFabricByIdPeersByPeerIdUnjoinData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNetworksFabricByIdPeersByPeerIdUnjoin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNetworksFabricByIdPeersByPeerIdUnjoinQueryKey(options)
    });
};

export const postNetworksFabricByIdPeersByPeerIdUnjoinMutation = (options?: Partial<Options<PostNetworksFabricByIdPeersByPeerIdUnjoinData>>) => {
    const mutationOptions: UseMutationOptions<PostNetworksFabricByIdPeersByPeerIdUnjoinResponse, PostNetworksFabricByIdPeersByPeerIdUnjoinError, Options<PostNetworksFabricByIdPeersByPeerIdUnjoinData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNetworksFabricByIdPeersByPeerIdUnjoin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postNetworksFabricByIdReloadBlockQueryKey = (options: Options<PostNetworksFabricByIdReloadBlockData>) => [
    createQueryKey('postNetworksFabricByIdReloadBlock', options)
];

export const postNetworksFabricByIdReloadBlockOptions = (options: Options<PostNetworksFabricByIdReloadBlockData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNetworksFabricByIdReloadBlock({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNetworksFabricByIdReloadBlockQueryKey(options)
    });
};

export const postNetworksFabricByIdReloadBlockMutation = (options?: Partial<Options<PostNetworksFabricByIdReloadBlockData>>) => {
    const mutationOptions: UseMutationOptions<PostNetworksFabricByIdReloadBlockResponse, PostNetworksFabricByIdReloadBlockError, Options<PostNetworksFabricByIdReloadBlockData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNetworksFabricByIdReloadBlock({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNodesQueryKey = (options?: Options<GetNodesData>) => [
    createQueryKey('getNodes', options)
];

export const getNodesOptions = (options?: Options<GetNodesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNodes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNodesQueryKey(options)
    });
};

export const getNodesInfiniteQueryKey = (options?: Options<GetNodesData>): QueryKey<Options<GetNodesData>> => [
    createQueryKey('getNodes', options, true)
];

export const getNodesInfiniteOptions = (options?: Options<GetNodesData>) => {
    return infiniteQueryOptions<GetNodesResponse, GetNodesError, InfiniteData<GetNodesResponse>, QueryKey<Options<GetNodesData>>, number | Pick<QueryKey<Options<GetNodesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetNodesData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getNodes({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNodesInfiniteQueryKey(options)
    });
};

export const postNodesQueryKey = (options: Options<PostNodesData>) => [
    createQueryKey('postNodes', options)
];

export const postNodesOptions = (options: Options<PostNodesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNodes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNodesQueryKey(options)
    });
};

export const postNodesMutation = (options?: Partial<Options<PostNodesData>>) => {
    const mutationOptions: UseMutationOptions<PostNodesResponse, PostNodesError, Options<PostNodesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNodes({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNodesDefaultsBesuNodeQueryKey = (options?: Options<GetNodesDefaultsBesuNodeData>) => [
    createQueryKey('getNodesDefaultsBesuNode', options)
];

export const getNodesDefaultsBesuNodeOptions = (options?: Options<GetNodesDefaultsBesuNodeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNodesDefaultsBesuNode({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNodesDefaultsBesuNodeQueryKey(options)
    });
};

export const getNodesDefaultsFabricQueryKey = (options?: Options<GetNodesDefaultsFabricData>) => [
    createQueryKey('getNodesDefaultsFabric', options)
];

export const getNodesDefaultsFabricOptions = (options?: Options<GetNodesDefaultsFabricData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNodesDefaultsFabric({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNodesDefaultsFabricQueryKey(options)
    });
};

export const getNodesDefaultsFabricOrdererQueryKey = (options?: Options<GetNodesDefaultsFabricOrdererData>) => [
    createQueryKey('getNodesDefaultsFabricOrderer', options)
];

export const getNodesDefaultsFabricOrdererOptions = (options?: Options<GetNodesDefaultsFabricOrdererData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNodesDefaultsFabricOrderer({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNodesDefaultsFabricOrdererQueryKey(options)
    });
};

export const getNodesDefaultsFabricPeerQueryKey = (options?: Options<GetNodesDefaultsFabricPeerData>) => [
    createQueryKey('getNodesDefaultsFabricPeer', options)
];

export const getNodesDefaultsFabricPeerOptions = (options?: Options<GetNodesDefaultsFabricPeerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNodesDefaultsFabricPeer({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNodesDefaultsFabricPeerQueryKey(options)
    });
};

export const getNodesPlatformByPlatformQueryKey = (options: Options<GetNodesPlatformByPlatformData>) => [
    createQueryKey('getNodesPlatformByPlatform', options)
];

export const getNodesPlatformByPlatformOptions = (options: Options<GetNodesPlatformByPlatformData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNodesPlatformByPlatform({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNodesPlatformByPlatformQueryKey(options)
    });
};

export const getNodesPlatformByPlatformInfiniteQueryKey = (options: Options<GetNodesPlatformByPlatformData>): QueryKey<Options<GetNodesPlatformByPlatformData>> => [
    createQueryKey('getNodesPlatformByPlatform', options, true)
];

export const getNodesPlatformByPlatformInfiniteOptions = (options: Options<GetNodesPlatformByPlatformData>) => {
    return infiniteQueryOptions<GetNodesPlatformByPlatformResponse, GetNodesPlatformByPlatformError, InfiniteData<GetNodesPlatformByPlatformResponse>, QueryKey<Options<GetNodesPlatformByPlatformData>>, number | Pick<QueryKey<Options<GetNodesPlatformByPlatformData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetNodesPlatformByPlatformData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getNodesPlatformByPlatform({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNodesPlatformByPlatformInfiniteQueryKey(options)
    });
};

export const deleteNodesByIdMutation = (options?: Partial<Options<DeleteNodesByIdData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DeleteNodesByIdError, Options<DeleteNodesByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteNodesById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNodesByIdQueryKey = (options: Options<GetNodesByIdData>) => [
    createQueryKey('getNodesById', options)
];

export const getNodesByIdOptions = (options: Options<GetNodesByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNodesById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNodesByIdQueryKey(options)
    });
};

export const postNodesByIdCertificatesRenewQueryKey = (options: Options<PostNodesByIdCertificatesRenewData>) => [
    createQueryKey('postNodesByIdCertificatesRenew', options)
];

export const postNodesByIdCertificatesRenewOptions = (options: Options<PostNodesByIdCertificatesRenewData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNodesByIdCertificatesRenew({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNodesByIdCertificatesRenewQueryKey(options)
    });
};

export const postNodesByIdCertificatesRenewMutation = (options?: Partial<Options<PostNodesByIdCertificatesRenewData>>) => {
    const mutationOptions: UseMutationOptions<PostNodesByIdCertificatesRenewResponse, PostNodesByIdCertificatesRenewError, Options<PostNodesByIdCertificatesRenewData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNodesByIdCertificatesRenew({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNodesByIdChannelsQueryKey = (options: Options<GetNodesByIdChannelsData>) => [
    createQueryKey('getNodesByIdChannels', options)
];

export const getNodesByIdChannelsOptions = (options: Options<GetNodesByIdChannelsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNodesByIdChannels({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNodesByIdChannelsQueryKey(options)
    });
};

export const getNodesByIdEventsQueryKey = (options: Options<GetNodesByIdEventsData>) => [
    createQueryKey('getNodesByIdEvents', options)
];

export const getNodesByIdEventsOptions = (options: Options<GetNodesByIdEventsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNodesByIdEvents({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNodesByIdEventsQueryKey(options)
    });
};

export const getNodesByIdEventsInfiniteQueryKey = (options: Options<GetNodesByIdEventsData>): QueryKey<Options<GetNodesByIdEventsData>> => [
    createQueryKey('getNodesByIdEvents', options, true)
];

export const getNodesByIdEventsInfiniteOptions = (options: Options<GetNodesByIdEventsData>) => {
    return infiniteQueryOptions<GetNodesByIdEventsResponse, GetNodesByIdEventsError, InfiniteData<GetNodesByIdEventsResponse>, QueryKey<Options<GetNodesByIdEventsData>>, number | Pick<QueryKey<Options<GetNodesByIdEventsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetNodesByIdEventsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getNodesByIdEvents({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNodesByIdEventsInfiniteQueryKey(options)
    });
};

export const getNodesByIdLogsQueryKey = (options: Options<GetNodesByIdLogsData>) => [
    createQueryKey('getNodesByIdLogs', options)
];

export const getNodesByIdLogsOptions = (options: Options<GetNodesByIdLogsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNodesByIdLogs({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNodesByIdLogsQueryKey(options)
    });
};

export const postNodesByIdRestartQueryKey = (options: Options<PostNodesByIdRestartData>) => [
    createQueryKey('postNodesByIdRestart', options)
];

export const postNodesByIdRestartOptions = (options: Options<PostNodesByIdRestartData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNodesByIdRestart({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNodesByIdRestartQueryKey(options)
    });
};

export const postNodesByIdRestartMutation = (options?: Partial<Options<PostNodesByIdRestartData>>) => {
    const mutationOptions: UseMutationOptions<PostNodesByIdRestartResponse, PostNodesByIdRestartError, Options<PostNodesByIdRestartData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNodesByIdRestart({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postNodesByIdStartQueryKey = (options: Options<PostNodesByIdStartData>) => [
    createQueryKey('postNodesByIdStart', options)
];

export const postNodesByIdStartOptions = (options: Options<PostNodesByIdStartData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNodesByIdStart({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNodesByIdStartQueryKey(options)
    });
};

export const postNodesByIdStartMutation = (options?: Partial<Options<PostNodesByIdStartData>>) => {
    const mutationOptions: UseMutationOptions<PostNodesByIdStartResponse, PostNodesByIdStartError, Options<PostNodesByIdStartData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNodesByIdStart({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postNodesByIdStopQueryKey = (options: Options<PostNodesByIdStopData>) => [
    createQueryKey('postNodesByIdStop', options)
];

export const postNodesByIdStopOptions = (options: Options<PostNodesByIdStopData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNodesByIdStop({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNodesByIdStopQueryKey(options)
    });
};

export const postNodesByIdStopMutation = (options?: Partial<Options<PostNodesByIdStopData>>) => {
    const mutationOptions: UseMutationOptions<PostNodesByIdStopResponse, PostNodesByIdStopError, Options<PostNodesByIdStopData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNodesByIdStop({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNotificationsProvidersQueryKey = (options?: Options<GetNotificationsProvidersData>) => [
    createQueryKey('getNotificationsProviders', options)
];

export const getNotificationsProvidersOptions = (options?: Options<GetNotificationsProvidersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNotificationsProviders({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNotificationsProvidersQueryKey(options)
    });
};

export const postNotificationsProvidersQueryKey = (options: Options<PostNotificationsProvidersData>) => [
    createQueryKey('postNotificationsProviders', options)
];

export const postNotificationsProvidersOptions = (options: Options<PostNotificationsProvidersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNotificationsProviders({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNotificationsProvidersQueryKey(options)
    });
};

export const postNotificationsProvidersMutation = (options?: Partial<Options<PostNotificationsProvidersData>>) => {
    const mutationOptions: UseMutationOptions<PostNotificationsProvidersResponse, PostNotificationsProvidersError, Options<PostNotificationsProvidersData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNotificationsProviders({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteNotificationsProvidersByIdMutation = (options?: Partial<Options<DeleteNotificationsProvidersByIdData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DeleteNotificationsProvidersByIdError, Options<DeleteNotificationsProvidersByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteNotificationsProvidersById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNotificationsProvidersByIdQueryKey = (options: Options<GetNotificationsProvidersByIdData>) => [
    createQueryKey('getNotificationsProvidersById', options)
];

export const getNotificationsProvidersByIdOptions = (options: Options<GetNotificationsProvidersByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNotificationsProvidersById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNotificationsProvidersByIdQueryKey(options)
    });
};

export const putNotificationsProvidersByIdMutation = (options?: Partial<Options<PutNotificationsProvidersByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutNotificationsProvidersByIdResponse, PutNotificationsProvidersByIdError, Options<PutNotificationsProvidersByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putNotificationsProvidersById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postNotificationsProvidersByIdTestQueryKey = (options: Options<PostNotificationsProvidersByIdTestData>) => [
    createQueryKey('postNotificationsProvidersByIdTest', options)
];

export const postNotificationsProvidersByIdTestOptions = (options: Options<PostNotificationsProvidersByIdTestData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNotificationsProvidersByIdTest({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNotificationsProvidersByIdTestQueryKey(options)
    });
};

export const postNotificationsProvidersByIdTestMutation = (options?: Partial<Options<PostNotificationsProvidersByIdTestData>>) => {
    const mutationOptions: UseMutationOptions<PostNotificationsProvidersByIdTestResponse, PostNotificationsProvidersByIdTestError, Options<PostNotificationsProvidersByIdTestData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNotificationsProvidersByIdTest({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getOrganizationsQueryKey = (options?: Options<GetOrganizationsData>) => [
    createQueryKey('getOrganizations', options)
];

export const getOrganizationsOptions = (options?: Options<GetOrganizationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getOrganizations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOrganizationsQueryKey(options)
    });
};

export const postOrganizationsQueryKey = (options: Options<PostOrganizationsData>) => [
    createQueryKey('postOrganizations', options)
];

export const postOrganizationsOptions = (options: Options<PostOrganizationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postOrganizations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postOrganizationsQueryKey(options)
    });
};

export const postOrganizationsMutation = (options?: Partial<Options<PostOrganizationsData>>) => {
    const mutationOptions: UseMutationOptions<PostOrganizationsResponse, PostOrganizationsError, Options<PostOrganizationsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postOrganizations({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getOrganizationsByMspidByMspidQueryKey = (options: Options<GetOrganizationsByMspidByMspidData>) => [
    createQueryKey('getOrganizationsByMspidByMspid', options)
];

export const getOrganizationsByMspidByMspidOptions = (options: Options<GetOrganizationsByMspidByMspidData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getOrganizationsByMspidByMspid({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOrganizationsByMspidByMspidQueryKey(options)
    });
};

export const deleteOrganizationsByIdMutation = (options?: Partial<Options<DeleteOrganizationsByIdData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DeleteOrganizationsByIdError, Options<DeleteOrganizationsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteOrganizationsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getOrganizationsByIdQueryKey = (options: Options<GetOrganizationsByIdData>) => [
    createQueryKey('getOrganizationsById', options)
];

export const getOrganizationsByIdOptions = (options: Options<GetOrganizationsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getOrganizationsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOrganizationsByIdQueryKey(options)
    });
};

export const putOrganizationsByIdMutation = (options?: Partial<Options<PutOrganizationsByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutOrganizationsByIdResponse, PutOrganizationsByIdError, Options<PutOrganizationsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putOrganizationsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};