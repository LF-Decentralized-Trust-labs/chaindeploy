// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { PostAuthLoginData, PostAuthLoginResponse, PostAuthLoginError, PostAuthLogoutData, PostAuthLogoutResponse, PostAuthLogoutError, GetAuthMeData, GetAuthMeResponse, GetAuthMeError, GetBackupsData, GetBackupsResponse, GetBackupsError, PostBackupsData, PostBackupsResponse, PostBackupsError, GetBackupsSchedulesData, GetBackupsSchedulesResponse, GetBackupsSchedulesError, PostBackupsSchedulesData, PostBackupsSchedulesResponse, PostBackupsSchedulesError, DeleteBackupsSchedulesByIdData, DeleteBackupsSchedulesByIdError, GetBackupsSchedulesByIdData, GetBackupsSchedulesByIdResponse, GetBackupsSchedulesByIdError, PutBackupsSchedulesByIdData, PutBackupsSchedulesByIdResponse, PutBackupsSchedulesByIdError, PutBackupsSchedulesByIdDisableData, PutBackupsSchedulesByIdDisableResponse, PutBackupsSchedulesByIdDisableError, PutBackupsSchedulesByIdEnableData, PutBackupsSchedulesByIdEnableResponse, PutBackupsSchedulesByIdEnableError, GetBackupsTargetsData, GetBackupsTargetsResponse, GetBackupsTargetsError, PostBackupsTargetsData, PostBackupsTargetsResponse, PostBackupsTargetsError, DeleteBackupsTargetsByIdData, DeleteBackupsTargetsByIdError, GetBackupsTargetsByIdData, GetBackupsTargetsByIdResponse, GetBackupsTargetsByIdError, PutBackupsTargetsByIdData, PutBackupsTargetsByIdResponse, PutBackupsTargetsByIdError, DeleteBackupsByIdData, DeleteBackupsByIdError, GetBackupsByIdData, GetBackupsByIdResponse, GetBackupsByIdError, PostDummyData, PostDummyResponse, GetKeyProvidersData, GetKeyProvidersResponse, GetKeyProvidersError, PostKeyProvidersData, PostKeyProvidersResponse, PostKeyProvidersError, DeleteKeyProvidersByIdData, DeleteKeyProvidersByIdError, GetKeyProvidersByIdData, GetKeyProvidersByIdResponse, GetKeyProvidersByIdError, GetKeysData, GetKeysResponse, GetKeysError, PostKeysData, PostKeysResponse, PostKeysError, GetKeysAllData, GetKeysAllResponse, GetKeysAllError, GetKeysFilterData, GetKeysFilterResponse, GetKeysFilterError, DeleteKeysByIdData, DeleteKeysByIdError, GetKeysByIdData, GetKeysByIdResponse, GetKeysByIdError, PostKeysByKeyIdSignData, PostKeysByKeyIdSignResponse, PostKeysByKeyIdSignError, GetNetworksBesuData, GetNetworksBesuResponse, GetNetworksBesuError, PostNetworksBesuData, PostNetworksBesuResponse, PostNetworksBesuError, PostNetworksBesuImportData, PostNetworksBesuImportResponse, PostNetworksBesuImportError, DeleteNetworksBesuByIdData, DeleteNetworksBesuByIdError, GetNetworksBesuByIdData, GetNetworksBesuByIdResponse, GetNetworksBesuByIdError, GetNetworksFabricData, GetNetworksFabricResponse, GetNetworksFabricError, PostNetworksFabricData, PostNetworksFabricResponse, PostNetworksFabricError, GetNetworksFabricByNameByNameData, GetNetworksFabricByNameByNameResponse, GetNetworksFabricByNameByNameError, PostNetworksFabricImportData, PostNetworksFabricImportResponse, PostNetworksFabricImportError, PostNetworksFabricImportWithOrgData, PostNetworksFabricImportWithOrgResponse, PostNetworksFabricImportWithOrgError, DeleteNetworksFabricByIdData, DeleteNetworksFabricByIdError, GetNetworksFabricByIdData, GetNetworksFabricByIdResponse, GetNetworksFabricByIdError, PostNetworksFabricByIdAnchorPeersData, PostNetworksFabricByIdAnchorPeersResponse, PostNetworksFabricByIdAnchorPeersError, GetNetworksFabricByIdChannelConfigData, GetNetworksFabricByIdChannelConfigResponse, GetNetworksFabricByIdChannelConfigError, GetNetworksFabricByIdCurrentChannelConfigData, GetNetworksFabricByIdCurrentChannelConfigResponse, GetNetworksFabricByIdCurrentChannelConfigError, GetNetworksFabricByIdNodesData, GetNetworksFabricByIdNodesResponse, GetNetworksFabricByIdNodesError, PostNetworksFabricByIdNodesData, PostNetworksFabricByIdNodesResponse, PostNetworksFabricByIdNodesError, DeleteNetworksFabricByIdOrderersByOrdererIdData, DeleteNetworksFabricByIdOrderersByOrdererIdResponse, DeleteNetworksFabricByIdOrderersByOrdererIdError, PostNetworksFabricByIdOrderersByOrdererIdJoinData, PostNetworksFabricByIdOrderersByOrdererIdJoinResponse, PostNetworksFabricByIdOrderersByOrdererIdJoinError, PostNetworksFabricByIdOrderersByOrdererIdUnjoinData, PostNetworksFabricByIdOrderersByOrdererIdUnjoinResponse, PostNetworksFabricByIdOrderersByOrdererIdUnjoinError, GetNetworksFabricByIdOrganizationsByOrgIdConfigData, GetNetworksFabricByIdOrganizationsByOrgIdConfigResponse, GetNetworksFabricByIdOrganizationsByOrgIdConfigError, DeleteNetworksFabricByIdPeersByPeerIdData, DeleteNetworksFabricByIdPeersByPeerIdResponse, DeleteNetworksFabricByIdPeersByPeerIdError, PostNetworksFabricByIdPeersByPeerIdJoinData, PostNetworksFabricByIdPeersByPeerIdJoinResponse, PostNetworksFabricByIdPeersByPeerIdJoinError, PostNetworksFabricByIdPeersByPeerIdUnjoinData, PostNetworksFabricByIdPeersByPeerIdUnjoinResponse, PostNetworksFabricByIdPeersByPeerIdUnjoinError, PostNetworksFabricByIdReloadBlockData, PostNetworksFabricByIdReloadBlockResponse, PostNetworksFabricByIdReloadBlockError, GetNodesData, GetNodesResponse, GetNodesError, PostNodesData, PostNodesResponse, PostNodesError, GetNodesDefaultsBesuNodeData, GetNodesDefaultsBesuNodeResponse, GetNodesDefaultsBesuNodeError, GetNodesDefaultsFabricData, GetNodesDefaultsFabricResponse, GetNodesDefaultsFabricError, GetNodesDefaultsFabricOrdererData, GetNodesDefaultsFabricOrdererResponse, GetNodesDefaultsFabricOrdererError, GetNodesDefaultsFabricPeerData, GetNodesDefaultsFabricPeerResponse, GetNodesDefaultsFabricPeerError, GetNodesPlatformByPlatformData, GetNodesPlatformByPlatformResponse, GetNodesPlatformByPlatformError, DeleteNodesByIdData, DeleteNodesByIdError, GetNodesByIdData, GetNodesByIdResponse, GetNodesByIdError, GetNodesByIdEventsData, GetNodesByIdEventsResponse, GetNodesByIdEventsError, GetNodesByIdLogsData, GetNodesByIdLogsResponse, GetNodesByIdLogsError, PostNodesByIdRestartData, PostNodesByIdRestartResponse, PostNodesByIdRestartError, PostNodesByIdStartData, PostNodesByIdStartResponse, PostNodesByIdStartError, PostNodesByIdStopData, PostNodesByIdStopResponse, PostNodesByIdStopError, GetNotificationsProvidersData, GetNotificationsProvidersResponse, GetNotificationsProvidersError, PostNotificationsProvidersData, PostNotificationsProvidersResponse, PostNotificationsProvidersError, DeleteNotificationsProvidersByIdData, DeleteNotificationsProvidersByIdError, GetNotificationsProvidersByIdData, GetNotificationsProvidersByIdResponse, GetNotificationsProvidersByIdError, PutNotificationsProvidersByIdData, PutNotificationsProvidersByIdResponse, PutNotificationsProvidersByIdError, PostNotificationsProvidersByIdTestData, PostNotificationsProvidersByIdTestResponse, PostNotificationsProvidersByIdTestError, GetOrganizationsData, GetOrganizationsResponse, GetOrganizationsError, PostOrganizationsData, PostOrganizationsResponse, PostOrganizationsError, GetOrganizationsByMspidByMspidData, GetOrganizationsByMspidByMspidResponse, GetOrganizationsByMspidByMspidError, DeleteOrganizationsByIdData, DeleteOrganizationsByIdError, GetOrganizationsByIdData, GetOrganizationsByIdResponse, GetOrganizationsByIdError, PutOrganizationsByIdData, PutOrganizationsByIdResponse, PutOrganizationsByIdError } from './types.gen';

export const client = createClient(createConfig());

/**
 * Login user
 * Authenticates a user and returns a session cookie
 */
export const postAuthLogin = <ThrowOnError extends boolean = false>(options: Options<PostAuthLoginData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAuthLoginResponse, PostAuthLoginError, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Logout user
 * Invalidates the current session and clears the session cookie
 */
export const postAuthLogout = <ThrowOnError extends boolean = false>(options?: Options<PostAuthLogoutData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAuthLogoutResponse, PostAuthLogoutError, ThrowOnError>({
        url: '/auth/logout',
        ...options
    });
};

/**
 * Get current user
 * Returns information about the currently authenticated user
 */
export const getAuthMe = <ThrowOnError extends boolean = false>(options?: Options<GetAuthMeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAuthMeResponse, GetAuthMeError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/auth/me',
        ...options
    });
};

/**
 * List all backups
 * Get a list of all backups
 */
export const getBackups = <ThrowOnError extends boolean = false>(options?: Options<GetBackupsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBackupsResponse, GetBackupsError, ThrowOnError>({
        url: '/backups',
        ...options
    });
};

/**
 * Create a new backup
 * Create a new backup with the specified configuration
 */
export const postBackups = <ThrowOnError extends boolean = false>(options: Options<PostBackupsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostBackupsResponse, PostBackupsError, ThrowOnError>({
        url: '/backups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all backup schedules
 * Get a list of all backup schedules
 */
export const getBackupsSchedules = <ThrowOnError extends boolean = false>(options?: Options<GetBackupsSchedulesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBackupsSchedulesResponse, GetBackupsSchedulesError, ThrowOnError>({
        url: '/backups/schedules',
        ...options
    });
};

/**
 * Create a new backup schedule
 * Create a new backup schedule with the specified configuration
 */
export const postBackupsSchedules = <ThrowOnError extends boolean = false>(options: Options<PostBackupsSchedulesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostBackupsSchedulesResponse, PostBackupsSchedulesError, ThrowOnError>({
        url: '/backups/schedules',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a backup schedule
 * Delete a backup schedule and stop its execution
 */
export const deleteBackupsSchedulesById = <ThrowOnError extends boolean = false>(options: Options<DeleteBackupsSchedulesByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, DeleteBackupsSchedulesByIdError, ThrowOnError>({
        url: '/backups/schedules/{id}',
        ...options
    });
};

/**
 * Get a backup schedule by ID
 * Get detailed information about a specific backup schedule
 */
export const getBackupsSchedulesById = <ThrowOnError extends boolean = false>(options: Options<GetBackupsSchedulesByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBackupsSchedulesByIdResponse, GetBackupsSchedulesByIdError, ThrowOnError>({
        url: '/backups/schedules/{id}',
        ...options
    });
};

/**
 * Update a backup schedule
 * Update an existing backup schedule with new configuration
 */
export const putBackupsSchedulesById = <ThrowOnError extends boolean = false>(options: Options<PutBackupsSchedulesByIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutBackupsSchedulesByIdResponse, PutBackupsSchedulesByIdError, ThrowOnError>({
        url: '/backups/schedules/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Disable a backup schedule
 * Disable a backup schedule to stop it from running
 */
export const putBackupsSchedulesByIdDisable = <ThrowOnError extends boolean = false>(options: Options<PutBackupsSchedulesByIdDisableData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutBackupsSchedulesByIdDisableResponse, PutBackupsSchedulesByIdDisableError, ThrowOnError>({
        url: '/backups/schedules/{id}/disable',
        ...options
    });
};

/**
 * Enable a backup schedule
 * Enable a backup schedule to start running
 */
export const putBackupsSchedulesByIdEnable = <ThrowOnError extends boolean = false>(options: Options<PutBackupsSchedulesByIdEnableData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutBackupsSchedulesByIdEnableResponse, PutBackupsSchedulesByIdEnableError, ThrowOnError>({
        url: '/backups/schedules/{id}/enable',
        ...options
    });
};

/**
 * List all backup targets
 * Get a list of all backup targets
 */
export const getBackupsTargets = <ThrowOnError extends boolean = false>(options?: Options<GetBackupsTargetsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBackupsTargetsResponse, GetBackupsTargetsError, ThrowOnError>({
        url: '/backups/targets',
        ...options
    });
};

/**
 * Create a new backup target
 * Create a new backup target with the specified configuration
 */
export const postBackupsTargets = <ThrowOnError extends boolean = false>(options: Options<PostBackupsTargetsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostBackupsTargetsResponse, PostBackupsTargetsError, ThrowOnError>({
        url: '/backups/targets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a backup target
 * Delete a backup target and all associated backups
 */
export const deleteBackupsTargetsById = <ThrowOnError extends boolean = false>(options: Options<DeleteBackupsTargetsByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, DeleteBackupsTargetsByIdError, ThrowOnError>({
        url: '/backups/targets/{id}',
        ...options
    });
};

/**
 * Get a backup target by ID
 * Get detailed information about a specific backup target
 */
export const getBackupsTargetsById = <ThrowOnError extends boolean = false>(options: Options<GetBackupsTargetsByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBackupsTargetsByIdResponse, GetBackupsTargetsByIdError, ThrowOnError>({
        url: '/backups/targets/{id}',
        ...options
    });
};

/**
 * Update a backup target
 * Update an existing backup target with new configuration
 */
export const putBackupsTargetsById = <ThrowOnError extends boolean = false>(options: Options<PutBackupsTargetsByIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutBackupsTargetsByIdResponse, PutBackupsTargetsByIdError, ThrowOnError>({
        url: '/backups/targets/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a backup
 * Delete a backup and its associated files
 */
export const deleteBackupsById = <ThrowOnError extends boolean = false>(options: Options<DeleteBackupsByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, DeleteBackupsByIdError, ThrowOnError>({
        url: '/backups/{id}',
        ...options
    });
};

/**
 * Get a backup by ID
 * Get detailed information about a specific backup
 */
export const getBackupsById = <ThrowOnError extends boolean = false>(options: Options<GetBackupsByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBackupsByIdResponse, GetBackupsByIdError, ThrowOnError>({
        url: '/backups/{id}',
        ...options
    });
};

/**
 * Submit config update proposal
 * Submit a signed config update proposal for execution
 */
export const postDummy = <ThrowOnError extends boolean = false>(options: Options<PostDummyData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostDummyResponse, unknown, ThrowOnError>({
        url: '/dummy',
        ...options
    });
};

/**
 * List all key providers
 * Get a list of all configured key providers
 */
export const getKeyProviders = <ThrowOnError extends boolean = false>(options?: Options<GetKeyProvidersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetKeyProvidersResponse, GetKeyProvidersError, ThrowOnError>({
        url: '/key-providers',
        ...options
    });
};

/**
 * Create a new key provider
 * Create a new provider for key management
 */
export const postKeyProviders = <ThrowOnError extends boolean = false>(options: Options<PostKeyProvidersData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostKeyProvidersResponse, PostKeyProvidersError, ThrowOnError>({
        url: '/key-providers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a provider
 * Delete a specific key provider
 */
export const deleteKeyProvidersById = <ThrowOnError extends boolean = false>(options: Options<DeleteKeyProvidersByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, DeleteKeyProvidersByIdError, ThrowOnError>({
        url: '/key-providers/{id}',
        ...options
    });
};

/**
 * Get a specific provider
 * Get detailed information about a specific key provider
 */
export const getKeyProvidersById = <ThrowOnError extends boolean = false>(options: Options<GetKeyProvidersByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetKeyProvidersByIdResponse, GetKeyProvidersByIdError, ThrowOnError>({
        url: '/key-providers/{id}',
        ...options
    });
};

/**
 * Get paginated keys
 * Get a paginated list of keys
 */
export const getKeys = <ThrowOnError extends boolean = false>(options?: Options<GetKeysData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetKeysResponse, GetKeysError, ThrowOnError>({
        url: '/keys',
        ...options
    });
};

/**
 * Create a new key
 * Create a new key pair with specified algorithm and parameters
 */
export const postKeys = <ThrowOnError extends boolean = false>(options: Options<PostKeysData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostKeysResponse, PostKeysError, ThrowOnError>({
        url: '/keys',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all keys
 * Get all keys with their certificates and metadata
 */
export const getKeysAll = <ThrowOnError extends boolean = false>(options?: Options<GetKeysAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetKeysAllResponse, GetKeysAllError, ThrowOnError>({
        url: '/keys/all',
        ...options
    });
};

/**
 * Filter keys by algorithm and curve
 * Get keys filtered by algorithm type and/or curve type
 */
export const getKeysFilter = <ThrowOnError extends boolean = false>(options?: Options<GetKeysFilterData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetKeysFilterResponse, GetKeysFilterError, ThrowOnError>({
        url: '/keys/filter',
        ...options
    });
};

/**
 * Delete a key
 * Delete a specific key by ID
 */
export const deleteKeysById = <ThrowOnError extends boolean = false>(options: Options<DeleteKeysByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, DeleteKeysByIdError, ThrowOnError>({
        url: '/keys/{id}',
        ...options
    });
};

/**
 * Get a specific key by ID
 * Get detailed information about a specific key
 */
export const getKeysById = <ThrowOnError extends boolean = false>(options: Options<GetKeysByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetKeysByIdResponse, GetKeysByIdError, ThrowOnError>({
        url: '/keys/{id}',
        ...options
    });
};

/**
 * Sign a certificate
 * Sign a certificate for a key using a CA key
 */
export const postKeysByKeyIdSign = <ThrowOnError extends boolean = false>(options: Options<PostKeysByKeyIdSignData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostKeysByKeyIdSignResponse, PostKeysByKeyIdSignError, ThrowOnError>({
        url: '/keys/{keyID}/sign',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Besu networks
 * Get a paginated list of Besu networks
 */
export const getNetworksBesu = <ThrowOnError extends boolean = false>(options?: Options<GetNetworksBesuData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNetworksBesuResponse, GetNetworksBesuError, ThrowOnError>({
        url: '/networks/besu',
        ...options
    });
};

/**
 * Create a new Besu network
 * Create a new Besu network with the specified configuration
 */
export const postNetworksBesu = <ThrowOnError extends boolean = false>(options: Options<PostNetworksBesuData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNetworksBesuResponse, PostNetworksBesuError, ThrowOnError>({
        url: '/networks/besu',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Import a Besu network
 * Import an existing Besu network using its genesis file
 */
export const postNetworksBesuImport = <ThrowOnError extends boolean = false>(options: Options<PostNetworksBesuImportData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNetworksBesuImportResponse, PostNetworksBesuImportError, ThrowOnError>({
        url: '/networks/besu/import',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a Besu network
 * Delete an existing Besu network and all its resources
 */
export const deleteNetworksBesuById = <ThrowOnError extends boolean = false>(options: Options<DeleteNetworksBesuByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, DeleteNetworksBesuByIdError, ThrowOnError>({
        url: '/networks/besu/{id}',
        ...options
    });
};

/**
 * Get a Besu network by ID
 * Get details of a specific Besu network
 */
export const getNetworksBesuById = <ThrowOnError extends boolean = false>(options: Options<GetNetworksBesuByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNetworksBesuByIdResponse, GetNetworksBesuByIdError, ThrowOnError>({
        url: '/networks/besu/{id}',
        ...options
    });
};

/**
 * List Fabric networks
 * Get a paginated list of Fabric networks
 */
export const getNetworksFabric = <ThrowOnError extends boolean = false>(options?: Options<GetNetworksFabricData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNetworksFabricResponse, GetNetworksFabricError, ThrowOnError>({
        url: '/networks/fabric',
        ...options
    });
};

/**
 * Create a new Fabric network
 * Create a new Hyperledger Fabric network with the specified configuration
 */
export const postNetworksFabric = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNetworksFabricResponse, PostNetworksFabricError, ThrowOnError>({
        url: '/networks/fabric',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a Fabric network by slug
 * Get details of a specific Fabric network using its slug
 */
export const getNetworksFabricByNameByName = <ThrowOnError extends boolean = false>(options: Options<GetNetworksFabricByNameByNameData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNetworksFabricByNameByNameResponse, GetNetworksFabricByNameByNameError, ThrowOnError>({
        url: '/networks/fabric/by-name/{name}',
        ...options
    });
};

/**
 * Import a Fabric network
 * Import an existing Fabric network using its genesis block
 */
export const postNetworksFabricImport = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricImportData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNetworksFabricImportResponse, PostNetworksFabricImportError, ThrowOnError>({
        url: '/networks/fabric/import',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Import a Fabric network with organization
 * Import an existing Fabric network using organization details
 */
export const postNetworksFabricImportWithOrg = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricImportWithOrgData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNetworksFabricImportWithOrgResponse, PostNetworksFabricImportWithOrgError, ThrowOnError>({
        url: '/networks/fabric/import-with-org',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a Fabric network
 * Delete an existing Fabric network and all its resources
 */
export const deleteNetworksFabricById = <ThrowOnError extends boolean = false>(options: Options<DeleteNetworksFabricByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, DeleteNetworksFabricByIdError, ThrowOnError>({
        url: '/networks/fabric/{id}',
        ...options
    });
};

/**
 * Get a Fabric network by ID
 * Get details of a specific Fabric network
 */
export const getNetworksFabricById = <ThrowOnError extends boolean = false>(options: Options<GetNetworksFabricByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNetworksFabricByIdResponse, GetNetworksFabricByIdError, ThrowOnError>({
        url: '/networks/fabric/{id}',
        ...options
    });
};

/**
 * Set anchor peers for an organization
 * Set the anchor peers for an organization in a Fabric network
 */
export const postNetworksFabricByIdAnchorPeers = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricByIdAnchorPeersData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNetworksFabricByIdAnchorPeersResponse, PostNetworksFabricByIdAnchorPeersError, ThrowOnError>({
        url: '/networks/fabric/{id}/anchor-peers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Fabric network channel configuration
 * Retrieve the channel configuration for a Fabric network
 */
export const getNetworksFabricByIdChannelConfig = <ThrowOnError extends boolean = false>(options: Options<GetNetworksFabricByIdChannelConfigData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNetworksFabricByIdChannelConfigResponse, GetNetworksFabricByIdChannelConfigError, ThrowOnError>({
        url: '/networks/fabric/{id}/channel-config',
        ...options
    });
};

/**
 * Get Fabric network current channel configuration
 * Retrieve the current channel configuration for a Fabric network
 */
export const getNetworksFabricByIdCurrentChannelConfig = <ThrowOnError extends boolean = false>(options: Options<GetNetworksFabricByIdCurrentChannelConfigData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNetworksFabricByIdCurrentChannelConfigResponse, GetNetworksFabricByIdCurrentChannelConfigError, ThrowOnError>({
        url: '/networks/fabric/{id}/current-channel-config',
        ...options
    });
};

/**
 * Get network nodes
 * Get all nodes associated with a network
 */
export const getNetworksFabricByIdNodes = <ThrowOnError extends boolean = false>(options: Options<GetNetworksFabricByIdNodesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNetworksFabricByIdNodesResponse, GetNetworksFabricByIdNodesError, ThrowOnError>({
        url: '/networks/fabric/{id}/nodes',
        ...options
    });
};

/**
 * Add node to network
 * Add a node (peer or orderer) to an existing network
 */
export const postNetworksFabricByIdNodes = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricByIdNodesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNetworksFabricByIdNodesResponse, PostNetworksFabricByIdNodesError, ThrowOnError>({
        url: '/networks/fabric/{id}/nodes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Remove orderer from Fabric network
 * Remove an orderer node from an existing Fabric network
 */
export const deleteNetworksFabricByIdOrderersByOrdererId = <ThrowOnError extends boolean = false>(options: Options<DeleteNetworksFabricByIdOrderersByOrdererIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteNetworksFabricByIdOrderersByOrdererIdResponse, DeleteNetworksFabricByIdOrderersByOrdererIdError, ThrowOnError>({
        url: '/networks/fabric/{id}/orderers/{ordererId}',
        ...options
    });
};

/**
 * Join orderer to Fabric network
 * Join an orderer node to an existing Fabric network
 */
export const postNetworksFabricByIdOrderersByOrdererIdJoin = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricByIdOrderersByOrdererIdJoinData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNetworksFabricByIdOrderersByOrdererIdJoinResponse, PostNetworksFabricByIdOrderersByOrdererIdJoinError, ThrowOnError>({
        url: '/networks/fabric/{id}/orderers/{ordererId}/join',
        ...options
    });
};

/**
 * Unjoin orderer from Fabric network
 * Remove an orderer node from a channel but keep it in the network
 */
export const postNetworksFabricByIdOrderersByOrdererIdUnjoin = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricByIdOrderersByOrdererIdUnjoinData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNetworksFabricByIdOrderersByOrdererIdUnjoinResponse, PostNetworksFabricByIdOrderersByOrdererIdUnjoinError, ThrowOnError>({
        url: '/networks/fabric/{id}/orderers/{ordererId}/unjoin',
        ...options
    });
};

/**
 * Get network configuration
 * Get the network configuration as YAML
 */
export const getNetworksFabricByIdOrganizationsByOrgIdConfig = <ThrowOnError extends boolean = false>(options: Options<GetNetworksFabricByIdOrganizationsByOrgIdConfigData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNetworksFabricByIdOrganizationsByOrgIdConfigResponse, GetNetworksFabricByIdOrganizationsByOrgIdConfigError, ThrowOnError>({
        url: '/networks/fabric/{id}/organizations/{orgId}/config',
        ...options
    });
};

/**
 * Remove peer from Fabric network
 * Remove a peer node from an existing Fabric network
 */
export const deleteNetworksFabricByIdPeersByPeerId = <ThrowOnError extends boolean = false>(options: Options<DeleteNetworksFabricByIdPeersByPeerIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteNetworksFabricByIdPeersByPeerIdResponse, DeleteNetworksFabricByIdPeersByPeerIdError, ThrowOnError>({
        url: '/networks/fabric/{id}/peers/{peerId}',
        ...options
    });
};

/**
 * Join peer to Fabric network
 * Join a peer node to an existing Fabric network
 */
export const postNetworksFabricByIdPeersByPeerIdJoin = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricByIdPeersByPeerIdJoinData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNetworksFabricByIdPeersByPeerIdJoinResponse, PostNetworksFabricByIdPeersByPeerIdJoinError, ThrowOnError>({
        url: '/networks/fabric/{id}/peers/{peerId}/join',
        ...options
    });
};

/**
 * Unjoin peer from Fabric network
 * Remove a peer node from a channel but keep it in the network
 */
export const postNetworksFabricByIdPeersByPeerIdUnjoin = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricByIdPeersByPeerIdUnjoinData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNetworksFabricByIdPeersByPeerIdUnjoinResponse, PostNetworksFabricByIdPeersByPeerIdUnjoinError, ThrowOnError>({
        url: '/networks/fabric/{id}/peers/{peerId}/unjoin',
        ...options
    });
};

/**
 * Reload network config block
 * Reloads the current config block for a network
 */
export const postNetworksFabricByIdReloadBlock = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricByIdReloadBlockData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNetworksFabricByIdReloadBlockResponse, PostNetworksFabricByIdReloadBlockError, ThrowOnError>({
        url: '/networks/fabric/{id}/reload-block',
        ...options
    });
};

/**
 * List all nodes
 * Get a paginated list of nodes with optional platform filter
 */
export const getNodes = <ThrowOnError extends boolean = false>(options?: Options<GetNodesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNodesResponse, GetNodesError, ThrowOnError>({
        url: '/nodes',
        ...options
    });
};

/**
 * Create a new node
 * Create a new node with the specified configuration
 */
export const postNodes = <ThrowOnError extends boolean = false>(options: Options<PostNodesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNodesResponse, PostNodesError, ThrowOnError>({
        url: '/nodes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get default values for Besu node
 * Get default configuration values for a Besu node
 */
export const getNodesDefaultsBesuNode = <ThrowOnError extends boolean = false>(options?: Options<GetNodesDefaultsBesuNodeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNodesDefaultsBesuNodeResponse, GetNodesDefaultsBesuNodeError, ThrowOnError>({
        url: '/nodes/defaults/besu-node',
        ...options
    });
};

/**
 * Get default values for multiple Fabric nodes
 * Get default configuration values for multiple Fabric nodes
 */
export const getNodesDefaultsFabric = <ThrowOnError extends boolean = false>(options?: Options<GetNodesDefaultsFabricData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNodesDefaultsFabricResponse, GetNodesDefaultsFabricError, ThrowOnError>({
        url: '/nodes/defaults/fabric',
        ...options
    });
};

/**
 * Get default values for Fabric orderer node
 * Get default configuration values for a Fabric orderer node
 */
export const getNodesDefaultsFabricOrderer = <ThrowOnError extends boolean = false>(options?: Options<GetNodesDefaultsFabricOrdererData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNodesDefaultsFabricOrdererResponse, GetNodesDefaultsFabricOrdererError, ThrowOnError>({
        url: '/nodes/defaults/fabric-orderer',
        ...options
    });
};

/**
 * Get default values for Fabric peer node
 * Get default configuration values for a Fabric peer node
 */
export const getNodesDefaultsFabricPeer = <ThrowOnError extends boolean = false>(options?: Options<GetNodesDefaultsFabricPeerData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNodesDefaultsFabricPeerResponse, GetNodesDefaultsFabricPeerError, ThrowOnError>({
        url: '/nodes/defaults/fabric-peer',
        ...options
    });
};

/**
 * List nodes by platform
 * Get a paginated list of nodes filtered by blockchain platform
 */
export const getNodesPlatformByPlatform = <ThrowOnError extends boolean = false>(options: Options<GetNodesPlatformByPlatformData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNodesPlatformByPlatformResponse, GetNodesPlatformByPlatformError, ThrowOnError>({
        url: '/nodes/platform/{platform}',
        ...options
    });
};

/**
 * Delete a node
 * Delete a node by ID
 */
export const deleteNodesById = <ThrowOnError extends boolean = false>(options: Options<DeleteNodesByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, DeleteNodesByIdError, ThrowOnError>({
        url: '/nodes/{id}',
        ...options
    });
};

/**
 * Get a node
 * Get a node by ID
 */
export const getNodesById = <ThrowOnError extends boolean = false>(options: Options<GetNodesByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNodesByIdResponse, GetNodesByIdError, ThrowOnError>({
        url: '/nodes/{id}',
        ...options
    });
};

/**
 * Get node events
 * Get a paginated list of events for a specific node
 */
export const getNodesByIdEvents = <ThrowOnError extends boolean = false>(options: Options<GetNodesByIdEventsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNodesByIdEventsResponse, GetNodesByIdEventsError, ThrowOnError>({
        url: '/nodes/{id}/events',
        ...options
    });
};

/**
 * Tail node logs
 * Stream logs from a specific node
 */
export const getNodesByIdLogs = <ThrowOnError extends boolean = false>(options: Options<GetNodesByIdLogsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNodesByIdLogsResponse, GetNodesByIdLogsError, ThrowOnError>({
        url: '/nodes/{id}/logs',
        ...options
    });
};

/**
 * Restart a node
 * Restart a node by ID (stops and starts the node)
 */
export const postNodesByIdRestart = <ThrowOnError extends boolean = false>(options: Options<PostNodesByIdRestartData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNodesByIdRestartResponse, PostNodesByIdRestartError, ThrowOnError>({
        url: '/nodes/{id}/restart',
        ...options
    });
};

/**
 * Start a node
 * Start a node by ID
 */
export const postNodesByIdStart = <ThrowOnError extends boolean = false>(options: Options<PostNodesByIdStartData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNodesByIdStartResponse, PostNodesByIdStartError, ThrowOnError>({
        url: '/nodes/{id}/start',
        ...options
    });
};

/**
 * Stop a node
 * Stop a node by ID
 */
export const postNodesByIdStop = <ThrowOnError extends boolean = false>(options: Options<PostNodesByIdStopData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNodesByIdStopResponse, PostNodesByIdStopError, ThrowOnError>({
        url: '/nodes/{id}/stop',
        ...options
    });
};

/**
 * List notification providers
 * Get a list of all notification providers
 */
export const getNotificationsProviders = <ThrowOnError extends boolean = false>(options?: Options<GetNotificationsProvidersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNotificationsProvidersResponse, GetNotificationsProvidersError, ThrowOnError>({
        url: '/notifications/providers',
        ...options
    });
};

/**
 * Create a notification provider
 * Create a new notification provider with the specified configuration
 */
export const postNotificationsProviders = <ThrowOnError extends boolean = false>(options: Options<PostNotificationsProvidersData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNotificationsProvidersResponse, PostNotificationsProvidersError, ThrowOnError>({
        url: '/notifications/providers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a notification provider
 * Delete a notification provider
 */
export const deleteNotificationsProvidersById = <ThrowOnError extends boolean = false>(options: Options<DeleteNotificationsProvidersByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, DeleteNotificationsProvidersByIdError, ThrowOnError>({
        url: '/notifications/providers/{id}',
        ...options
    });
};

/**
 * Get a notification provider
 * Get detailed information about a specific notification provider
 */
export const getNotificationsProvidersById = <ThrowOnError extends boolean = false>(options: Options<GetNotificationsProvidersByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNotificationsProvidersByIdResponse, GetNotificationsProvidersByIdError, ThrowOnError>({
        url: '/notifications/providers/{id}',
        ...options
    });
};

/**
 * Update a notification provider
 * Update an existing notification provider with new configuration
 */
export const putNotificationsProvidersById = <ThrowOnError extends boolean = false>(options: Options<PutNotificationsProvidersByIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutNotificationsProvidersByIdResponse, PutNotificationsProvidersByIdError, ThrowOnError>({
        url: '/notifications/providers/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Test a notification provider
 * Test a notification provider
 */
export const postNotificationsProvidersByIdTest = <ThrowOnError extends boolean = false>(options: Options<PostNotificationsProvidersByIdTestData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNotificationsProvidersByIdTestResponse, PostNotificationsProvidersByIdTestError, ThrowOnError>({
        url: '/notifications/providers/{id}/test',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all Fabric organizations
 * Get a list of all Fabric organizations
 */
export const getOrganizations = <ThrowOnError extends boolean = false>(options?: Options<GetOrganizationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOrganizationsResponse, GetOrganizationsError, ThrowOnError>({
        url: '/organizations',
        ...options
    });
};

/**
 * Create a new Fabric organization
 * Create a new Fabric organization with the specified configuration
 */
export const postOrganizations = <ThrowOnError extends boolean = false>(options: Options<PostOrganizationsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostOrganizationsResponse, PostOrganizationsError, ThrowOnError>({
        url: '/organizations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a Fabric organization by MSP ID
 * Get a Fabric organization by MSP ID
 */
export const getOrganizationsByMspidByMspid = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsByMspidByMspidData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOrganizationsByMspidByMspidResponse, GetOrganizationsByMspidByMspidError, ThrowOnError>({
        url: '/organizations/by-mspid/{mspid}',
        ...options
    });
};

/**
 * Delete a Fabric organization
 * Delete a Fabric organization by ID
 */
export const deleteOrganizationsById = <ThrowOnError extends boolean = false>(options: Options<DeleteOrganizationsByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, DeleteOrganizationsByIdError, ThrowOnError>({
        url: '/organizations/{id}',
        ...options
    });
};

/**
 * Get a Fabric organization
 * Get a Fabric organization by ID
 */
export const getOrganizationsById = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOrganizationsByIdResponse, GetOrganizationsByIdError, ThrowOnError>({
        url: '/organizations/{id}',
        ...options
    });
};

/**
 * Update a Fabric organization
 * Update an existing Fabric organization
 */
export const putOrganizationsById = <ThrowOnError extends boolean = false>(options: Options<PutOrganizationsByIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutOrganizationsByIdResponse, PutOrganizationsByIdError, ThrowOnError>({
        url: '/organizations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};