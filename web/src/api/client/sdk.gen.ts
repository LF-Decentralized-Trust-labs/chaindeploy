// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetAiBoilerplatesData, GetAiBoilerplatesResponses, GetAiBoilerplatesErrors, GetAiModelsData, GetAiModelsResponses, GetAiModelsErrors, PostAiByProjectIdChatData, PostAiByProjectIdChatResponses, PostAiByProjectIdChatErrors, GetAiByProjectIdConversationsData, GetAiByProjectIdConversationsResponses, GetAiByProjectIdConversationsErrors, PostAiByProjectIdConversationsData, PostAiByProjectIdConversationsResponses, PostAiByProjectIdConversationsErrors, GetAiByProjectIdConversationsByConversationIdData, GetAiByProjectIdConversationsByConversationIdResponses, GetAiByProjectIdConversationsByConversationIdErrors, GetAiByProjectIdConversationsByConversationIdExportData, GetAiByProjectIdConversationsByConversationIdExportResponses, GetAiByProjectIdConversationsByConversationIdExportErrors, PostAiByProjectIdConversationsByConversationIdSummarizeData, PostAiByProjectIdConversationsByConversationIdSummarizeResponses, PostAiByProjectIdConversationsByConversationIdSummarizeErrors, GetAuditLogsData, GetAuditLogsResponses, GetAuditLogsErrors, GetAuditLogsByIdData, GetAuditLogsByIdResponses, GetAuditLogsByIdErrors, PostAuthChangePasswordData, PostAuthChangePasswordResponses, PostAuthChangePasswordErrors, PostAuthLoginData, PostAuthLoginResponses, PostAuthLoginErrors, PostAuthLogoutData, PostAuthLogoutResponses, PostAuthLogoutErrors, GetAuthMeData, GetAuthMeResponses, GetAuthMeErrors, GetBackupsData, GetBackupsResponses, GetBackupsErrors, PostBackupsData, PostBackupsResponses, PostBackupsErrors, GetBackupsSchedulesData, GetBackupsSchedulesResponses, GetBackupsSchedulesErrors, PostBackupsSchedulesData, PostBackupsSchedulesResponses, PostBackupsSchedulesErrors, DeleteBackupsSchedulesByIdData, DeleteBackupsSchedulesByIdResponses, DeleteBackupsSchedulesByIdErrors, GetBackupsSchedulesByIdData, GetBackupsSchedulesByIdResponses, GetBackupsSchedulesByIdErrors, PutBackupsSchedulesByIdData, PutBackupsSchedulesByIdResponses, PutBackupsSchedulesByIdErrors, PutBackupsSchedulesByIdDisableData, PutBackupsSchedulesByIdDisableResponses, PutBackupsSchedulesByIdDisableErrors, PutBackupsSchedulesByIdEnableData, PutBackupsSchedulesByIdEnableResponses, PutBackupsSchedulesByIdEnableErrors, GetBackupsTargetsData, GetBackupsTargetsResponses, GetBackupsTargetsErrors, PostBackupsTargetsData, PostBackupsTargetsResponses, PostBackupsTargetsErrors, DeleteBackupsTargetsByIdData, DeleteBackupsTargetsByIdResponses, DeleteBackupsTargetsByIdErrors, GetBackupsTargetsByIdData, GetBackupsTargetsByIdResponses, GetBackupsTargetsByIdErrors, PutBackupsTargetsByIdData, PutBackupsTargetsByIdResponses, PutBackupsTargetsByIdErrors, DeleteBackupsByIdData, DeleteBackupsByIdResponses, DeleteBackupsByIdErrors, GetBackupsByIdData, GetBackupsByIdResponses, GetBackupsByIdErrors, GetChaincodeProjectsData, GetChaincodeProjectsResponses, GetChaincodeProjectsErrors, PostChaincodeProjectsData, PostChaincodeProjectsResponses, PostChaincodeProjectsErrors, DeleteChaincodeProjectsByIdData, DeleteChaincodeProjectsByIdResponses, DeleteChaincodeProjectsByIdErrors, GetChaincodeProjectsByIdData, GetChaincodeProjectsByIdResponses, GetChaincodeProjectsByIdErrors, GetChaincodeProjectsByIdCommitsData, GetChaincodeProjectsByIdCommitsResponses, GetChaincodeProjectsByIdCommitsErrors, GetChaincodeProjectsByIdCommitsByCommitHashData, GetChaincodeProjectsByIdCommitsByCommitHashResponses, GetChaincodeProjectsByIdCommitsByCommitHashErrors, GetChaincodeProjectsByIdDiffData, GetChaincodeProjectsByIdDiffResponses, GetChaincodeProjectsByIdDiffErrors, GetChaincodeProjectsByIdDownloadData, GetChaincodeProjectsByIdDownloadResponses, GetChaincodeProjectsByIdDownloadErrors, PutChaincodeProjectsByIdEndorsementPolicyData, PutChaincodeProjectsByIdEndorsementPolicyResponses, PutChaincodeProjectsByIdEndorsementPolicyErrors, GetChaincodeProjectsByIdFileAtCommitData, GetChaincodeProjectsByIdFileAtCommitResponses, GetChaincodeProjectsByIdFileAtCommitErrors, PostChaincodeProjectsByIdInvokeData, PostChaincodeProjectsByIdInvokeResponses, PostChaincodeProjectsByIdInvokeErrors, GetChaincodeProjectsByIdLogsData, GetChaincodeProjectsByIdLogsResponses, GetChaincodeProjectsByIdLogsErrors, GetChaincodeProjectsByIdLogsStreamData, GetChaincodeProjectsByIdLogsStreamResponses, GetChaincodeProjectsByIdLogsStreamErrors, GetChaincodeProjectsByIdMetadataData, GetChaincodeProjectsByIdMetadataResponses, GetChaincodeProjectsByIdMetadataErrors, PostChaincodeProjectsByIdQueryData, PostChaincodeProjectsByIdQueryResponses, PostChaincodeProjectsByIdQueryErrors, PostChaincodeProjectsByIdStartData, PostChaincodeProjectsByIdStartResponses, PostChaincodeProjectsByIdStartErrors, PostChaincodeProjectsByIdStopData, PostChaincodeProjectsByIdStopResponses, PostChaincodeProjectsByIdStopErrors, PostDummyData, PostDummyResponses, GetKeyProvidersData, GetKeyProvidersResponses, GetKeyProvidersErrors, PostKeyProvidersData, PostKeyProvidersResponses, PostKeyProvidersErrors, DeleteKeyProvidersByIdData, DeleteKeyProvidersByIdResponses, DeleteKeyProvidersByIdErrors, GetKeyProvidersByIdData, GetKeyProvidersByIdResponses, GetKeyProvidersByIdErrors, GetKeysData, GetKeysResponses, GetKeysErrors, PostKeysData, PostKeysResponses, PostKeysErrors, GetKeysAllData, GetKeysAllResponses, GetKeysAllErrors, GetKeysFilterData, GetKeysFilterResponses, GetKeysFilterErrors, DeleteKeysByIdData, DeleteKeysByIdResponses, DeleteKeysByIdErrors, GetKeysByIdData, GetKeysByIdResponses, GetKeysByIdErrors, PostKeysByKeyIdSignData, PostKeysByKeyIdSignResponses, PostKeysByKeyIdSignErrors, PostMetricsDeployData, PostMetricsDeployResponses, PostMetricsDeployErrors, GetMetricsNodeByIdData, GetMetricsNodeByIdResponses, GetMetricsNodeByIdErrors, GetMetricsNodeByIdLabelByLabelValuesData, GetMetricsNodeByIdLabelByLabelValuesResponses, GetMetricsNodeByIdLabelByLabelValuesErrors, PostMetricsNodeByIdQueryData, PostMetricsNodeByIdQueryResponses, PostMetricsNodeByIdQueryErrors, GetMetricsNodeByIdRangeData, GetMetricsNodeByIdRangeResponses, GetMetricsNodeByIdRangeErrors, PostMetricsReloadData, PostMetricsReloadResponses, PostMetricsReloadErrors, GetMetricsStatusData, GetMetricsStatusResponses, GetMetricsStatusErrors, PostMetricsUndeployData, PostMetricsUndeployResponses, PostMetricsUndeployErrors, GetNetworksBesuData, GetNetworksBesuResponses, GetNetworksBesuErrors, PostNetworksBesuData, PostNetworksBesuResponses, PostNetworksBesuErrors, PostNetworksBesuImportData, PostNetworksBesuImportResponses, PostNetworksBesuImportErrors, DeleteNetworksBesuByIdData, DeleteNetworksBesuByIdResponses, DeleteNetworksBesuByIdErrors, GetNetworksBesuByIdData, GetNetworksBesuByIdResponses, GetNetworksBesuByIdErrors, GetNetworksBesuByIdMapData, GetNetworksBesuByIdMapResponses, GetNetworksBesuByIdMapErrors, GetNetworksFabricData, GetNetworksFabricResponses, GetNetworksFabricErrors, PostNetworksFabricData, PostNetworksFabricResponses, PostNetworksFabricErrors, GetNetworksFabricByNameByNameData, GetNetworksFabricByNameByNameResponses, GetNetworksFabricByNameByNameErrors, PostNetworksFabricImportData, PostNetworksFabricImportResponses, PostNetworksFabricImportErrors, PostNetworksFabricImportWithOrgData, PostNetworksFabricImportWithOrgResponses, PostNetworksFabricImportWithOrgErrors, DeleteNetworksFabricByIdData, DeleteNetworksFabricByIdResponses, DeleteNetworksFabricByIdErrors, GetNetworksFabricByIdData, GetNetworksFabricByIdResponses, GetNetworksFabricByIdErrors, PostNetworksFabricByIdAnchorPeersData, PostNetworksFabricByIdAnchorPeersResponses, PostNetworksFabricByIdAnchorPeersErrors, GetNetworksFabricByIdBlocksData, GetNetworksFabricByIdBlocksResponses, GetNetworksFabricByIdBlocksErrors, GetNetworksFabricByIdBlocksByBlockNumData, GetNetworksFabricByIdBlocksByBlockNumResponses, GetNetworksFabricByIdBlocksByBlockNumErrors, GetNetworksFabricByIdChannelConfigData, GetNetworksFabricByIdChannelConfigResponses, GetNetworksFabricByIdChannelConfigErrors, GetNetworksFabricByIdCurrentChannelConfigData, GetNetworksFabricByIdCurrentChannelConfigResponses, GetNetworksFabricByIdCurrentChannelConfigErrors, GetNetworksFabricByIdInfoData, GetNetworksFabricByIdInfoResponses, GetNetworksFabricByIdInfoErrors, GetNetworksFabricByIdMapData, GetNetworksFabricByIdMapResponses, GetNetworksFabricByIdMapErrors, GetNetworksFabricByIdNodesData, GetNetworksFabricByIdNodesResponses, GetNetworksFabricByIdNodesErrors, PostNetworksFabricByIdNodesData, PostNetworksFabricByIdNodesResponses, PostNetworksFabricByIdNodesErrors, DeleteNetworksFabricByIdOrderersByOrdererIdData, DeleteNetworksFabricByIdOrderersByOrdererIdResponses, DeleteNetworksFabricByIdOrderersByOrdererIdErrors, PostNetworksFabricByIdOrderersByOrdererIdJoinData, PostNetworksFabricByIdOrderersByOrdererIdJoinResponses, PostNetworksFabricByIdOrderersByOrdererIdJoinErrors, PostNetworksFabricByIdOrderersByOrdererIdUnjoinData, PostNetworksFabricByIdOrderersByOrdererIdUnjoinResponses, PostNetworksFabricByIdOrderersByOrdererIdUnjoinErrors, PostNetworksFabricByIdOrganizationCrlData, PostNetworksFabricByIdOrganizationCrlResponses, PostNetworksFabricByIdOrganizationCrlErrors, GetNetworksFabricByIdOrganizationsByOrgIdConfigData, GetNetworksFabricByIdOrganizationsByOrgIdConfigResponses, GetNetworksFabricByIdOrganizationsByOrgIdConfigErrors, DeleteNetworksFabricByIdPeersByPeerIdData, DeleteNetworksFabricByIdPeersByPeerIdResponses, DeleteNetworksFabricByIdPeersByPeerIdErrors, PostNetworksFabricByIdPeersByPeerIdJoinData, PostNetworksFabricByIdPeersByPeerIdJoinResponses, PostNetworksFabricByIdPeersByPeerIdJoinErrors, PostNetworksFabricByIdPeersByPeerIdUnjoinData, PostNetworksFabricByIdPeersByPeerIdUnjoinResponses, PostNetworksFabricByIdPeersByPeerIdUnjoinErrors, PostNetworksFabricByIdReloadBlockData, PostNetworksFabricByIdReloadBlockResponses, PostNetworksFabricByIdReloadBlockErrors, GetNetworksFabricByIdTransactionsByTxIdData, GetNetworksFabricByIdTransactionsByTxIdResponses, GetNetworksFabricByIdTransactionsByTxIdErrors, PostNetworksFabricByIdUpdateConfigData, PostNetworksFabricByIdUpdateConfigResponses, PostNetworksFabricByIdUpdateConfigErrors, GetNodesData, GetNodesResponses, GetNodesErrors, PostNodesData, PostNodesResponses, PostNodesErrors, GetNodesDefaultsBesuNodeData, GetNodesDefaultsBesuNodeResponses, GetNodesDefaultsBesuNodeErrors, GetNodesDefaultsFabricData, GetNodesDefaultsFabricResponses, GetNodesDefaultsFabricErrors, GetNodesDefaultsFabricOrdererData, GetNodesDefaultsFabricOrdererResponses, GetNodesDefaultsFabricOrdererErrors, GetNodesDefaultsFabricPeerData, GetNodesDefaultsFabricPeerResponses, GetNodesDefaultsFabricPeerErrors, GetNodesPlatformByPlatformData, GetNodesPlatformByPlatformResponses, GetNodesPlatformByPlatformErrors, DeleteNodesByIdData, DeleteNodesByIdResponses, DeleteNodesByIdErrors, GetNodesByIdData, GetNodesByIdResponses, GetNodesByIdErrors, PutNodesByIdData, PutNodesByIdResponses, PutNodesByIdErrors, PostNodesByIdCertificatesRenewData, PostNodesByIdCertificatesRenewResponses, PostNodesByIdCertificatesRenewErrors, GetNodesByIdChannelsData, GetNodesByIdChannelsResponses, GetNodesByIdChannelsErrors, GetNodesByIdChannelsByChannelIdChaincodesData, GetNodesByIdChannelsByChannelIdChaincodesResponses, GetNodesByIdChannelsByChannelIdChaincodesErrors, GetNodesByIdEventsData, GetNodesByIdEventsResponses, GetNodesByIdEventsErrors, GetNodesByIdLogsData, GetNodesByIdLogsResponses, GetNodesByIdLogsErrors, PostNodesByIdRestartData, PostNodesByIdRestartResponses, PostNodesByIdRestartErrors, PostNodesByIdStartData, PostNodesByIdStartResponses, PostNodesByIdStartErrors, PostNodesByIdStopData, PostNodesByIdStopResponses, PostNodesByIdStopErrors, GetNotificationsProvidersData, GetNotificationsProvidersResponses, GetNotificationsProvidersErrors, PostNotificationsProvidersData, PostNotificationsProvidersResponses, PostNotificationsProvidersErrors, DeleteNotificationsProvidersByIdData, DeleteNotificationsProvidersByIdResponses, DeleteNotificationsProvidersByIdErrors, GetNotificationsProvidersByIdData, GetNotificationsProvidersByIdResponses, GetNotificationsProvidersByIdErrors, PutNotificationsProvidersByIdData, PutNotificationsProvidersByIdResponses, PutNotificationsProvidersByIdErrors, PostNotificationsProvidersByIdTestData, PostNotificationsProvidersByIdTestResponses, PostNotificationsProvidersByIdTestErrors, GetOrganizationsData, GetOrganizationsResponses, GetOrganizationsErrors, PostOrganizationsData, PostOrganizationsResponses, PostOrganizationsErrors, GetOrganizationsByMspidByMspidData, GetOrganizationsByMspidByMspidResponses, GetOrganizationsByMspidByMspidErrors, DeleteOrganizationsByIdData, DeleteOrganizationsByIdResponses, DeleteOrganizationsByIdErrors, GetOrganizationsByIdData, GetOrganizationsByIdResponses, GetOrganizationsByIdErrors, PutOrganizationsByIdData, PutOrganizationsByIdResponses, PutOrganizationsByIdErrors, GetOrganizationsByIdCrlData, GetOrganizationsByIdCrlResponses, GetOrganizationsByIdCrlErrors, PostOrganizationsByIdCrlRevokePemData, PostOrganizationsByIdCrlRevokePemResponses, PostOrganizationsByIdCrlRevokePemErrors, DeleteOrganizationsByIdCrlRevokeSerialData, DeleteOrganizationsByIdCrlRevokeSerialResponses, DeleteOrganizationsByIdCrlRevokeSerialErrors, PostOrganizationsByIdCrlRevokeSerialData, PostOrganizationsByIdCrlRevokeSerialResponses, PostOrganizationsByIdCrlRevokeSerialErrors, GetOrganizationsByIdKeysData, GetOrganizationsByIdKeysResponses, GetOrganizationsByIdKeysErrors, PostOrganizationsByIdKeysData, PostOrganizationsByIdKeysResponses, PostOrganizationsByIdKeysErrors, PostOrganizationsByIdKeysRenewData, PostOrganizationsByIdKeysRenewResponses, PostOrganizationsByIdKeysRenewErrors, DeleteOrganizationsByIdKeysByKeyIdData, DeleteOrganizationsByIdKeysByKeyIdResponses, DeleteOrganizationsByIdKeysByKeyIdErrors, GetOrganizationsByIdKeysByKeyIdData, GetOrganizationsByIdKeysByKeyIdResponses, GetOrganizationsByIdKeysByKeyIdErrors, GetOrganizationsByIdRevokedCertificatesData, GetOrganizationsByIdRevokedCertificatesResponses, GetOrganizationsByIdRevokedCertificatesErrors, GetPluginsData, GetPluginsResponses, GetPluginsErrors, PostPluginsData, PostPluginsResponses, PostPluginsErrors, GetPluginsAvailableData, GetPluginsAvailableResponses, GetPluginsAvailableErrors, PostPluginsAvailableRefreshData, PostPluginsAvailableRefreshResponses, PostPluginsAvailableRefreshErrors, DeletePluginsByNameData, DeletePluginsByNameResponses, DeletePluginsByNameErrors, GetPluginsByNameData, GetPluginsByNameResponses, GetPluginsByNameErrors, PutPluginsByNameData, PutPluginsByNameResponses, PutPluginsByNameErrors, PostPluginsByNameDeployData, PostPluginsByNameDeployResponses, PostPluginsByNameDeployErrors, GetPluginsByNameDeploymentStatusData, GetPluginsByNameDeploymentStatusResponses, GetPluginsByNameDeploymentStatusErrors, PostPluginsByNameResumeData, PostPluginsByNameResumeResponses, PostPluginsByNameResumeErrors, GetPluginsByNameServicesData, GetPluginsByNameServicesResponses, GetPluginsByNameServicesErrors, GetPluginsByNameStatusData, GetPluginsByNameStatusResponses, GetPluginsByNameStatusErrors, PostPluginsByNameStopData, PostPluginsByNameStopResponses, PostPluginsByNameStopErrors, PostProjectsByProjectIdDirsCreateData, PostProjectsByProjectIdDirsCreateResponses, PostProjectsByProjectIdDirsCreateErrors, DeleteProjectsByProjectIdDirsDeleteData, DeleteProjectsByProjectIdDirsDeleteResponses, DeleteProjectsByProjectIdDirsDeleteErrors, GetProjectsByProjectIdDirsListData, GetProjectsByProjectIdDirsListResponses, GetProjectsByProjectIdDirsListErrors, DeleteProjectsByProjectIdFilesDeleteData, DeleteProjectsByProjectIdFilesDeleteResponses, DeleteProjectsByProjectIdFilesDeleteErrors, GetProjectsByProjectIdFilesEntriesData, GetProjectsByProjectIdFilesEntriesResponses, GetProjectsByProjectIdFilesEntriesErrors, GetProjectsByProjectIdFilesListData, GetProjectsByProjectIdFilesListResponses, GetProjectsByProjectIdFilesListErrors, GetProjectsByProjectIdFilesReadData, GetProjectsByProjectIdFilesReadResponses, GetProjectsByProjectIdFilesReadErrors, PostProjectsByProjectIdFilesWriteData, PostProjectsByProjectIdFilesWriteResponses, PostProjectsByProjectIdFilesWriteErrors, PostScBesuDeployData, PostScBesuDeployResponses, PostScBesuDeployErrors, GetScFabricChaincodesData, GetScFabricChaincodesResponses, GetScFabricChaincodesErrors, PostScFabricChaincodesData, PostScFabricChaincodesResponses, PostScFabricChaincodesErrors, GetScFabricChaincodesByChaincodeIdDefinitionsData, GetScFabricChaincodesByChaincodeIdDefinitionsResponses, GetScFabricChaincodesByChaincodeIdDefinitionsErrors, PostScFabricChaincodesByChaincodeIdDefinitionsData, PostScFabricChaincodesByChaincodeIdDefinitionsResponses, PostScFabricChaincodesByChaincodeIdDefinitionsErrors, GetScFabricChaincodesByChaincodeIdDefinitionsByDefinitionIdData, GetScFabricChaincodesByChaincodeIdDefinitionsByDefinitionIdResponses, GetScFabricChaincodesByChaincodeIdDefinitionsByDefinitionIdErrors, PostScFabricChaincodesByChaincodeIdInvokeData, PostScFabricChaincodesByChaincodeIdInvokeResponses, PostScFabricChaincodesByChaincodeIdInvokeErrors, GetScFabricChaincodesByChaincodeIdMetadataData, GetScFabricChaincodesByChaincodeIdMetadataResponses, GetScFabricChaincodesByChaincodeIdMetadataErrors, PostScFabricChaincodesByChaincodeIdQueryData, PostScFabricChaincodesByChaincodeIdQueryResponses, PostScFabricChaincodesByChaincodeIdQueryErrors, DeleteScFabricChaincodesByIdData, DeleteScFabricChaincodesByIdResponses, DeleteScFabricChaincodesByIdErrors, GetScFabricChaincodesByIdData, GetScFabricChaincodesByIdResponses, GetScFabricChaincodesByIdErrors, DeleteScFabricDefinitionsByDefinitionIdData, DeleteScFabricDefinitionsByDefinitionIdResponses, DeleteScFabricDefinitionsByDefinitionIdErrors, PutScFabricDefinitionsByDefinitionIdData, PutScFabricDefinitionsByDefinitionIdResponses, PutScFabricDefinitionsByDefinitionIdErrors, PostScFabricDefinitionsByDefinitionIdApproveData, PostScFabricDefinitionsByDefinitionIdApproveResponses, PostScFabricDefinitionsByDefinitionIdApproveErrors, PostScFabricDefinitionsByDefinitionIdCommitData, PostScFabricDefinitionsByDefinitionIdCommitResponses, PostScFabricDefinitionsByDefinitionIdCommitErrors, PostScFabricDefinitionsByDefinitionIdDeployData, PostScFabricDefinitionsByDefinitionIdDeployResponses, PostScFabricDefinitionsByDefinitionIdDeployErrors, GetScFabricDefinitionsByDefinitionIdDockerInfoData, GetScFabricDefinitionsByDefinitionIdDockerInfoResponses, GetScFabricDefinitionsByDefinitionIdDockerInfoErrors, PostScFabricDefinitionsByDefinitionIdInstallData, PostScFabricDefinitionsByDefinitionIdInstallResponses, PostScFabricDefinitionsByDefinitionIdInstallErrors, GetScFabricDefinitionsByDefinitionIdTimelineData, GetScFabricDefinitionsByDefinitionIdTimelineResponses, GetScFabricDefinitionsByDefinitionIdTimelineErrors, PostScFabricDefinitionsByDefinitionIdUndeployData, PostScFabricDefinitionsByDefinitionIdUndeployResponses, PostScFabricDefinitionsByDefinitionIdUndeployErrors, PostScFabricDeployData, PostScFabricDeployResponses, PostScFabricDeployErrors, PostScFabricPeerByPeerIdChaincodeApproveData, PostScFabricPeerByPeerIdChaincodeApproveResponses, PostScFabricPeerByPeerIdChaincodeApproveErrors, PostScFabricPeerByPeerIdChaincodeCommitData, PostScFabricPeerByPeerIdChaincodeCommitResponses, PostScFabricPeerByPeerIdChaincodeCommitErrors, PostScFabricPeerByPeerIdChaincodeInstallData, PostScFabricPeerByPeerIdChaincodeInstallResponses, PostScFabricPeerByPeerIdChaincodeInstallErrors, GetScFabricPeerByPeerIdChaincodeSequenceData, GetScFabricPeerByPeerIdChaincodeSequenceResponses, GetScFabricPeerByPeerIdChaincodeSequenceErrors, GetSettingsData, GetSettingsResponses, PostSettingsData, PostSettingsResponses, GetUsersData, GetUsersResponses, GetUsersErrors, PostUsersData, PostUsersResponses, PostUsersErrors, DeleteUsersByIdData, DeleteUsersByIdResponses, DeleteUsersByIdErrors, GetUsersByIdData, GetUsersByIdResponses, GetUsersByIdErrors, PutUsersByIdData, PutUsersByIdResponses, PutUsersByIdErrors, PutUsersByIdPasswordData, PutUsersByIdPasswordResponses, PutUsersByIdPasswordErrors, PutUsersByIdRoleData, PutUsersByIdRoleResponses, PutUsersByIdRoleErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get available boilerplates
 * Returns a list of available boilerplates filtered by network platform
 */
export const getAiBoilerplates = <ThrowOnError extends boolean = false>(options: Options<GetAiBoilerplatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAiBoilerplatesResponses, GetAiBoilerplatesErrors, ThrowOnError>({
        url: '/ai/boilerplates',
        ...options
    });
};

/**
 * Get available AI models
 * Returns a list of available AI models for code generation
 */
export const getAiModels = <ThrowOnError extends boolean = false>(options?: Options<GetAiModelsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAiModelsResponses, GetAiModelsErrors, ThrowOnError>({
        url: '/ai/models',
        ...options
    });
};

/**
 * Chat with AI assistant
 * Stream a conversation with the AI assistant using Server-Sent Events (SSE)
 */
export const postAiByProjectIdChat = <ThrowOnError extends boolean = false>(options: Options<PostAiByProjectIdChatData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAiByProjectIdChatResponses, PostAiByProjectIdChatErrors, ThrowOnError>({
        url: '/ai/{projectId}/chat',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all conversations for a project
 * Returns a list of all chat conversations associated with a specific project
 */
export const getAiByProjectIdConversations = <ThrowOnError extends boolean = false>(options: Options<GetAiByProjectIdConversationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAiByProjectIdConversationsResponses, GetAiByProjectIdConversationsErrors, ThrowOnError>({
        url: '/ai/{projectId}/conversations',
        ...options
    });
};

/**
 * Create a new conversation for a project
 * Creates a new empty conversation for the specified project
 */
export const postAiByProjectIdConversations = <ThrowOnError extends boolean = false>(options: Options<PostAiByProjectIdConversationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAiByProjectIdConversationsResponses, PostAiByProjectIdConversationsErrors, ThrowOnError>({
        url: '/ai/{projectId}/conversations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get conversation messages
 * Get all messages in a conversation
 */
export const getAiByProjectIdConversationsByConversationId = <ThrowOnError extends boolean = false>(options: Options<GetAiByProjectIdConversationsByConversationIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAiByProjectIdConversationsByConversationIdResponses, GetAiByProjectIdConversationsByConversationIdErrors, ThrowOnError>({
        url: '/ai/{projectId}/conversations/{conversationId}',
        ...options
    });
};

/**
 * Get conversation detail
 * Get detailed information about a conversation including all messages and metadata
 */
export const getAiByProjectIdConversationsByConversationIdExport = <ThrowOnError extends boolean = false>(options: Options<GetAiByProjectIdConversationsByConversationIdExportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAiByProjectIdConversationsByConversationIdExportResponses, GetAiByProjectIdConversationsByConversationIdExportErrors, ThrowOnError>({
        url: '/ai/{projectId}/conversations/{conversationId}/export',
        ...options
    });
};

/**
 * Create a new conversation from an existing one with a summary
 * Summarizes an existing conversation and starts a new one with a summary message
 */
export const postAiByProjectIdConversationsByConversationIdSummarize = <ThrowOnError extends boolean = false>(options: Options<PostAiByProjectIdConversationsByConversationIdSummarizeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAiByProjectIdConversationsByConversationIdSummarizeResponses, PostAiByProjectIdConversationsByConversationIdSummarizeErrors, ThrowOnError>({
        url: '/ai/{projectId}/conversations/{conversationId}/summarize',
        ...options
    });
};

/**
 * List audit logs
 * Retrieves a paginated list of audit logs with optional filters
 */
export const getAuditLogs = <ThrowOnError extends boolean = false>(options?: Options<GetAuditLogsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAuditLogsResponses, GetAuditLogsErrors, ThrowOnError>({
        url: '/audit/logs',
        ...options
    });
};

/**
 * Get audit log
 * Retrieves a specific audit log by ID
 */
export const getAuditLogsById = <ThrowOnError extends boolean = false>(options: Options<GetAuditLogsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAuditLogsByIdResponses, GetAuditLogsByIdErrors, ThrowOnError>({
        url: '/audit/logs/{id}',
        ...options
    });
};

/**
 * Change own password
 * Allows a user to change their own password
 */
export const postAuthChangePassword = <ThrowOnError extends boolean = false>(options: Options<PostAuthChangePasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAuthChangePasswordResponses, PostAuthChangePasswordErrors, ThrowOnError>({
        url: '/auth/change-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Login user
 * Authenticates a user and returns a session cookie
 */
export const postAuthLogin = <ThrowOnError extends boolean = false>(options: Options<PostAuthLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAuthLoginResponses, PostAuthLoginErrors, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logout user
 * Invalidates the current session and clears the session cookie
 */
export const postAuthLogout = <ThrowOnError extends boolean = false>(options?: Options<PostAuthLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAuthLogoutResponses, PostAuthLogoutErrors, ThrowOnError>({
        url: '/auth/logout',
        ...options
    });
};

/**
 * Get current user
 * Returns information about the currently authenticated user
 */
export const getAuthMe = <ThrowOnError extends boolean = false>(options?: Options<GetAuthMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAuthMeResponses, GetAuthMeErrors, ThrowOnError>({
        url: '/auth/me',
        ...options
    });
};

/**
 * List all backups
 * Get a list of all backups
 */
export const getBackups = <ThrowOnError extends boolean = false>(options?: Options<GetBackupsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetBackupsResponses, GetBackupsErrors, ThrowOnError>({
        url: '/backups',
        ...options
    });
};

/**
 * Create a new backup
 * Create a new backup with the specified configuration
 */
export const postBackups = <ThrowOnError extends boolean = false>(options: Options<PostBackupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostBackupsResponses, PostBackupsErrors, ThrowOnError>({
        url: '/backups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List all backup schedules
 * Get a list of all backup schedules
 */
export const getBackupsSchedules = <ThrowOnError extends boolean = false>(options?: Options<GetBackupsSchedulesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetBackupsSchedulesResponses, GetBackupsSchedulesErrors, ThrowOnError>({
        url: '/backups/schedules',
        ...options
    });
};

/**
 * Create a new backup schedule
 * Create a new backup schedule with the specified configuration
 */
export const postBackupsSchedules = <ThrowOnError extends boolean = false>(options: Options<PostBackupsSchedulesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostBackupsSchedulesResponses, PostBackupsSchedulesErrors, ThrowOnError>({
        url: '/backups/schedules',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a backup schedule
 * Delete a backup schedule and stop its execution
 */
export const deleteBackupsSchedulesById = <ThrowOnError extends boolean = false>(options: Options<DeleteBackupsSchedulesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteBackupsSchedulesByIdResponses, DeleteBackupsSchedulesByIdErrors, ThrowOnError>({
        url: '/backups/schedules/{id}',
        ...options
    });
};

/**
 * Get a backup schedule by ID
 * Get detailed information about a specific backup schedule
 */
export const getBackupsSchedulesById = <ThrowOnError extends boolean = false>(options: Options<GetBackupsSchedulesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBackupsSchedulesByIdResponses, GetBackupsSchedulesByIdErrors, ThrowOnError>({
        url: '/backups/schedules/{id}',
        ...options
    });
};

/**
 * Update a backup schedule
 * Update an existing backup schedule with new configuration
 */
export const putBackupsSchedulesById = <ThrowOnError extends boolean = false>(options: Options<PutBackupsSchedulesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutBackupsSchedulesByIdResponses, PutBackupsSchedulesByIdErrors, ThrowOnError>({
        url: '/backups/schedules/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Disable a backup schedule
 * Disable a backup schedule to stop it from running
 */
export const putBackupsSchedulesByIdDisable = <ThrowOnError extends boolean = false>(options: Options<PutBackupsSchedulesByIdDisableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutBackupsSchedulesByIdDisableResponses, PutBackupsSchedulesByIdDisableErrors, ThrowOnError>({
        url: '/backups/schedules/{id}/disable',
        ...options
    });
};

/**
 * Enable a backup schedule
 * Enable a backup schedule to start running
 */
export const putBackupsSchedulesByIdEnable = <ThrowOnError extends boolean = false>(options: Options<PutBackupsSchedulesByIdEnableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutBackupsSchedulesByIdEnableResponses, PutBackupsSchedulesByIdEnableErrors, ThrowOnError>({
        url: '/backups/schedules/{id}/enable',
        ...options
    });
};

/**
 * List all backup targets
 * Get a list of all backup targets
 */
export const getBackupsTargets = <ThrowOnError extends boolean = false>(options?: Options<GetBackupsTargetsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetBackupsTargetsResponses, GetBackupsTargetsErrors, ThrowOnError>({
        url: '/backups/targets',
        ...options
    });
};

/**
 * Create a new backup target
 * Create a new backup target with the specified configuration
 */
export const postBackupsTargets = <ThrowOnError extends boolean = false>(options: Options<PostBackupsTargetsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostBackupsTargetsResponses, PostBackupsTargetsErrors, ThrowOnError>({
        url: '/backups/targets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a backup target
 * Delete a backup target and all associated backups
 */
export const deleteBackupsTargetsById = <ThrowOnError extends boolean = false>(options: Options<DeleteBackupsTargetsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteBackupsTargetsByIdResponses, DeleteBackupsTargetsByIdErrors, ThrowOnError>({
        url: '/backups/targets/{id}',
        ...options
    });
};

/**
 * Get a backup target by ID
 * Get detailed information about a specific backup target
 */
export const getBackupsTargetsById = <ThrowOnError extends boolean = false>(options: Options<GetBackupsTargetsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBackupsTargetsByIdResponses, GetBackupsTargetsByIdErrors, ThrowOnError>({
        url: '/backups/targets/{id}',
        ...options
    });
};

/**
 * Update a backup target
 * Update an existing backup target with new configuration
 */
export const putBackupsTargetsById = <ThrowOnError extends boolean = false>(options: Options<PutBackupsTargetsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutBackupsTargetsByIdResponses, PutBackupsTargetsByIdErrors, ThrowOnError>({
        url: '/backups/targets/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a backup
 * Delete a backup and its associated files
 */
export const deleteBackupsById = <ThrowOnError extends boolean = false>(options: Options<DeleteBackupsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteBackupsByIdResponses, DeleteBackupsByIdErrors, ThrowOnError>({
        url: '/backups/{id}',
        ...options
    });
};

/**
 * Get a backup by ID
 * Get detailed information about a specific backup
 */
export const getBackupsById = <ThrowOnError extends boolean = false>(options: Options<GetBackupsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBackupsByIdResponses, GetBackupsByIdErrors, ThrowOnError>({
        url: '/backups/{id}',
        ...options
    });
};

/**
 * List all projects
 * Get a list of all projects
 */
export const getChaincodeProjects = <ThrowOnError extends boolean = false>(options?: Options<GetChaincodeProjectsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetChaincodeProjectsResponses, GetChaincodeProjectsErrors, ThrowOnError>({
        url: '/chaincode-projects',
        ...options
    });
};

/**
 * Create a project
 * Create a new project, scaffold its directory, and store it in the DB
 */
export const postChaincodeProjects = <ThrowOnError extends boolean = false>(options: Options<PostChaincodeProjectsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostChaincodeProjectsResponses, PostChaincodeProjectsErrors, ThrowOnError>({
        url: '/chaincode-projects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a project
 * Delete a project and its associated files from the system
 */
export const deleteChaincodeProjectsById = <ThrowOnError extends boolean = false>(options: Options<DeleteChaincodeProjectsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteChaincodeProjectsByIdResponses, DeleteChaincodeProjectsByIdErrors, ThrowOnError>({
        url: '/chaincode-projects/{id}',
        ...options
    });
};

/**
 * Get a project by ID
 * Get details of a project by its ID
 */
export const getChaincodeProjectsById = <ThrowOnError extends boolean = false>(options: Options<GetChaincodeProjectsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChaincodeProjectsByIdResponses, GetChaincodeProjectsByIdErrors, ThrowOnError>({
        url: '/chaincode-projects/{id}',
        ...options
    });
};

/**
 * List project commits with file changes
 * Get a paginated list of commits for a project, including added/removed/modified files
 */
export const getChaincodeProjectsByIdCommits = <ThrowOnError extends boolean = false>(options: Options<GetChaincodeProjectsByIdCommitsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChaincodeProjectsByIdCommitsResponses, GetChaincodeProjectsByIdCommitsErrors, ThrowOnError>({
        url: '/chaincode-projects/{id}/commits',
        ...options
    });
};

/**
 * Get commit details
 * Get details for a single commit, including file changes
 */
export const getChaincodeProjectsByIdCommitsByCommitHash = <ThrowOnError extends boolean = false>(options: Options<GetChaincodeProjectsByIdCommitsByCommitHashData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChaincodeProjectsByIdCommitsByCommitHashResponses, GetChaincodeProjectsByIdCommitsByCommitHashErrors, ThrowOnError>({
        url: '/chaincode-projects/{id}/commits/{commitHash}',
        ...options
    });
};

/**
 * Get file diff between two commits
 * Get the diff of a file between two commits
 */
export const getChaincodeProjectsByIdDiff = <ThrowOnError extends boolean = false>(options: Options<GetChaincodeProjectsByIdDiffData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChaincodeProjectsByIdDiffResponses, GetChaincodeProjectsByIdDiffErrors, ThrowOnError>({
        url: '/chaincode-projects/{id}/diff',
        ...options
    });
};

/**
 * Download a project as a zip file
 * Download a project and its associated files as a zip file, excluding common folders like node_modules, .vscode, etc.
 */
export const getChaincodeProjectsByIdDownload = <ThrowOnError extends boolean = false>(options: Options<GetChaincodeProjectsByIdDownloadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChaincodeProjectsByIdDownloadResponses, GetChaincodeProjectsByIdDownloadErrors, ThrowOnError>({
        url: '/chaincode-projects/{id}/download',
        ...options
    });
};

/**
 * Update a project's endorsement policy
 * Update the endorsement policy of an existing project
 */
export const putChaincodeProjectsByIdEndorsementPolicy = <ThrowOnError extends boolean = false>(options: Options<PutChaincodeProjectsByIdEndorsementPolicyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutChaincodeProjectsByIdEndorsementPolicyResponses, PutChaincodeProjectsByIdEndorsementPolicyErrors, ThrowOnError>({
        url: '/chaincode-projects/{id}/endorsement-policy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get file contents at a specific commit
 * Get the contents of a file at a specific commit hash
 */
export const getChaincodeProjectsByIdFileAtCommit = <ThrowOnError extends boolean = false>(options: Options<GetChaincodeProjectsByIdFileAtCommitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChaincodeProjectsByIdFileAtCommitResponses, GetChaincodeProjectsByIdFileAtCommitErrors, ThrowOnError>({
        url: '/chaincode-projects/{id}/file_at_commit',
        ...options
    });
};

/**
 * Invoke a chaincode transaction
 * Invokes a transaction on the specified chaincode project
 */
export const postChaincodeProjectsByIdInvoke = <ThrowOnError extends boolean = false>(options: Options<PostChaincodeProjectsByIdInvokeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostChaincodeProjectsByIdInvokeResponses, PostChaincodeProjectsByIdInvokeErrors, ThrowOnError>({
        url: '/chaincode-projects/{id}/invoke',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get logs for a project server
 * Stream or return the logs for the project's running container
 */
export const getChaincodeProjectsByIdLogs = <ThrowOnError extends boolean = false>(options: Options<GetChaincodeProjectsByIdLogsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChaincodeProjectsByIdLogsResponses, GetChaincodeProjectsByIdLogsErrors, ThrowOnError>({
        url: '/chaincode-projects/{id}/logs',
        ...options
    });
};

/**
 * Stream real-time logs for a project server
 * Stream logs for the project's running container using SSE
 */
export const getChaincodeProjectsByIdLogsStream = <ThrowOnError extends boolean = false>(options: Options<GetChaincodeProjectsByIdLogsStreamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChaincodeProjectsByIdLogsStreamResponses, GetChaincodeProjectsByIdLogsStreamErrors, ThrowOnError>({
        url: '/chaincode-projects/{id}/logs/stream',
        ...options
    });
};

/**
 * Get project metadata
 * Retrieves metadata for the specified chaincode project
 */
export const getChaincodeProjectsByIdMetadata = <ThrowOnError extends boolean = false>(options: Options<GetChaincodeProjectsByIdMetadataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChaincodeProjectsByIdMetadataResponses, GetChaincodeProjectsByIdMetadataErrors, ThrowOnError>({
        url: '/chaincode-projects/{id}/metadata',
        ...options
    });
};

/**
 * Query a chaincode transaction
 * Queries the state of the specified chaincode project
 */
export const postChaincodeProjectsByIdQuery = <ThrowOnError extends boolean = false>(options: Options<PostChaincodeProjectsByIdQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostChaincodeProjectsByIdQueryResponses, PostChaincodeProjectsByIdQueryErrors, ThrowOnError>({
        url: '/chaincode-projects/{id}/query',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Start the server for a project
 * Start the server process for a given project using its boilerplate
 */
export const postChaincodeProjectsByIdStart = <ThrowOnError extends boolean = false>(options: Options<PostChaincodeProjectsByIdStartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostChaincodeProjectsByIdStartResponses, PostChaincodeProjectsByIdStartErrors, ThrowOnError>({
        url: '/chaincode-projects/{id}/start',
        ...options
    });
};

/**
 * Stop the server for a project
 * Stop the server process for a given project
 */
export const postChaincodeProjectsByIdStop = <ThrowOnError extends boolean = false>(options: Options<PostChaincodeProjectsByIdStopData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostChaincodeProjectsByIdStopResponses, PostChaincodeProjectsByIdStopErrors, ThrowOnError>({
        url: '/chaincode-projects/{id}/stop',
        ...options
    });
};

/**
 * Submit config update proposal
 * Submit a signed config update proposal for execution
 */
export const postDummy = <ThrowOnError extends boolean = false>(options: Options<PostDummyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostDummyResponses, unknown, ThrowOnError>({
        url: '/dummy',
        ...options
    });
};

/**
 * List all key providers
 * Get a list of all configured key providers
 */
export const getKeyProviders = <ThrowOnError extends boolean = false>(options?: Options<GetKeyProvidersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetKeyProvidersResponses, GetKeyProvidersErrors, ThrowOnError>({
        url: '/key-providers',
        ...options
    });
};

/**
 * Create a new key provider
 * Create a new provider for key management
 */
export const postKeyProviders = <ThrowOnError extends boolean = false>(options: Options<PostKeyProvidersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostKeyProvidersResponses, PostKeyProvidersErrors, ThrowOnError>({
        url: '/key-providers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a provider
 * Delete a specific key provider
 */
export const deleteKeyProvidersById = <ThrowOnError extends boolean = false>(options: Options<DeleteKeyProvidersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteKeyProvidersByIdResponses, DeleteKeyProvidersByIdErrors, ThrowOnError>({
        url: '/key-providers/{id}',
        ...options
    });
};

/**
 * Get a specific provider
 * Get detailed information about a specific key provider
 */
export const getKeyProvidersById = <ThrowOnError extends boolean = false>(options: Options<GetKeyProvidersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetKeyProvidersByIdResponses, GetKeyProvidersByIdErrors, ThrowOnError>({
        url: '/key-providers/{id}',
        ...options
    });
};

/**
 * Get paginated keys
 * Get a paginated list of keys
 */
export const getKeys = <ThrowOnError extends boolean = false>(options?: Options<GetKeysData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetKeysResponses, GetKeysErrors, ThrowOnError>({
        url: '/keys',
        ...options
    });
};

/**
 * Create a new key
 * Create a new key pair with specified algorithm and parameters
 */
export const postKeys = <ThrowOnError extends boolean = false>(options: Options<PostKeysData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostKeysResponses, PostKeysErrors, ThrowOnError>({
        url: '/keys',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all keys
 * Get all keys with their certificates and metadata
 */
export const getKeysAll = <ThrowOnError extends boolean = false>(options?: Options<GetKeysAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetKeysAllResponses, GetKeysAllErrors, ThrowOnError>({
        url: '/keys/all',
        ...options
    });
};

/**
 * Filter keys by algorithm and curve
 * Get keys filtered by algorithm type and/or curve type
 */
export const getKeysFilter = <ThrowOnError extends boolean = false>(options?: Options<GetKeysFilterData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetKeysFilterResponses, GetKeysFilterErrors, ThrowOnError>({
        url: '/keys/filter',
        ...options
    });
};

/**
 * Delete a key
 * Delete a specific key by ID
 */
export const deleteKeysById = <ThrowOnError extends boolean = false>(options: Options<DeleteKeysByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteKeysByIdResponses, DeleteKeysByIdErrors, ThrowOnError>({
        url: '/keys/{id}',
        ...options
    });
};

/**
 * Get a specific key by ID
 * Get detailed information about a specific key
 */
export const getKeysById = <ThrowOnError extends boolean = false>(options: Options<GetKeysByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetKeysByIdResponses, GetKeysByIdErrors, ThrowOnError>({
        url: '/keys/{id}',
        ...options
    });
};

/**
 * Sign a certificate
 * Sign a certificate for a key using a CA key
 */
export const postKeysByKeyIdSign = <ThrowOnError extends boolean = false>(options: Options<PostKeysByKeyIdSignData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostKeysByKeyIdSignResponses, PostKeysByKeyIdSignErrors, ThrowOnError>({
        url: '/keys/{keyID}/sign',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Deploy a new Prometheus instance
 * Deploys a new Prometheus instance with the specified configuration
 */
export const postMetricsDeploy = <ThrowOnError extends boolean = false>(options: Options<PostMetricsDeployData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostMetricsDeployResponses, PostMetricsDeployErrors, ThrowOnError>({
        url: '/metrics/deploy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get metrics for a specific node
 * Retrieves metrics for a specific node by ID and optional PromQL query
 */
export const getMetricsNodeById = <ThrowOnError extends boolean = false>(options: Options<GetMetricsNodeByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMetricsNodeByIdResponses, GetMetricsNodeByIdErrors, ThrowOnError>({
        url: '/metrics/node/{id}',
        ...options
    });
};

/**
 * Get label values for a specific label
 * Retrieves all values for a specific label, optionally filtered by metric matches and node ID
 */
export const getMetricsNodeByIdLabelByLabelValues = <ThrowOnError extends boolean = false>(options: Options<GetMetricsNodeByIdLabelByLabelValuesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMetricsNodeByIdLabelByLabelValuesResponses, GetMetricsNodeByIdLabelByLabelValuesErrors, ThrowOnError>({
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/metrics/node/{id}/label/{label}/values',
        ...options
    });
};

/**
 * Execute custom Prometheus query
 * Execute a custom Prometheus query with optional time range
 */
export const postMetricsNodeByIdQuery = <ThrowOnError extends boolean = false>(options: Options<PostMetricsNodeByIdQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostMetricsNodeByIdQueryResponses, PostMetricsNodeByIdQueryErrors, ThrowOnError>({
        url: '/metrics/node/{id}/query',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get metrics for a specific node with time range
 * Retrieves metrics for a specific node within a specified time range
 */
export const getMetricsNodeByIdRange = <ThrowOnError extends boolean = false>(options: Options<GetMetricsNodeByIdRangeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMetricsNodeByIdRangeResponses, GetMetricsNodeByIdRangeErrors, ThrowOnError>({
        url: '/metrics/node/{id}/range',
        ...options
    });
};

/**
 * Reload Prometheus configuration
 * Triggers a reload of the Prometheus configuration to pick up any changes
 */
export const postMetricsReload = <ThrowOnError extends boolean = false>(options?: Options<PostMetricsReloadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostMetricsReloadResponses, PostMetricsReloadErrors, ThrowOnError>({
        url: '/metrics/reload',
        ...options
    });
};

/**
 * Get Prometheus status
 * Returns the current status of the Prometheus instance including version, port, and configuration
 */
export const getMetricsStatus = <ThrowOnError extends boolean = false>(options?: Options<GetMetricsStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMetricsStatusResponses, GetMetricsStatusErrors, ThrowOnError>({
        url: '/metrics/status',
        ...options
    });
};

/**
 * Undeploy Prometheus instance
 * Stops and removes the Prometheus instance
 */
export const postMetricsUndeploy = <ThrowOnError extends boolean = false>(options?: Options<PostMetricsUndeployData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostMetricsUndeployResponses, PostMetricsUndeployErrors, ThrowOnError>({
        url: '/metrics/undeploy',
        ...options
    });
};

/**
 * List Besu networks
 * Get a paginated list of Besu networks
 */
export const getNetworksBesu = <ThrowOnError extends boolean = false>(options?: Options<GetNetworksBesuData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNetworksBesuResponses, GetNetworksBesuErrors, ThrowOnError>({
        url: '/networks/besu',
        ...options
    });
};

/**
 * Create a new Besu network
 * Create a new Besu network with the specified configuration
 */
export const postNetworksBesu = <ThrowOnError extends boolean = false>(options: Options<PostNetworksBesuData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostNetworksBesuResponses, PostNetworksBesuErrors, ThrowOnError>({
        url: '/networks/besu',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Import a Besu network
 * Import an existing Besu network using its genesis file
 */
export const postNetworksBesuImport = <ThrowOnError extends boolean = false>(options: Options<PostNetworksBesuImportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostNetworksBesuImportResponses, PostNetworksBesuImportErrors, ThrowOnError>({
        url: '/networks/besu/import',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a Besu network
 * Delete an existing Besu network and all its resources
 */
export const deleteNetworksBesuById = <ThrowOnError extends boolean = false>(options: Options<DeleteNetworksBesuByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteNetworksBesuByIdResponses, DeleteNetworksBesuByIdErrors, ThrowOnError>({
        url: '/networks/besu/{id}',
        ...options
    });
};

/**
 * Get a Besu network by ID
 * Get details of a specific Besu network
 */
export const getNetworksBesuById = <ThrowOnError extends boolean = false>(options: Options<GetNetworksBesuByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNetworksBesuByIdResponses, GetNetworksBesuByIdErrors, ThrowOnError>({
        url: '/networks/besu/{id}',
        ...options
    });
};

/**
 * Get network map
 * Get a map of all nodes (peers/orderers/validators) for a network, including endpoints and optionally health status.
 */
export const getNetworksBesuByIdMap = <ThrowOnError extends boolean = false>(options: Options<GetNetworksBesuByIdMapData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNetworksBesuByIdMapResponses, GetNetworksBesuByIdMapErrors, ThrowOnError>({
        url: '/networks/besu/{id}/map',
        ...options
    });
};

/**
 * List Fabric networks
 * Get a paginated list of Fabric networks
 */
export const getNetworksFabric = <ThrowOnError extends boolean = false>(options?: Options<GetNetworksFabricData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNetworksFabricResponses, GetNetworksFabricErrors, ThrowOnError>({
        url: '/networks/fabric',
        ...options
    });
};

/**
 * Create a new Fabric network
 * Create a new Hyperledger Fabric network with the specified configuration
 */
export const postNetworksFabric = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostNetworksFabricResponses, PostNetworksFabricErrors, ThrowOnError>({
        url: '/networks/fabric',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get a Fabric network by slug
 * Get details of a specific Fabric network using its slug
 */
export const getNetworksFabricByNameByName = <ThrowOnError extends boolean = false>(options: Options<GetNetworksFabricByNameByNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNetworksFabricByNameByNameResponses, GetNetworksFabricByNameByNameErrors, ThrowOnError>({
        url: '/networks/fabric/by-name/{name}',
        ...options
    });
};

/**
 * Import a Fabric network
 * Import an existing Fabric network using its genesis block
 */
export const postNetworksFabricImport = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricImportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostNetworksFabricImportResponses, PostNetworksFabricImportErrors, ThrowOnError>({
        url: '/networks/fabric/import',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Import a Fabric network with organization
 * Import an existing Fabric network using organization details
 */
export const postNetworksFabricImportWithOrg = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricImportWithOrgData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostNetworksFabricImportWithOrgResponses, PostNetworksFabricImportWithOrgErrors, ThrowOnError>({
        url: '/networks/fabric/import-with-org',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a Fabric network
 * Delete an existing Fabric network and all its resources
 */
export const deleteNetworksFabricById = <ThrowOnError extends boolean = false>(options: Options<DeleteNetworksFabricByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteNetworksFabricByIdResponses, DeleteNetworksFabricByIdErrors, ThrowOnError>({
        url: '/networks/fabric/{id}',
        ...options
    });
};

/**
 * Get a Fabric network by ID
 * Get details of a specific Fabric network
 */
export const getNetworksFabricById = <ThrowOnError extends boolean = false>(options: Options<GetNetworksFabricByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNetworksFabricByIdResponses, GetNetworksFabricByIdErrors, ThrowOnError>({
        url: '/networks/fabric/{id}',
        ...options
    });
};

/**
 * Set anchor peers for an organization
 * Set the anchor peers for an organization in a Fabric network
 */
export const postNetworksFabricByIdAnchorPeers = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricByIdAnchorPeersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostNetworksFabricByIdAnchorPeersResponses, PostNetworksFabricByIdAnchorPeersErrors, ThrowOnError>({
        url: '/networks/fabric/{id}/anchor-peers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get list of blocks from Fabric network
 * Get a paginated list of blocks from a Fabric network
 */
export const getNetworksFabricByIdBlocks = <ThrowOnError extends boolean = false>(options: Options<GetNetworksFabricByIdBlocksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNetworksFabricByIdBlocksResponses, GetNetworksFabricByIdBlocksErrors, ThrowOnError>({
        url: '/networks/fabric/{id}/blocks',
        ...options
    });
};

/**
 * Get transactions from a specific block
 * Get all transactions from a specific block in a Fabric network
 */
export const getNetworksFabricByIdBlocksByBlockNum = <ThrowOnError extends boolean = false>(options: Options<GetNetworksFabricByIdBlocksByBlockNumData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNetworksFabricByIdBlocksByBlockNumResponses, GetNetworksFabricByIdBlocksByBlockNumErrors, ThrowOnError>({
        url: '/networks/fabric/{id}/blocks/{blockNum}',
        ...options
    });
};

/**
 * Get Fabric network channel configuration
 * Retrieve the channel configuration for a Fabric network
 */
export const getNetworksFabricByIdChannelConfig = <ThrowOnError extends boolean = false>(options: Options<GetNetworksFabricByIdChannelConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNetworksFabricByIdChannelConfigResponses, GetNetworksFabricByIdChannelConfigErrors, ThrowOnError>({
        url: '/networks/fabric/{id}/channel-config',
        ...options
    });
};

/**
 * Get Fabric network current channel configuration
 * Retrieve the current channel configuration for a Fabric network
 */
export const getNetworksFabricByIdCurrentChannelConfig = <ThrowOnError extends boolean = false>(options: Options<GetNetworksFabricByIdCurrentChannelConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNetworksFabricByIdCurrentChannelConfigResponses, GetNetworksFabricByIdCurrentChannelConfigErrors, ThrowOnError>({
        url: '/networks/fabric/{id}/current-channel-config',
        ...options
    });
};

/**
 * Get Fabric chain information
 * Retrieve detailed information about the Fabric blockchain including height and block hashes
 */
export const getNetworksFabricByIdInfo = <ThrowOnError extends boolean = false>(options: Options<GetNetworksFabricByIdInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNetworksFabricByIdInfoResponses, GetNetworksFabricByIdInfoErrors, ThrowOnError>({
        url: '/networks/fabric/{id}/info',
        ...options
    });
};

/**
 * Get network map
 * Get a map of all nodes (peers/orderers/validators) for a network, including endpoints and optionally health status.
 */
export const getNetworksFabricByIdMap = <ThrowOnError extends boolean = false>(options: Options<GetNetworksFabricByIdMapData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNetworksFabricByIdMapResponses, GetNetworksFabricByIdMapErrors, ThrowOnError>({
        url: '/networks/fabric/{id}/map',
        ...options
    });
};

/**
 * Get network nodes
 * Get all nodes associated with a network
 */
export const getNetworksFabricByIdNodes = <ThrowOnError extends boolean = false>(options: Options<GetNetworksFabricByIdNodesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNetworksFabricByIdNodesResponses, GetNetworksFabricByIdNodesErrors, ThrowOnError>({
        url: '/networks/fabric/{id}/nodes',
        ...options
    });
};

/**
 * Add node to network
 * Add a node (peer or orderer) to an existing network
 */
export const postNetworksFabricByIdNodes = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricByIdNodesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostNetworksFabricByIdNodesResponses, PostNetworksFabricByIdNodesErrors, ThrowOnError>({
        url: '/networks/fabric/{id}/nodes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove orderer from Fabric network
 * Remove an orderer node from an existing Fabric network
 */
export const deleteNetworksFabricByIdOrderersByOrdererId = <ThrowOnError extends boolean = false>(options: Options<DeleteNetworksFabricByIdOrderersByOrdererIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteNetworksFabricByIdOrderersByOrdererIdResponses, DeleteNetworksFabricByIdOrderersByOrdererIdErrors, ThrowOnError>({
        url: '/networks/fabric/{id}/orderers/{ordererId}',
        ...options
    });
};

/**
 * Join orderer to Fabric network
 * Join an orderer node to an existing Fabric network
 */
export const postNetworksFabricByIdOrderersByOrdererIdJoin = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricByIdOrderersByOrdererIdJoinData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostNetworksFabricByIdOrderersByOrdererIdJoinResponses, PostNetworksFabricByIdOrderersByOrdererIdJoinErrors, ThrowOnError>({
        url: '/networks/fabric/{id}/orderers/{ordererId}/join',
        ...options
    });
};

/**
 * Unjoin orderer from Fabric network
 * Remove an orderer node from a channel but keep it in the network
 */
export const postNetworksFabricByIdOrderersByOrdererIdUnjoin = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricByIdOrderersByOrdererIdUnjoinData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostNetworksFabricByIdOrderersByOrdererIdUnjoinResponses, PostNetworksFabricByIdOrderersByOrdererIdUnjoinErrors, ThrowOnError>({
        url: '/networks/fabric/{id}/orderers/{ordererId}/unjoin',
        ...options
    });
};

/**
 * Update organization CRL
 * Update the Certificate Revocation List (CRL) for an organization in the network
 */
export const postNetworksFabricByIdOrganizationCrl = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricByIdOrganizationCrlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostNetworksFabricByIdOrganizationCrlResponses, PostNetworksFabricByIdOrganizationCrlErrors, ThrowOnError>({
        url: '/networks/fabric/{id}/organization-crl',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get network configuration
 * Get the network configuration as YAML
 */
export const getNetworksFabricByIdOrganizationsByOrgIdConfig = <ThrowOnError extends boolean = false>(options: Options<GetNetworksFabricByIdOrganizationsByOrgIdConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNetworksFabricByIdOrganizationsByOrgIdConfigResponses, GetNetworksFabricByIdOrganizationsByOrgIdConfigErrors, ThrowOnError>({
        url: '/networks/fabric/{id}/organizations/{orgId}/config',
        ...options
    });
};

/**
 * Remove peer from Fabric network
 * Remove a peer node from an existing Fabric network
 */
export const deleteNetworksFabricByIdPeersByPeerId = <ThrowOnError extends boolean = false>(options: Options<DeleteNetworksFabricByIdPeersByPeerIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteNetworksFabricByIdPeersByPeerIdResponses, DeleteNetworksFabricByIdPeersByPeerIdErrors, ThrowOnError>({
        url: '/networks/fabric/{id}/peers/{peerId}',
        ...options
    });
};

/**
 * Join peer to Fabric network
 * Join a peer node to an existing Fabric network
 */
export const postNetworksFabricByIdPeersByPeerIdJoin = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricByIdPeersByPeerIdJoinData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostNetworksFabricByIdPeersByPeerIdJoinResponses, PostNetworksFabricByIdPeersByPeerIdJoinErrors, ThrowOnError>({
        url: '/networks/fabric/{id}/peers/{peerId}/join',
        ...options
    });
};

/**
 * Unjoin peer from Fabric network
 * Remove a peer node from a channel but keep it in the network
 */
export const postNetworksFabricByIdPeersByPeerIdUnjoin = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricByIdPeersByPeerIdUnjoinData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostNetworksFabricByIdPeersByPeerIdUnjoinResponses, PostNetworksFabricByIdPeersByPeerIdUnjoinErrors, ThrowOnError>({
        url: '/networks/fabric/{id}/peers/{peerId}/unjoin',
        ...options
    });
};

/**
 * Reload network config block
 * Reloads the current config block for a network
 */
export const postNetworksFabricByIdReloadBlock = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricByIdReloadBlockData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostNetworksFabricByIdReloadBlockResponses, PostNetworksFabricByIdReloadBlockErrors, ThrowOnError>({
        url: '/networks/fabric/{id}/reload-block',
        ...options
    });
};

/**
 * Get transaction details by transaction ID
 * Get detailed information about a specific transaction in a Fabric network
 */
export const getNetworksFabricByIdTransactionsByTxId = <ThrowOnError extends boolean = false>(options: Options<GetNetworksFabricByIdTransactionsByTxIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNetworksFabricByIdTransactionsByTxIdResponses, GetNetworksFabricByIdTransactionsByTxIdErrors, ThrowOnError>({
        url: '/networks/fabric/{id}/transactions/{txId}',
        ...options
    });
};

/**
 * Prepare a config update for a Fabric network
 * Prepare a config update proposal for a Fabric network using the provided operations.
 * The following operation types are supported:
 * - add_org: Add a new organization to the channel
 * - remove_org: Remove an organization from the channel
 * - update_org_msp: Update an organization's MSP configuration
 * - set_anchor_peers: Set anchor peers for an organization
 * - add_consenter: Add a new consenter to the orderer
 * - remove_consenter: Remove a consenter from the orderer
 * - update_consenter: Update a consenter in the orderer
 * - update_etcd_raft_options: Update etcd raft options for the orderer
 * - update_batch_size: Update batch size for the orderer
 * - update_batch_timeout: Update batch timeout for the orderer
 */
export const postNetworksFabricByIdUpdateConfig = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricByIdUpdateConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostNetworksFabricByIdUpdateConfigResponses, PostNetworksFabricByIdUpdateConfigErrors, ThrowOnError>({
        url: '/networks/fabric/{id}/update-config',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List all nodes
 * Get a paginated list of nodes with optional platform filter
 */
export const getNodes = <ThrowOnError extends boolean = false>(options?: Options<GetNodesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNodesResponses, GetNodesErrors, ThrowOnError>({
        url: '/nodes',
        ...options
    });
};

/**
 * Create a new node
 * Create a new node with the specified configuration
 */
export const postNodes = <ThrowOnError extends boolean = false>(options: Options<PostNodesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostNodesResponses, PostNodesErrors, ThrowOnError>({
        url: '/nodes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get default values for Besu node
 * Get default configuration values for a Besu node
 */
export const getNodesDefaultsBesuNode = <ThrowOnError extends boolean = false>(options?: Options<GetNodesDefaultsBesuNodeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNodesDefaultsBesuNodeResponses, GetNodesDefaultsBesuNodeErrors, ThrowOnError>({
        url: '/nodes/defaults/besu-node',
        ...options
    });
};

/**
 * Get default values for multiple Fabric nodes
 * Get default configuration values for multiple Fabric nodes
 */
export const getNodesDefaultsFabric = <ThrowOnError extends boolean = false>(options?: Options<GetNodesDefaultsFabricData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNodesDefaultsFabricResponses, GetNodesDefaultsFabricErrors, ThrowOnError>({
        url: '/nodes/defaults/fabric',
        ...options
    });
};

/**
 * Get default values for Fabric orderer node
 * Get default configuration values for a Fabric orderer node
 */
export const getNodesDefaultsFabricOrderer = <ThrowOnError extends boolean = false>(options?: Options<GetNodesDefaultsFabricOrdererData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNodesDefaultsFabricOrdererResponses, GetNodesDefaultsFabricOrdererErrors, ThrowOnError>({
        url: '/nodes/defaults/fabric-orderer',
        ...options
    });
};

/**
 * Get default values for Fabric peer node
 * Get default configuration values for a Fabric peer node
 */
export const getNodesDefaultsFabricPeer = <ThrowOnError extends boolean = false>(options?: Options<GetNodesDefaultsFabricPeerData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNodesDefaultsFabricPeerResponses, GetNodesDefaultsFabricPeerErrors, ThrowOnError>({
        url: '/nodes/defaults/fabric-peer',
        ...options
    });
};

/**
 * List nodes by platform
 * Get a paginated list of nodes filtered by blockchain platform
 */
export const getNodesPlatformByPlatform = <ThrowOnError extends boolean = false>(options: Options<GetNodesPlatformByPlatformData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNodesPlatformByPlatformResponses, GetNodesPlatformByPlatformErrors, ThrowOnError>({
        url: '/nodes/platform/{platform}',
        ...options
    });
};

/**
 * Delete a node
 * Delete a node by ID
 */
export const deleteNodesById = <ThrowOnError extends boolean = false>(options: Options<DeleteNodesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteNodesByIdResponses, DeleteNodesByIdErrors, ThrowOnError>({
        url: '/nodes/{id}',
        ...options
    });
};

/**
 * Get a node
 * Get a node by ID
 */
export const getNodesById = <ThrowOnError extends boolean = false>(options: Options<GetNodesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNodesByIdResponses, GetNodesByIdErrors, ThrowOnError>({
        url: '/nodes/{id}',
        ...options
    });
};

/**
 * Update a node
 * Updates an existing node's configuration based on its type
 */
export const putNodesById = <ThrowOnError extends boolean = false>(options: Options<PutNodesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutNodesByIdResponses, PutNodesByIdErrors, ThrowOnError>({
        url: '/nodes/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Renew node certificates
 * Renews the TLS and signing certificates for a Fabric node
 */
export const postNodesByIdCertificatesRenew = <ThrowOnError extends boolean = false>(options: Options<PostNodesByIdCertificatesRenewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostNodesByIdCertificatesRenewResponses, PostNodesByIdCertificatesRenewErrors, ThrowOnError>({
        url: '/nodes/{id}/certificates/renew',
        ...options
    });
};

/**
 * Get channels for a Fabric node
 * Retrieves all channels for a specific Fabric node
 */
export const getNodesByIdChannels = <ThrowOnError extends boolean = false>(options: Options<GetNodesByIdChannelsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNodesByIdChannelsResponses, GetNodesByIdChannelsErrors, ThrowOnError>({
        url: '/nodes/{id}/channels',
        ...options
    });
};

/**
 * Get committed chaincodes for a Fabric peer
 * Retrieves all committed chaincodes for a specific channel on a Fabric peer node
 */
export const getNodesByIdChannelsByChannelIdChaincodes = <ThrowOnError extends boolean = false>(options: Options<GetNodesByIdChannelsByChannelIdChaincodesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNodesByIdChannelsByChannelIdChaincodesResponses, GetNodesByIdChannelsByChannelIdChaincodesErrors, ThrowOnError>({
        url: '/nodes/{id}/channels/{channelID}/chaincodes',
        ...options
    });
};

/**
 * Get node events
 * Get a paginated list of events for a specific node
 */
export const getNodesByIdEvents = <ThrowOnError extends boolean = false>(options: Options<GetNodesByIdEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNodesByIdEventsResponses, GetNodesByIdEventsErrors, ThrowOnError>({
        url: '/nodes/{id}/events',
        ...options
    });
};

/**
 * Tail node logs
 * Stream logs from a specific node
 */
export const getNodesByIdLogs = <ThrowOnError extends boolean = false>(options: Options<GetNodesByIdLogsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNodesByIdLogsResponses, GetNodesByIdLogsErrors, ThrowOnError>({
        url: '/nodes/{id}/logs',
        ...options
    });
};

/**
 * Restart a node
 * Restart a node by ID (stops and starts the node)
 */
export const postNodesByIdRestart = <ThrowOnError extends boolean = false>(options: Options<PostNodesByIdRestartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostNodesByIdRestartResponses, PostNodesByIdRestartErrors, ThrowOnError>({
        url: '/nodes/{id}/restart',
        ...options
    });
};

/**
 * Start a node
 * Start a node by ID
 */
export const postNodesByIdStart = <ThrowOnError extends boolean = false>(options: Options<PostNodesByIdStartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostNodesByIdStartResponses, PostNodesByIdStartErrors, ThrowOnError>({
        url: '/nodes/{id}/start',
        ...options
    });
};

/**
 * Stop a node
 * Stop a node by ID
 */
export const postNodesByIdStop = <ThrowOnError extends boolean = false>(options: Options<PostNodesByIdStopData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostNodesByIdStopResponses, PostNodesByIdStopErrors, ThrowOnError>({
        url: '/nodes/{id}/stop',
        ...options
    });
};

/**
 * List notification providers
 * Get a list of all notification providers
 */
export const getNotificationsProviders = <ThrowOnError extends boolean = false>(options?: Options<GetNotificationsProvidersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNotificationsProvidersResponses, GetNotificationsProvidersErrors, ThrowOnError>({
        url: '/notifications/providers',
        ...options
    });
};

/**
 * Create a notification provider
 * Create a new notification provider with the specified configuration
 */
export const postNotificationsProviders = <ThrowOnError extends boolean = false>(options: Options<PostNotificationsProvidersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostNotificationsProvidersResponses, PostNotificationsProvidersErrors, ThrowOnError>({
        url: '/notifications/providers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a notification provider
 * Delete a notification provider
 */
export const deleteNotificationsProvidersById = <ThrowOnError extends boolean = false>(options: Options<DeleteNotificationsProvidersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteNotificationsProvidersByIdResponses, DeleteNotificationsProvidersByIdErrors, ThrowOnError>({
        url: '/notifications/providers/{id}',
        ...options
    });
};

/**
 * Get a notification provider
 * Get detailed information about a specific notification provider
 */
export const getNotificationsProvidersById = <ThrowOnError extends boolean = false>(options: Options<GetNotificationsProvidersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNotificationsProvidersByIdResponses, GetNotificationsProvidersByIdErrors, ThrowOnError>({
        url: '/notifications/providers/{id}',
        ...options
    });
};

/**
 * Update a notification provider
 * Update an existing notification provider with new configuration
 */
export const putNotificationsProvidersById = <ThrowOnError extends boolean = false>(options: Options<PutNotificationsProvidersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutNotificationsProvidersByIdResponses, PutNotificationsProvidersByIdErrors, ThrowOnError>({
        url: '/notifications/providers/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Test a notification provider
 * Test a notification provider
 */
export const postNotificationsProvidersByIdTest = <ThrowOnError extends boolean = false>(options: Options<PostNotificationsProvidersByIdTestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostNotificationsProvidersByIdTestResponses, PostNotificationsProvidersByIdTestErrors, ThrowOnError>({
        url: '/notifications/providers/{id}/test',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List all Fabric organizations
 * Get a list of all Fabric organizations
 */
export const getOrganizations = <ThrowOnError extends boolean = false>(options?: Options<GetOrganizationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOrganizationsResponses, GetOrganizationsErrors, ThrowOnError>({
        url: '/organizations',
        ...options
    });
};

/**
 * Create a new Fabric organization
 * Create a new Fabric organization with the specified configuration
 */
export const postOrganizations = <ThrowOnError extends boolean = false>(options: Options<PostOrganizationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostOrganizationsResponses, PostOrganizationsErrors, ThrowOnError>({
        url: '/organizations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get a Fabric organization by MSP ID
 * Get a Fabric organization by MSP ID
 */
export const getOrganizationsByMspidByMspid = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsByMspidByMspidData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationsByMspidByMspidResponses, GetOrganizationsByMspidByMspidErrors, ThrowOnError>({
        url: '/organizations/by-mspid/{mspid}',
        ...options
    });
};

/**
 * Delete a Fabric organization
 * Delete a Fabric organization by ID
 */
export const deleteOrganizationsById = <ThrowOnError extends boolean = false>(options: Options<DeleteOrganizationsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOrganizationsByIdResponses, DeleteOrganizationsByIdErrors, ThrowOnError>({
        url: '/organizations/{id}',
        ...options
    });
};

/**
 * Get a Fabric organization
 * Get a Fabric organization by ID
 */
export const getOrganizationsById = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationsByIdResponses, GetOrganizationsByIdErrors, ThrowOnError>({
        url: '/organizations/{id}',
        ...options
    });
};

/**
 * Update a Fabric organization
 * Update an existing Fabric organization
 */
export const putOrganizationsById = <ThrowOnError extends boolean = false>(options: Options<PutOrganizationsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutOrganizationsByIdResponses, PutOrganizationsByIdErrors, ThrowOnError>({
        url: '/organizations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get organization's CRL
 * Get the current Certificate Revocation List for the organization
 */
export const getOrganizationsByIdCrl = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsByIdCrlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationsByIdCrlResponses, GetOrganizationsByIdCrlErrors, ThrowOnError>({
        url: '/organizations/{id}/crl',
        ...options
    });
};

/**
 * Revoke a certificate using PEM data
 * Add a certificate to the organization's CRL using its PEM encoded data
 */
export const postOrganizationsByIdCrlRevokePem = <ThrowOnError extends boolean = false>(options: Options<PostOrganizationsByIdCrlRevokePemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostOrganizationsByIdCrlRevokePemResponses, PostOrganizationsByIdCrlRevokePemErrors, ThrowOnError>({
        url: '/organizations/{id}/crl/revoke/pem',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a revoked certificate using its serial number
 * Remove a certificate from the organization's CRL using its serial number
 */
export const deleteOrganizationsByIdCrlRevokeSerial = <ThrowOnError extends boolean = false>(options: Options<DeleteOrganizationsByIdCrlRevokeSerialData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOrganizationsByIdCrlRevokeSerialResponses, DeleteOrganizationsByIdCrlRevokeSerialErrors, ThrowOnError>({
        url: '/organizations/{id}/crl/revoke/serial',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Revoke a certificate using its serial number
 * Add a certificate to the organization's CRL using its serial number
 */
export const postOrganizationsByIdCrlRevokeSerial = <ThrowOnError extends boolean = false>(options: Options<PostOrganizationsByIdCrlRevokeSerialData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostOrganizationsByIdCrlRevokeSerialResponses, PostOrganizationsByIdCrlRevokeSerialErrors, ThrowOnError>({
        url: '/organizations/{id}/crl/revoke/serial',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List all keys for an organization
 * Get all keys associated with an organization
 */
export const getOrganizationsByIdKeys = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsByIdKeysData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationsByIdKeysResponses, GetOrganizationsByIdKeysErrors, ThrowOnError>({
        url: '/organizations/{id}/keys',
        ...options
    });
};

/**
 * Create a new key for an organization
 * Create a new key with a specific role (admin or client) for an organization
 */
export const postOrganizationsByIdKeys = <ThrowOnError extends boolean = false>(options: Options<PostOrganizationsByIdKeysData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostOrganizationsByIdKeysResponses, PostOrganizationsByIdKeysErrors, ThrowOnError>({
        url: '/organizations/{id}/keys',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Renew a certificate for a key
 * Renew a certificate for a specific key in an organization
 */
export const postOrganizationsByIdKeysRenew = <ThrowOnError extends boolean = false>(options: Options<PostOrganizationsByIdKeysRenewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostOrganizationsByIdKeysRenewResponses, PostOrganizationsByIdKeysRenewErrors, ThrowOnError>({
        url: '/organizations/{id}/keys/renew',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a key
 * Delete a key and its associated certificate
 */
export const deleteOrganizationsByIdKeysByKeyId = <ThrowOnError extends boolean = false>(options: Options<DeleteOrganizationsByIdKeysByKeyIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOrganizationsByIdKeysByKeyIdResponses, DeleteOrganizationsByIdKeysByKeyIdErrors, ThrowOnError>({
        url: '/organizations/{id}/keys/{keyId}',
        ...options
    });
};

/**
 * Get a specific key by ID
 * Get a specific key by its ID
 */
export const getOrganizationsByIdKeysByKeyId = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsByIdKeysByKeyIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationsByIdKeysByKeyIdResponses, GetOrganizationsByIdKeysByKeyIdErrors, ThrowOnError>({
        url: '/organizations/{id}/keys/{keyId}',
        ...options
    });
};

/**
 * Get organization's revoked certificates
 * Get all revoked certificates for the organization
 */
export const getOrganizationsByIdRevokedCertificates = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsByIdRevokedCertificatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationsByIdRevokedCertificatesResponses, GetOrganizationsByIdRevokedCertificatesErrors, ThrowOnError>({
        url: '/organizations/{id}/revoked-certificates',
        ...options
    });
};

/**
 * List all plugins
 * Get a list of all available plugins
 */
export const getPlugins = <ThrowOnError extends boolean = false>(options?: Options<GetPluginsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPluginsResponses, GetPluginsErrors, ThrowOnError>({
        url: '/plugins',
        ...options
    });
};

/**
 * Create a plugin
 * Create a new plugin
 */
export const postPlugins = <ThrowOnError extends boolean = false>(options: Options<PostPluginsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostPluginsResponses, PostPluginsErrors, ThrowOnError>({
        url: '/plugins',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List available plugins from GitHub sources
 * Get a list of all available plugins from configured GitHub repositories
 */
export const getPluginsAvailable = <ThrowOnError extends boolean = false>(options?: Options<GetPluginsAvailableData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPluginsAvailableResponses, GetPluginsAvailableErrors, ThrowOnError>({
        url: '/plugins/available',
        ...options
    });
};

/**
 * Refresh available plugins
 * Triggers a refresh of the available plugins cache from GitHub sources
 */
export const postPluginsAvailableRefresh = <ThrowOnError extends boolean = false>(options?: Options<PostPluginsAvailableRefreshData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostPluginsAvailableRefreshResponses, PostPluginsAvailableRefreshErrors, ThrowOnError>({
        url: '/plugins/available/refresh',
        ...options
    });
};

/**
 * Delete a plugin
 * Delete a plugin (will stop it first if running)
 */
export const deletePluginsByName = <ThrowOnError extends boolean = false>(options: Options<DeletePluginsByNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePluginsByNameResponses, DeletePluginsByNameErrors, ThrowOnError>({
        url: '/plugins/{name}',
        ...options
    });
};

/**
 * Get a plugin
 * Get a specific plugin by name
 */
export const getPluginsByName = <ThrowOnError extends boolean = false>(options: Options<GetPluginsByNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPluginsByNameResponses, GetPluginsByNameErrors, ThrowOnError>({
        url: '/plugins/{name}',
        ...options
    });
};

/**
 * Update a plugin
 * Update an existing plugin
 */
export const putPluginsByName = <ThrowOnError extends boolean = false>(options: Options<PutPluginsByNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutPluginsByNameResponses, PutPluginsByNameErrors, ThrowOnError>({
        url: '/plugins/{name}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Deploy a plugin
 * Deploy a plugin with the given parameters
 */
export const postPluginsByNameDeploy = <ThrowOnError extends boolean = false>(options: Options<PostPluginsByNameDeployData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostPluginsByNameDeployResponses, PostPluginsByNameDeployErrors, ThrowOnError>({
        url: '/plugins/{name}/deploy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get detailed deployment status
 * Get detailed information about a plugin deployment including service status, logs, and metrics
 */
export const getPluginsByNameDeploymentStatus = <ThrowOnError extends boolean = false>(options: Options<GetPluginsByNameDeploymentStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPluginsByNameDeploymentStatusResponses, GetPluginsByNameDeploymentStatusErrors, ThrowOnError>({
        url: '/plugins/{name}/deployment-status',
        ...options
    });
};

/**
 * Resume a plugin deployment
 * Resume a previously deployed plugin
 */
export const postPluginsByNameResume = <ThrowOnError extends boolean = false>(options: Options<PostPluginsByNameResumeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostPluginsByNameResumeResponses, PostPluginsByNameResumeErrors, ThrowOnError>({
        url: '/plugins/{name}/resume',
        ...options
    });
};

/**
 * Get Docker Compose services
 * Get all services defined in the plugin's docker-compose configuration
 */
export const getPluginsByNameServices = <ThrowOnError extends boolean = false>(options: Options<GetPluginsByNameServicesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPluginsByNameServicesResponses, GetPluginsByNameServicesErrors, ThrowOnError>({
        url: '/plugins/{name}/services',
        ...options
    });
};

/**
 * Get plugin deployment status
 * Get the current status of a plugin deployment
 */
export const getPluginsByNameStatus = <ThrowOnError extends boolean = false>(options: Options<GetPluginsByNameStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPluginsByNameStatusResponses, GetPluginsByNameStatusErrors, ThrowOnError>({
        url: '/plugins/{name}/status',
        ...options
    });
};

/**
 * Stop a plugin deployment
 * Stop a running plugin deployment
 */
export const postPluginsByNameStop = <ThrowOnError extends boolean = false>(options: Options<PostPluginsByNameStopData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostPluginsByNameStopResponses, PostPluginsByNameStopErrors, ThrowOnError>({
        url: '/plugins/{name}/stop',
        ...options
    });
};

/**
 * Create a directory
 * Create a new directory in a project
 */
export const postProjectsByProjectIdDirsCreate = <ThrowOnError extends boolean = false>(options: Options<PostProjectsByProjectIdDirsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProjectsByProjectIdDirsCreateResponses, PostProjectsByProjectIdDirsCreateErrors, ThrowOnError>({
        url: '/projects/{projectId}/dirs/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a directory
 * Delete a directory in a project
 */
export const deleteProjectsByProjectIdDirsDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectsByProjectIdDirsDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProjectsByProjectIdDirsDeleteResponses, DeleteProjectsByProjectIdDirsDeleteErrors, ThrowOnError>({
        url: '/projects/{projectId}/dirs/delete',
        ...options
    });
};

/**
 * List files and directories
 * List files and directories in a given project and directory. Large directories (e.g., node_modules) are summarized/skipped.
 */
export const getProjectsByProjectIdDirsList = <ThrowOnError extends boolean = false>(options: Options<GetProjectsByProjectIdDirsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectsByProjectIdDirsListResponses, GetProjectsByProjectIdDirsListErrors, ThrowOnError>({
        url: '/projects/{projectId}/dirs/list',
        ...options
    });
};

/**
 * Delete a file
 * Delete a file in a project
 */
export const deleteProjectsByProjectIdFilesDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectsByProjectIdFilesDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProjectsByProjectIdFilesDeleteResponses, DeleteProjectsByProjectIdFilesDeleteErrors, ThrowOnError>({
        url: '/projects/{projectId}/files/delete',
        ...options
    });
};

/**
 * List full project directory tree
 * List the full directory tree for a project, excluding large/ignored folders (e.g., node_modules, .git)
 */
export const getProjectsByProjectIdFilesEntries = <ThrowOnError extends boolean = false>(options: Options<GetProjectsByProjectIdFilesEntriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectsByProjectIdFilesEntriesResponses, GetProjectsByProjectIdFilesEntriesErrors, ThrowOnError>({
        url: '/projects/{projectId}/files/entries',
        ...options
    });
};

/**
 * List files
 * List files in a given project and directory
 */
export const getProjectsByProjectIdFilesList = <ThrowOnError extends boolean = false>(options: Options<GetProjectsByProjectIdFilesListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectsByProjectIdFilesListResponses, GetProjectsByProjectIdFilesListErrors, ThrowOnError>({
        url: '/projects/{projectId}/files/list',
        ...options
    });
};

/**
 * Read file contents
 * Get the contents of a file in a project
 */
export const getProjectsByProjectIdFilesRead = <ThrowOnError extends boolean = false>(options: Options<GetProjectsByProjectIdFilesReadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectsByProjectIdFilesReadResponses, GetProjectsByProjectIdFilesReadErrors, ThrowOnError>({
        url: '/projects/{projectId}/files/read',
        ...options
    });
};

/**
 * Write file contents
 * Write or modify the contents of a file in a project
 */
export const postProjectsByProjectIdFilesWrite = <ThrowOnError extends boolean = false>(options: Options<PostProjectsByProjectIdFilesWriteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProjectsByProjectIdFilesWriteResponses, PostProjectsByProjectIdFilesWriteErrors, ThrowOnError>({
        url: '/projects/{projectId}/files/write',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Deploy Besu smart contract
 * Deploy a smart contract to a Besu (EVM) network
 */
export const postScBesuDeploy = <ThrowOnError extends boolean = false>(options: Options<PostScBesuDeployData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostScBesuDeployResponses, PostScBesuDeployErrors, ThrowOnError>({
        url: '/sc/besu/deploy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List deployed Fabric chaincodes
 * List all Fabric chaincodes deployed via Docker
 */
export const getScFabricChaincodes = <ThrowOnError extends boolean = false>(options?: Options<GetScFabricChaincodesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetScFabricChaincodesResponses, GetScFabricChaincodesErrors, ThrowOnError>({
        url: '/sc/fabric/chaincodes',
        ...options
    });
};

/**
 * Create a chaincode
 * Create a new chaincode
 */
export const postScFabricChaincodes = <ThrowOnError extends boolean = false>(options: Options<PostScFabricChaincodesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostScFabricChaincodesResponses, PostScFabricChaincodesErrors, ThrowOnError>({
        url: '/sc/fabric/chaincodes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List chaincode definitions for a chaincode
 * List all definitions for a given chaincode
 */
export const getScFabricChaincodesByChaincodeIdDefinitions = <ThrowOnError extends boolean = false>(options: Options<GetScFabricChaincodesByChaincodeIdDefinitionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetScFabricChaincodesByChaincodeIdDefinitionsResponses, GetScFabricChaincodesByChaincodeIdDefinitionsErrors, ThrowOnError>({
        url: '/sc/fabric/chaincodes/{chaincodeId}/definitions',
        ...options
    });
};

/**
 * Create a chaincode definition
 * Create a new chaincode definition for a chaincode
 */
export const postScFabricChaincodesByChaincodeIdDefinitions = <ThrowOnError extends boolean = false>(options: Options<PostScFabricChaincodesByChaincodeIdDefinitionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostScFabricChaincodesByChaincodeIdDefinitionsResponses, PostScFabricChaincodesByChaincodeIdDefinitionsErrors, ThrowOnError>({
        url: '/sc/fabric/chaincodes/{chaincodeId}/definitions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get chaincode definition details by ID
 * Get detailed information about a specific chaincode definition including its events
 */
export const getScFabricChaincodesByChaincodeIdDefinitionsByDefinitionId = <ThrowOnError extends boolean = false>(options: Options<GetScFabricChaincodesByChaincodeIdDefinitionsByDefinitionIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetScFabricChaincodesByChaincodeIdDefinitionsByDefinitionIdResponses, GetScFabricChaincodesByChaincodeIdDefinitionsByDefinitionIdErrors, ThrowOnError>({
        url: '/sc/fabric/chaincodes/{chaincodeId}/definitions/{definitionId}',
        ...options
    });
};

/**
 * Invoke a chaincode
 * Invoke a transaction on a specific chaincode
 */
export const postScFabricChaincodesByChaincodeIdInvoke = <ThrowOnError extends boolean = false>(options: Options<PostScFabricChaincodesByChaincodeIdInvokeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostScFabricChaincodesByChaincodeIdInvokeResponses, PostScFabricChaincodesByChaincodeIdInvokeErrors, ThrowOnError>({
        url: '/sc/fabric/chaincodes/{chaincodeId}/invoke',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get chaincode metadata
 * Get metadata for a specific chaincode by executing org.hyperledger.fabric:GetMetadata
 */
export const getScFabricChaincodesByChaincodeIdMetadata = <ThrowOnError extends boolean = false>(options: Options<GetScFabricChaincodesByChaincodeIdMetadataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetScFabricChaincodesByChaincodeIdMetadataResponses, GetScFabricChaincodesByChaincodeIdMetadataErrors, ThrowOnError>({
        url: '/sc/fabric/chaincodes/{chaincodeId}/metadata',
        ...options
    });
};

/**
 * Query a chaincode
 * Query a specific chaincode
 */
export const postScFabricChaincodesByChaincodeIdQuery = <ThrowOnError extends boolean = false>(options: Options<PostScFabricChaincodesByChaincodeIdQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostScFabricChaincodesByChaincodeIdQueryResponses, PostScFabricChaincodesByChaincodeIdQueryErrors, ThrowOnError>({
        url: '/sc/fabric/chaincodes/{chaincodeId}/query',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a chaincode
 * Delete a chaincode by ID
 */
export const deleteScFabricChaincodesById = <ThrowOnError extends boolean = false>(options: Options<DeleteScFabricChaincodesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteScFabricChaincodesByIdResponses, DeleteScFabricChaincodesByIdErrors, ThrowOnError>({
        url: '/sc/fabric/chaincodes/{id}',
        ...options
    });
};

/**
 * Get Fabric chaincode details by ID
 * Get a specific Fabric chaincode and its Docker/runtime info by ID
 */
export const getScFabricChaincodesById = <ThrowOnError extends boolean = false>(options: Options<GetScFabricChaincodesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetScFabricChaincodesByIdResponses, GetScFabricChaincodesByIdErrors, ThrowOnError>({
        url: '/sc/fabric/chaincodes/{id}',
        ...options
    });
};

/**
 * Delete a chaincode definition
 * Delete a chaincode definition by ID
 */
export const deleteScFabricDefinitionsByDefinitionId = <ThrowOnError extends boolean = false>(options: Options<DeleteScFabricDefinitionsByDefinitionIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteScFabricDefinitionsByDefinitionIdResponses, DeleteScFabricDefinitionsByDefinitionIdErrors, ThrowOnError>({
        url: '/sc/fabric/definitions/{definitionId}',
        ...options
    });
};

/**
 * Update a chaincode definition
 * Update an existing chaincode definition by ID
 */
export const putScFabricDefinitionsByDefinitionId = <ThrowOnError extends boolean = false>(options: Options<PutScFabricDefinitionsByDefinitionIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutScFabricDefinitionsByDefinitionIdResponses, PutScFabricDefinitionsByDefinitionIdErrors, ThrowOnError>({
        url: '/sc/fabric/definitions/{definitionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Approve chaincode based on chaincode definition
 * Approve chaincode for a given definition
 */
export const postScFabricDefinitionsByDefinitionIdApprove = <ThrowOnError extends boolean = false>(options: Options<PostScFabricDefinitionsByDefinitionIdApproveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostScFabricDefinitionsByDefinitionIdApproveResponses, PostScFabricDefinitionsByDefinitionIdApproveErrors, ThrowOnError>({
        url: '/sc/fabric/definitions/{definitionId}/approve',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Commit chaincode based on chaincode definition
 * Commit chaincode for a given definition
 */
export const postScFabricDefinitionsByDefinitionIdCommit = <ThrowOnError extends boolean = false>(options: Options<PostScFabricDefinitionsByDefinitionIdCommitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostScFabricDefinitionsByDefinitionIdCommitResponses, PostScFabricDefinitionsByDefinitionIdCommitErrors, ThrowOnError>({
        url: '/sc/fabric/definitions/{definitionId}/commit',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Deploy chaincode based on chaincode definition (Docker)
 * Deploy chaincode for a given definition using Docker image
 */
export const postScFabricDefinitionsByDefinitionIdDeploy = <ThrowOnError extends boolean = false>(options: Options<PostScFabricDefinitionsByDefinitionIdDeployData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostScFabricDefinitionsByDefinitionIdDeployResponses, PostScFabricDefinitionsByDefinitionIdDeployErrors, ThrowOnError>({
        url: '/sc/fabric/definitions/{definitionId}/deploy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Docker info for a chaincode definition
 * Get Docker container info for a specific chaincode definition by ID
 */
export const getScFabricDefinitionsByDefinitionIdDockerInfo = <ThrowOnError extends boolean = false>(options: Options<GetScFabricDefinitionsByDefinitionIdDockerInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetScFabricDefinitionsByDefinitionIdDockerInfoResponses, GetScFabricDefinitionsByDefinitionIdDockerInfoErrors, ThrowOnError>({
        url: '/sc/fabric/definitions/{definitionId}/docker-info',
        ...options
    });
};

/**
 * Install chaincode based on chaincode definition
 * Install chaincode on peers for a given definition
 */
export const postScFabricDefinitionsByDefinitionIdInstall = <ThrowOnError extends boolean = false>(options: Options<PostScFabricDefinitionsByDefinitionIdInstallData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostScFabricDefinitionsByDefinitionIdInstallResponses, PostScFabricDefinitionsByDefinitionIdInstallErrors, ThrowOnError>({
        url: '/sc/fabric/definitions/{definitionId}/install',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get timeline of events for a chaincode definition
 * Get the timeline of install/approve/commit/deploy events for a chaincode definition
 */
export const getScFabricDefinitionsByDefinitionIdTimeline = <ThrowOnError extends boolean = false>(options: Options<GetScFabricDefinitionsByDefinitionIdTimelineData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetScFabricDefinitionsByDefinitionIdTimelineResponses, GetScFabricDefinitionsByDefinitionIdTimelineErrors, ThrowOnError>({
        url: '/sc/fabric/definitions/{definitionId}/timeline',
        ...options
    });
};

/**
 * Remove deployment for a chaincode definition
 * Remove the deployment (e.g., Docker container) for a given chaincode definition
 */
export const postScFabricDefinitionsByDefinitionIdUndeploy = <ThrowOnError extends boolean = false>(options: Options<PostScFabricDefinitionsByDefinitionIdUndeployData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostScFabricDefinitionsByDefinitionIdUndeployResponses, PostScFabricDefinitionsByDefinitionIdUndeployErrors, ThrowOnError>({
        url: '/sc/fabric/definitions/{definitionId}/undeploy',
        ...options
    });
};

/**
 * Deploy Fabric chaincode
 * Deploy a chaincode to a Fabric network (install, approve, commit)
 */
export const postScFabricDeploy = <ThrowOnError extends boolean = false>(options: Options<PostScFabricDeployData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostScFabricDeployResponses, PostScFabricDeployErrors, ThrowOnError>({
        url: '/sc/fabric/deploy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Approve Fabric chaincode
 * Approve a chaincode definition for an organization
 */
export const postScFabricPeerByPeerIdChaincodeApprove = <ThrowOnError extends boolean = false>(options: Options<PostScFabricPeerByPeerIdChaincodeApproveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostScFabricPeerByPeerIdChaincodeApproveResponses, PostScFabricPeerByPeerIdChaincodeApproveErrors, ThrowOnError>({
        url: '/sc/fabric/peer/{peerId}/chaincode/approve',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Commit Fabric chaincode
 * Commit a chaincode definition to the channel
 */
export const postScFabricPeerByPeerIdChaincodeCommit = <ThrowOnError extends boolean = false>(options: Options<PostScFabricPeerByPeerIdChaincodeCommitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostScFabricPeerByPeerIdChaincodeCommitResponses, PostScFabricPeerByPeerIdChaincodeCommitErrors, ThrowOnError>({
        url: '/sc/fabric/peer/{peerId}/chaincode/commit',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Install Fabric chaincode
 * Install a chaincode package on a Fabric peer
 */
export const postScFabricPeerByPeerIdChaincodeInstall = <ThrowOnError extends boolean = false>(options: Options<PostScFabricPeerByPeerIdChaincodeInstallData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostScFabricPeerByPeerIdChaincodeInstallResponses, PostScFabricPeerByPeerIdChaincodeInstallErrors, ThrowOnError>({
        url: '/sc/fabric/peer/{peerId}/chaincode/install',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Fabric chaincode sequence
 * Get the current sequence number for a chaincode
 */
export const getScFabricPeerByPeerIdChaincodeSequence = <ThrowOnError extends boolean = false>(options: Options<GetScFabricPeerByPeerIdChaincodeSequenceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetScFabricPeerByPeerIdChaincodeSequenceResponses, GetScFabricPeerByPeerIdChaincodeSequenceErrors, ThrowOnError>({
        url: '/sc/fabric/peer/{peerId}/chaincode/sequence',
        ...options
    });
};

/**
 * Get the default setting
 * Get the default setting's details
 */
export const getSettings = <ThrowOnError extends boolean = false>(options?: Options<GetSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSettingsResponses, unknown, ThrowOnError>({
        url: '/settings',
        ...options
    });
};

/**
 * Create or update the default setting
 * Create or update the default setting with the provided configuration
 */
export const postSettings = <ThrowOnError extends boolean = false>(options: Options<PostSettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostSettingsResponses, unknown, ThrowOnError>({
        url: '/settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List users
 * Returns a list of all users (admin only)
 */
export const getUsers = <ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersResponses, GetUsersErrors, ThrowOnError>({
        url: '/users',
        ...options
    });
};

/**
 * Create new user
 * Creates a new user with specified role (admin only)
 */
export const postUsers = <ThrowOnError extends boolean = false>(options: Options<PostUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUsersResponses, PostUsersErrors, ThrowOnError>({
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete user
 * Deletes a user (admin only)
 */
export const deleteUsersById = <ThrowOnError extends boolean = false>(options: Options<DeleteUsersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUsersByIdResponses, DeleteUsersByIdErrors, ThrowOnError>({
        url: '/users/{id}',
        ...options
    });
};

/**
 * Get user by ID
 * Get a user's details by ID (admin only)
 */
export const getUsersById = <ThrowOnError extends boolean = false>(options: Options<GetUsersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUsersByIdResponses, GetUsersByIdErrors, ThrowOnError>({
        url: '/users/{id}',
        ...options
    });
};

/**
 * Update user
 * Updates an existing user (admin only)
 */
export const putUsersById = <ThrowOnError extends boolean = false>(options: Options<PutUsersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutUsersByIdResponses, PutUsersByIdErrors, ThrowOnError>({
        url: '/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update user password
 * Update a user's password (admin only)
 */
export const putUsersByIdPassword = <ThrowOnError extends boolean = false>(options: Options<PutUsersByIdPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutUsersByIdPasswordResponses, PutUsersByIdPasswordErrors, ThrowOnError>({
        url: '/users/{id}/password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update user role
 * Update a user's role (admin only)
 */
export const putUsersByIdRole = <ThrowOnError extends boolean = false>(options: Options<PutUsersByIdRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutUsersByIdRoleResponses, PutUsersByIdRoleErrors, ThrowOnError>({
        url: '/users/{id}/role',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};