// This file is auto-generated by @hey-api/openapi-ts

export type AuthLoginRequest = {
    password?: string;
    username?: string;
};

/**
 * Login response
 */
export type AuthLoginResponse = {
    /**
     * Success message
     * @Example "Login successful"
     */
    message?: string;
};

/**
 * Logout response
 */
export type AuthLogoutResponse = {
    /**
     * Success message
     * @Example "Logout successful"
     */
    message?: string;
};

/**
 * User information response
 */
export type AuthUserResponse = {
    /**
     * Time when the user was created
     * @Example "2024-01-01T00:00:00Z"
     */
    created_at?: string;
    /**
     * Last time the user logged in
     * @Example "2024-01-01T12:34:56Z"
     */
    last_login_at?: string;
    /**
     * Username of the user
     * @Example "admin"
     */
    username?: string;
};

export type CryptoX509ExtKeyUsage = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13;

export type CryptoX509KeyUsage = 1 | 2 | 4 | 8 | 16 | 32 | 64 | 128 | 256;

export type GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse = {
    code?: number;
    error?: string;
    message?: string;
};

export type GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse = {
    error?: string;
};

export type HandlerCreateOrganizationRequest = {
    description?: string;
    mspId: string;
    name: string;
    providerId?: number;
};

export type HandlerOrganizationResponse = {
    createdAt?: string;
    description?: string;
    id?: number;
    mspId?: string;
    providerId?: number;
    providerName?: string;
    signCertificate?: string;
    signPublicKey?: string;
    tlsCertificate?: string;
    tlsPublicKey?: string;
    updatedAt?: string;
};

export type HandlerUpdateOrganizationRequest = {
    description?: string;
};

export type HttpAddConsenterPayload = {
    client_tls_cert: string;
    host: string;
    port: number;
    server_tls_cert: string;
};

export type HttpAddNodeToNetworkRequest = {
    nodeId: number;
    role: 'peer' | 'orderer';
};

export type HttpAddOrgPayload = {
    msp_id: string;
    root_certs: Array<string>;
    tls_root_certs: Array<string>;
};

export type HttpAnchorPeer = {
    host: string;
    port: number;
};

export type HttpBackupResponse = {
    completedAt?: string;
    createdAt?: string;
    errorMessage?: string;
    id?: number;
    metadata?: unknown;
    scheduleId?: number;
    sizeBytes?: number;
    startedAt?: string;
    status?: string;
    targetId?: number;
};

export type HttpBackupScheduleResponse = {
    createdAt?: string;
    cronExpression?: string;
    description?: string;
    enabled?: boolean;
    id?: number;
    lastRunAt?: string;
    name?: string;
    nextRunAt?: string;
    retentionDays?: number;
    targetId?: number;
    updatedAt?: string;
};

export type HttpBackupTargetResponse = {
    accessKeyId?: string;
    bucketName?: string;
    bucketPath?: string;
    createdAt?: string;
    endpoint?: string;
    forcePathStyle?: boolean;
    id?: number;
    name?: string;
    region?: string;
    type?: string;
    updatedAt?: string;
};

export type HttpBesuNetworkResponse = {
    chainId?: number;
    config?: Array<number>;
    createdAt?: string;
    description?: string;
    genesisConfig?: Array<number>;
    id?: number;
    name?: string;
    platform?: string;
    status?: string;
    updatedAt?: string;
};

export type HttpChannelConfigResponse = {
    config?: {
        [key: string]: unknown;
    };
    name?: string;
};

export type HttpConsenterConfig = {
    id: string;
};

export type HttpCreateBackupRequest = {
    metadata?: unknown;
    scheduleId?: number;
    targetId: number;
};

/**
 * Request body for creating a new backup schedule
 */
export type HttpCreateBackupScheduleRequest = {
    /**
     * Cron expression for schedule
     * @Example "0 0 * * *"
     */
    cronExpression: string;
    /**
     * Optional description
     * @Example "Daily backup at midnight"
     */
    description?: string;
    /**
     * Whether the schedule is enabled
     * @Example true
     */
    enabled?: boolean;
    /**
     * Name of the backup schedule
     * @Example "daily-backup"
     */
    name: string;
    /**
     * Number of days to retain backups
     * @Example 30
     */
    retentionDays: number;
    /**
     * ID of the backup target to use
     * @Example 1
     */
    targetId: number;
};

/**
 * Request body for creating a new backup target
 */
export type HttpCreateBackupTargetRequest = {
    /**
     * AWS access key ID (required for S3 type)
     * @Example "AKIAXXXXXXXXXXXXXXXX"
     */
    accessKeyId?: string;
    /**
     * S3 bucket name (required for S3 type)
     * @Example "my-backup-bucket"
     */
    bucketName?: string;
    /**
     * Path within the bucket (required for S3 type)
     * @Example "backups/app1"
     */
    bucketPath?: string;
    /**
     * Custom S3 endpoint (optional)
     * @Example "https://s3.custom-domain.com"
     */
    endpoint?: string;
    /**
     * Use path-style S3 URLs
     * @Example false
     */
    forcePathStyle?: boolean;
    /**
     * Name of the backup target
     * @Example "daily-backup-s3"
     */
    name: string;
    /**
     * AWS region (required for S3 type)
     * @Example "us-east-1"
     */
    region?: string;
    /**
     * AWS secret key (required for S3 type)
     */
    secretKey?: string;
    /**
     * Type of backup target (S3 or LOCAL)
     * @Example "S3"
     */
    type: 'S3' | 'LOCAL';
};

/**
 * Request body for creating a new Besu network
 */
export type HttpCreateBesuNetworkRequest = {
    /**
     * @Description Network configuration
     */
    config: {
        /**
         * @Description Block period in seconds
         * @Default 5
         * @Required
         */
        blockPeriod: number;
        /**
         * @Description Chain ID for the network
         * @Default 1337
         * @Required
         */
        chainId: number;
        /**
         * @Description Optional coinbase address
         */
        coinbase?: string;
        /**
         * @Description Consensus algorithm (e.g. "qbft")
         * @Required
         */
        consensus: string;
        /**
         * @Description Optional difficulty value
         */
        difficulty?: string;
        /**
         * @Description Epoch length in blocks
         * @Default 30000
         * @Required
         */
        epochLength: number;
        /**
         * @Description Optional gas limit value
         */
        gasLimit?: string;
        /**
         * @Description List of initial validator key IDs
         * @Required
         * @MinItems 1
         */
        initialValidatorsKeyIds: Array<number>;
        /**
         * @Description Optional mix hash value
         */
        mixHash?: string;
        /**
         * @Description Optional nonce value
         */
        nonce?: string;
        /**
         * @Description Request timeout in seconds
         * @Required
         */
        requestTimeout: number;
        /**
         * @Description Optional timestamp value
         */
        timestamp?: string;
    };
    /**
     * @Description Optional description of the network
     */
    description?: string;
    /**
     * @Description Name of the network
     */
    name: string;
};

export type HttpCreateFabricNetworkRequest = {
    config: HttpFabricNetworkConfig;
    description?: string;
    name: string;
};

/**
 * Request payload for creating a new node
 */
export type HttpCreateNodeRequest = {
    /**
     * @Description Besu node configuration, required when creating a Besu node
     */
    besuNode?: TypesBesuNodeConfig;
    /**
     * @Description Blockchain platform (fabric or besu)
     */
    blockchainPlatform: TypesBlockchainPlatform;
    /**
     * @Description Fabric orderer configuration, required when creating a Fabric orderer node
     */
    fabricOrderer?: TypesFabricOrdererConfig;
    /**
     * @Description Fabric peer configuration, required when creating a Fabric peer node
     */
    fabricPeer?: TypesFabricPeerConfig;
    /**
     * @Description Name of the node
     */
    name: string;
};

export type HttpCreateProviderRequest = {
    config: unknown;
    isDefault?: boolean;
    name: string;
    notifyBackupFailure?: boolean;
    notifyBackupSuccess?: boolean;
    notifyNodeDowntime?: boolean;
    notifyS3ConnIssue?: boolean;
    type: 'SMTP';
};

export type HttpExternalOrgConfig = {
    consenters?: Array<HttpConsenterConfig>;
    id: string;
    mspid: string;
};

export type HttpFabricNetworkConfig = {
    externalOrdererOrgs?: Array<HttpExternalOrgConfig>;
    externalPeerOrgs?: Array<HttpExternalOrgConfig>;
    ordererOrganizations?: Array<HttpOrganizationConfig>;
    peerOrganizations?: Array<HttpOrganizationConfig>;
};

export type HttpGetNetworkNodesResponse = {
    nodes?: Array<ServiceNetworkNode>;
};

export type HttpImportBesuNetworkRequest = {
    chainId: number;
    description?: string;
    genesisFile: string;
    name: string;
};

export type HttpImportFabricNetworkRequest = {
    description?: string;
    genesisFile: string;
};

export type HttpImportFabricNetworkWithOrgRequest = {
    channelId: string;
    description?: string;
    ordererTlsCert: string;
    ordererUrl: string;
    organizationId: number;
};

export type HttpImportNetworkResponse = {
    message?: string;
    networkId?: string;
};

export type HttpListBesuNetworksResponse = {
    networks?: Array<HttpBesuNetworkResponse>;
    total?: number;
};

export type HttpListNetworksResponse = {
    networks?: Array<HttpNetworkResponse>;
    total?: number;
};

export type HttpNetworkResponse = {
    config?: Array<number>;
    createdAt?: string;
    createdBy?: number;
    currentConfigBlock?: string;
    deploymentConfig?: Array<number>;
    description?: string;
    domain?: string;
    exposedPorts?: Array<number>;
    genesisBlock?: string;
    id?: number;
    name?: string;
    platform?: string;
    status?: string;
    updatedAt?: string;
};

export type HttpNodeEventResponse = {
    created_at?: string;
    data?: unknown;
    id?: number;
    node_id?: number;
    type?: string;
};

export type HttpNodeResponse = {
    besuNode?: ServiceBesuNodeProperties;
    createdAt?: string;
    endpoint?: string;
    fabricOrderer?: ServiceFabricOrdererProperties;
    fabricPeer?: ServiceFabricPeerProperties;
    id?: number;
    name?: string;
    nodeType?: string;
    platform?: string;
    status?: string;
    updatedAt?: string;
};

export type HttpOrganizationConfig = {
    id: number;
    nodeIds: Array<number>;
};

export type HttpPaginatedNodeEventsResponse = {
    items?: Array<HttpNodeEventResponse>;
    page?: number;
    total?: number;
};

export type HttpPaginatedNodesResponse = {
    hasNextPage?: boolean;
    items?: Array<HttpNodeResponse>;
    page?: number;
    pageCount?: number;
    total?: number;
};

export type HttpProviderResponse = {
    config?: unknown;
    createdAt?: string;
    id?: number;
    isDefault?: boolean;
    lastTestAt?: string;
    lastTestMessage?: string;
    lastTestStatus?: string;
    name?: string;
    notifyBackupFailure?: boolean;
    notifyBackupSuccess?: boolean;
    notifyNodeDowntime?: boolean;
    notifyS3ConnIssue?: boolean;
    type?: NotificationsProviderType;
    updatedAt?: string;
};

export type HttpRemoveConsenterPayload = {
    host: string;
    port: number;
};

export type HttpRemoveOrgPayload = {
    msp_id: string;
};

export type HttpSetAnchorPeersPayload = {
    anchor_peers: Array<{
        host: string;
        port: number;
    }>;
    msp_id: string;
};

export type HttpSetAnchorPeersRequest = {
    anchorPeers: Array<HttpAnchorPeer>;
    organizationId: number;
};

export type HttpSetAnchorPeersResponse = {
    transactionId?: string;
};

export type HttpTestProviderRequest = {
    testEmail: string;
};

export type HttpTestProviderResponse = {
    message?: string;
    status?: string;
    testedAt?: string;
};

export type HttpUpdateBackupScheduleRequest = {
    cronExpression: string;
    description?: string;
    enabled?: boolean;
    name: string;
    retentionDays: number;
    targetId: number;
};

export type HttpUpdateBackupTargetRequest = {
    accessKeyId?: string;
    bucketName?: string;
    bucketPath?: string;
    endpoint?: string;
    forcePathStyle?: boolean;
    name: string;
    region?: string;
    secretKey?: string;
    type: 'S3' | 'LOCAL';
};

export type HttpUpdateBatchSizePayload = {
    absolute_max_bytes: number;
    max_message_count: number;
    preferred_max_bytes: number;
};

export type HttpUpdateBatchTimeoutPayload = {
    /**
     * e.g., "2s"
     */
    timeout: string;
};

export type HttpUpdateConsenterPayload = {
    client_tls_cert: string;
    host: string;
    new_host: string;
    new_port: number;
    port: number;
    server_tls_cert: string;
};

export type HttpUpdateEtcdRaftOptionsPayload = {
    election_tick: number;
    heartbeat_tick: number;
    max_inflight_blocks: number;
    snapshot_interval_size: number;
    tick_interval: string;
};

export type HttpUpdateOrgMspPayload = {
    msp_id: string;
    root_certs: Array<string>;
    tls_root_certs: Array<string>;
};

export type HttpUpdateProviderRequest = {
    config: unknown;
    isDefault?: boolean;
    name: string;
    notifyBackupFailure?: boolean;
    notifyBackupSuccess?: boolean;
    notifyNodeDowntime?: boolean;
    notifyS3ConnIssue?: boolean;
    type: 'SMTP';
};

export type ModelsCertificateRequest = {
    commonName: string;
    country?: Array<string>;
    dnsNames?: Array<string>;
    emailAddresses?: Array<string>;
    extKeyUsage?: Array<CryptoX509ExtKeyUsage>;
    ipAddresses?: Array<Array<number>>;
    isCA?: boolean;
    keyUsage?: CryptoX509KeyUsage;
    locality?: Array<string>;
    organization?: Array<string>;
    organizationalUnit?: Array<string>;
    postalCode?: Array<string>;
    province?: Array<string>;
    streetAddress?: Array<string>;
    uris?: Array<UrlUrl>;
    validFor: ModelsDuration;
};

/**
 * Supported key algorithms
 */
export type ModelsCreateKeyRequest = {
    /**
     * Key algorithm (RSA, EC, ED25519)
     * @Required
     */
    algorithm: 'RSA' | 'EC' | 'ED25519';
    /**
     * Optional: configure CA certificate properties
     */
    certificate?: ModelsCertificateRequest;
    /**
     * Elliptic curve name (for EC keys)
     */
    curve?: ModelsEcCurve;
    /**
     * Optional description
     */
    description?: string;
    /**
     * Whether this key is a CA
     */
    isCA?: number;
    /**
     * Key size in bits (for RSA)
     */
    keySize?: number;
    /**
     * Name of the key
     * @Required
     */
    name: string;
    /**
     * Optional provider ID
     */
    providerId?: number;
};

export type ModelsCreateProviderRequest = {
    config?: Array<number>;
    isDefault: 0 | 1;
    name: string;
    type: 'DATABASE' | 'VAULT' | 'HSM';
};

export type ModelsDuration = -9223372036854776000 | 9223372036854776000 | 1 | 1000 | 1000000 | 1000000000 | 60000000000 | 3600000000000;

export type ModelsEcCurve = 'P-256' | 'P-384' | 'P-521' | 'secp256k1';

export type ModelsKeyAlgorithm = 'RSA' | 'EC' | 'ED25519';

export type ModelsKeyProviderInfo = {
    id?: number;
    name?: string;
};

export type ModelsKeyProviderType = 'DATABASE' | 'VAULT' | 'HSM';

export type ModelsKeyResponse = {
    algorithm?: ModelsKeyAlgorithm;
    certificate?: string;
    createdAt?: string;
    curve?: ModelsEcCurve;
    description?: string;
    ethereumAddress?: string;
    expiresAt?: string;
    format?: string;
    id?: number;
    keySize?: number;
    lastRotatedAt?: string;
    name?: string;
    privateKey?: string;
    provider?: ModelsKeyProviderInfo;
    publicKey?: string;
    sha1Fingerprint?: string;
    sha256Fingerprint?: string;
    status?: string;
};

export type ModelsPaginatedResponse = {
    items?: Array<ModelsKeyResponse>;
    page?: number;
    pageSize?: number;
    totalItems?: number;
};

export type ModelsProviderResponse = {
    config?: Array<number>;
    createdAt?: string;
    id?: number;
    isDefault?: number;
    name?: string;
    type?: ModelsKeyProviderType;
};

export type NotificationsProviderType = 'SMTP';

export type ResponseErrorResponse = {
    details?: {
        [key: string]: unknown;
    };
    message?: string;
    type?: string;
};

export type ResponseResponse = {
    data?: unknown;
    error?: ResponseErrorResponse;
    success?: boolean;
};

export type ServiceBesuNodeDefaults = {
    externalIP?: string;
    internalIP?: string;
    mode?: ServiceMode;
    networkId?: number;
    p2pAddress?: string;
    rpcAddress?: string;
};

export type ServiceBesuNodeProperties = {
    enodeUrl?: string;
    externalIp?: string;
    internalIp?: string;
    keyId?: number;
    mode?: string;
    networkId?: number;
    /**
     * Add deployment config fields
     */
    p2pHost?: string;
    p2pPort?: number;
    rpcHost?: string;
    rpcPort?: number;
};

export type ServiceFabricOrdererProperties = {
    adminAddress?: string;
    domainNames?: Array<string>;
    externalEndpoint?: string;
    listenAddress?: string;
    mode?: string;
    mspId?: string;
    operationsAddress?: string;
    organizationId?: number;
    signCaCert?: string;
    /**
     * Add certificate information
     */
    signCert?: string;
    /**
     * Add deployment config fields
     */
    signKeyId?: number;
    tlsCaCert?: string;
    tlsCert?: string;
    tlsKeyId?: number;
};

export type ServiceFabricPeerProperties = {
    chaincodeAddress?: string;
    domainNames?: Array<string>;
    eventsAddress?: string;
    externalEndpoint?: string;
    listenAddress?: string;
    mode?: string;
    mspId?: string;
    operationsAddress?: string;
    organizationId?: number;
    signCaCert?: string;
    /**
     * Add certificate information
     */
    signCert?: string;
    /**
     * Add deployment config fields
     */
    signKeyId?: number;
    tlsCaCert?: string;
    tlsCert?: string;
    tlsKeyId?: number;
};

export type ServiceMode = 'service' | 'docker';

export type ServiceNetworkNode = {
    createdAt?: string;
    id?: number;
    networkId?: number;
    node?: ServiceNode;
    nodeId?: number;
    role?: string;
    status?: string;
    updatedAt?: string;
};

export type ServiceNode = {
    createdAt?: string;
    /**
     * Node deployment configuration interface that can be one of: FabricPeerDeploymentConfig, FabricOrdererDeploymentConfig, or BesuNodeDeploymentConfig
     */
    deploymentConfig?: unknown;
    endpoint?: string;
    id?: number;
    mspId?: string;
    name?: string;
    /**
     * Base interface for all node configurations
     */
    nodeConfig?: unknown;
    nodeType?: TypesNodeType;
    platform?: TypesBlockchainPlatform;
    publicEndpoint?: string;
    status?: TypesNodeStatus;
    updatedAt?: string;
};

export type ServiceNodeDefaults = {
    adminAddress?: string;
    chaincodeAddress?: string;
    containerName?: string;
    errorLogPath?: string;
    eventsAddress?: string;
    externalEndpoint?: string;
    listenAddress?: string;
    logPath?: string;
    mode?: ServiceMode;
    operationsListenAddress?: string;
    serviceName?: string;
};

export type ServiceNodesDefaultsResult = {
    availableAddresses?: Array<string>;
    orderers?: Array<ServiceNodeDefaults>;
    peers?: Array<ServiceNodeDefaults>;
};

export type TypesBesuNodeConfig = {
    bootNodes?: Array<string>;
    env?: {
        [key: string]: string;
    };
    externalIp: string;
    internalIp: string;
    keyId: number;
    /**
     * @Description The deployment mode (service or docker)
     */
    mode?: string;
    networkId: number;
    p2pHost: string;
    p2pPort: number;
    rpcHost: string;
    rpcPort: number;
    /**
     * @Description The type of node (fabric-peer, fabric-orderer, besu)
     */
    type?: string;
};

export type TypesBlockchainPlatform = 'FABRIC' | 'BESU';

export type TypesFabricOrdererConfig = {
    adminAddress?: string;
    domainNames?: Array<string>;
    env?: {
        [key: string]: string;
    };
    externalEndpoint?: string;
    listenAddress?: string;
    /**
     * @Description The deployment mode (service or docker)
     */
    mode?: string;
    mspId: string;
    name: string;
    operationsListenAddress?: string;
    organizationId: number;
    /**
     * @Description The type of node (fabric-peer, fabric-orderer, besu)
     */
    type?: string;
    /**
     * Fabric version to use
     */
    version?: string;
};

/**
 * Configuration for creating a new Fabric peer node
 */
export type TypesFabricPeerConfig = {
    /**
     * @Description Chaincode listen address
     */
    chaincodeAddress?: string;
    /**
     * @Description Domain names for the peer
     */
    domainNames?: Array<string>;
    /**
     * @Description Environment variables for the peer
     */
    env?: {
        [key: string]: string;
    };
    /**
     * @Description Events listen address
     */
    eventsAddress?: string;
    /**
     * @Description External endpoint for the peer
     */
    externalEndpoint?: string;
    /**
     * @Description Listen address for the peer
     */
    listenAddress?: string;
    /**
     * @Description The deployment mode (service or docker)
     */
    mode?: string;
    /**
     * @Description MSP ID for the organization
     */
    mspId: string;
    /**
     * @Description Name of the peer node
     */
    name: string;
    /**
     * @Description Operations listen address
     */
    operationsListenAddress?: string;
    /**
     * @Description Organization ID that owns this peer
     */
    organizationId: number;
    /**
     * @Description The type of node (fabric-peer, fabric-orderer, besu)
     */
    type?: string;
    /**
     * @Description Fabric version to use
     */
    version?: string;
};

export type TypesNodeStatus = 'PENDING' | 'RUNNING' | 'STOPPED' | 'STOPPING' | 'STARTING' | 'ERROR';

export type TypesNodeType = 'FABRIC_PEER' | 'FABRIC_ORDERER' | 'BESU_FULLNODE';

export type UrlUrl = {
    /**
     * append a query ('?') even if RawQuery is empty
     */
    forceQuery?: boolean;
    /**
     * fragment for references, without '#'
     */
    fragment?: string;
    /**
     * host or host:port (see Hostname and Port methods)
     */
    host?: string;
    /**
     * do not emit empty host (authority)
     */
    omitHost?: boolean;
    /**
     * encoded opaque data
     */
    opaque?: string;
    /**
     * path (relative paths may omit leading slash)
     */
    path?: string;
    /**
     * encoded fragment hint (see EscapedFragment method)
     */
    rawFragment?: string;
    /**
     * encoded path hint (see EscapedPath method)
     */
    rawPath?: string;
    /**
     * encoded query values, without '?'
     */
    rawQuery?: string;
    scheme?: string;
    /**
     * username and password information
     */
    user?: UrlUserinfo;
};

export type UrlUserinfo = {
    [key: string]: unknown;
};

export type PostAuthLoginData = {
    /**
     * Login credentials
     */
    body: AuthLoginRequest;
    path?: never;
    query?: never;
    url: '/auth/login';
};

export type PostAuthLoginErrors = {
    /**
     * Invalid request body
     */
    400: string;
    /**
     * Invalid credentials
     */
    401: string;
    /**
     * Method not allowed
     */
    405: string;
};

export type PostAuthLoginError = PostAuthLoginErrors[keyof PostAuthLoginErrors];

export type PostAuthLoginResponses = {
    /**
     * Login successful
     */
    200: AuthLoginResponse;
};

export type PostAuthLoginResponse = PostAuthLoginResponses[keyof PostAuthLoginResponses];

export type PostAuthLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/logout';
};

export type PostAuthLogoutErrors = {
    /**
     * Method not allowed
     */
    405: string;
};

export type PostAuthLogoutError = PostAuthLogoutErrors[keyof PostAuthLogoutErrors];

export type PostAuthLogoutResponses = {
    /**
     * Logout successful
     */
    200: AuthLogoutResponse;
};

export type PostAuthLogoutResponse = PostAuthLogoutResponses[keyof PostAuthLogoutResponses];

export type GetAuthMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/me';
};

export type GetAuthMeErrors = {
    /**
     * Unauthorized
     */
    401: string;
};

export type GetAuthMeError = GetAuthMeErrors[keyof GetAuthMeErrors];

export type GetAuthMeResponses = {
    /**
     * User information
     */
    200: AuthUserResponse;
};

export type GetAuthMeResponse = GetAuthMeResponses[keyof GetAuthMeResponses];

export type GetBackupsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/backups';
};

export type GetBackupsErrors = {
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type GetBackupsError = GetBackupsErrors[keyof GetBackupsErrors];

export type GetBackupsResponses = {
    /**
     * OK
     */
    200: Array<HttpBackupResponse>;
};

export type GetBackupsResponse = GetBackupsResponses[keyof GetBackupsResponses];

export type PostBackupsData = {
    /**
     * Backup creation request
     */
    body: HttpCreateBackupRequest;
    path?: never;
    query?: never;
    url: '/backups';
};

export type PostBackupsErrors = {
    /**
     * Validation error
     */
    400: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type PostBackupsError = PostBackupsErrors[keyof PostBackupsErrors];

export type PostBackupsResponses = {
    /**
     * Created
     */
    201: HttpBackupResponse;
};

export type PostBackupsResponse = PostBackupsResponses[keyof PostBackupsResponses];

export type GetBackupsSchedulesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/backups/schedules';
};

export type GetBackupsSchedulesErrors = {
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type GetBackupsSchedulesError = GetBackupsSchedulesErrors[keyof GetBackupsSchedulesErrors];

export type GetBackupsSchedulesResponses = {
    /**
     * OK
     */
    200: Array<HttpBackupScheduleResponse>;
};

export type GetBackupsSchedulesResponse = GetBackupsSchedulesResponses[keyof GetBackupsSchedulesResponses];

export type PostBackupsSchedulesData = {
    /**
     * Backup schedule creation request
     */
    body: HttpCreateBackupScheduleRequest;
    path?: never;
    query?: never;
    url: '/backups/schedules';
};

export type PostBackupsSchedulesErrors = {
    /**
     * Validation error
     */
    400: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type PostBackupsSchedulesError = PostBackupsSchedulesErrors[keyof PostBackupsSchedulesErrors];

export type PostBackupsSchedulesResponses = {
    /**
     * Created
     */
    201: HttpBackupScheduleResponse;
};

export type PostBackupsSchedulesResponse = PostBackupsSchedulesResponses[keyof PostBackupsSchedulesResponses];

export type DeleteBackupsSchedulesByIdData = {
    body?: never;
    path: {
        /**
         * Schedule ID
         */
        id: number;
    };
    query?: never;
    url: '/backups/schedules/{id}';
};

export type DeleteBackupsSchedulesByIdErrors = {
    /**
     * Invalid ID format
     */
    400: ResponseResponse;
    /**
     * Schedule not found
     */
    404: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type DeleteBackupsSchedulesByIdError = DeleteBackupsSchedulesByIdErrors[keyof DeleteBackupsSchedulesByIdErrors];

export type DeleteBackupsSchedulesByIdResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetBackupsSchedulesByIdData = {
    body?: never;
    path: {
        /**
         * Schedule ID
         */
        id: number;
    };
    query?: never;
    url: '/backups/schedules/{id}';
};

export type GetBackupsSchedulesByIdErrors = {
    /**
     * Invalid ID format
     */
    400: ResponseResponse;
    /**
     * Schedule not found
     */
    404: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type GetBackupsSchedulesByIdError = GetBackupsSchedulesByIdErrors[keyof GetBackupsSchedulesByIdErrors];

export type GetBackupsSchedulesByIdResponses = {
    /**
     * OK
     */
    200: HttpBackupScheduleResponse;
};

export type GetBackupsSchedulesByIdResponse = GetBackupsSchedulesByIdResponses[keyof GetBackupsSchedulesByIdResponses];

export type PutBackupsSchedulesByIdData = {
    /**
     * Backup schedule update request
     */
    body: HttpUpdateBackupScheduleRequest;
    path: {
        /**
         * Schedule ID
         */
        id: number;
    };
    query?: never;
    url: '/backups/schedules/{id}';
};

export type PutBackupsSchedulesByIdErrors = {
    /**
     * Validation error
     */
    400: ResponseResponse;
    /**
     * Schedule not found
     */
    404: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type PutBackupsSchedulesByIdError = PutBackupsSchedulesByIdErrors[keyof PutBackupsSchedulesByIdErrors];

export type PutBackupsSchedulesByIdResponses = {
    /**
     * OK
     */
    200: HttpBackupScheduleResponse;
};

export type PutBackupsSchedulesByIdResponse = PutBackupsSchedulesByIdResponses[keyof PutBackupsSchedulesByIdResponses];

export type PutBackupsSchedulesByIdDisableData = {
    body?: never;
    path: {
        /**
         * Schedule ID
         */
        id: number;
    };
    query?: never;
    url: '/backups/schedules/{id}/disable';
};

export type PutBackupsSchedulesByIdDisableErrors = {
    /**
     * Validation error
     */
    400: ResponseResponse;
    /**
     * Schedule not found
     */
    404: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type PutBackupsSchedulesByIdDisableError = PutBackupsSchedulesByIdDisableErrors[keyof PutBackupsSchedulesByIdDisableErrors];

export type PutBackupsSchedulesByIdDisableResponses = {
    /**
     * OK
     */
    200: HttpBackupScheduleResponse;
};

export type PutBackupsSchedulesByIdDisableResponse = PutBackupsSchedulesByIdDisableResponses[keyof PutBackupsSchedulesByIdDisableResponses];

export type PutBackupsSchedulesByIdEnableData = {
    body?: never;
    path: {
        /**
         * Schedule ID
         */
        id: number;
    };
    query?: never;
    url: '/backups/schedules/{id}/enable';
};

export type PutBackupsSchedulesByIdEnableErrors = {
    /**
     * Validation error
     */
    400: ResponseResponse;
    /**
     * Schedule not found
     */
    404: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type PutBackupsSchedulesByIdEnableError = PutBackupsSchedulesByIdEnableErrors[keyof PutBackupsSchedulesByIdEnableErrors];

export type PutBackupsSchedulesByIdEnableResponses = {
    /**
     * OK
     */
    200: HttpBackupScheduleResponse;
};

export type PutBackupsSchedulesByIdEnableResponse = PutBackupsSchedulesByIdEnableResponses[keyof PutBackupsSchedulesByIdEnableResponses];

export type GetBackupsTargetsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/backups/targets';
};

export type GetBackupsTargetsErrors = {
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type GetBackupsTargetsError = GetBackupsTargetsErrors[keyof GetBackupsTargetsErrors];

export type GetBackupsTargetsResponses = {
    /**
     * OK
     */
    200: Array<HttpBackupTargetResponse>;
};

export type GetBackupsTargetsResponse = GetBackupsTargetsResponses[keyof GetBackupsTargetsResponses];

export type PostBackupsTargetsData = {
    /**
     * Backup target creation request
     */
    body: HttpCreateBackupTargetRequest;
    path?: never;
    query?: never;
    url: '/backups/targets';
};

export type PostBackupsTargetsErrors = {
    /**
     * Validation error
     */
    400: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type PostBackupsTargetsError = PostBackupsTargetsErrors[keyof PostBackupsTargetsErrors];

export type PostBackupsTargetsResponses = {
    /**
     * Created
     */
    201: HttpBackupTargetResponse;
};

export type PostBackupsTargetsResponse = PostBackupsTargetsResponses[keyof PostBackupsTargetsResponses];

export type DeleteBackupsTargetsByIdData = {
    body?: never;
    path: {
        /**
         * Backup Target ID
         */
        id: number;
    };
    query?: never;
    url: '/backups/targets/{id}';
};

export type DeleteBackupsTargetsByIdErrors = {
    /**
     * Invalid ID format
     */
    400: ResponseResponse;
    /**
     * Target not found
     */
    404: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type DeleteBackupsTargetsByIdError = DeleteBackupsTargetsByIdErrors[keyof DeleteBackupsTargetsByIdErrors];

export type DeleteBackupsTargetsByIdResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetBackupsTargetsByIdData = {
    body?: never;
    path: {
        /**
         * Backup Target ID
         */
        id: number;
    };
    query?: never;
    url: '/backups/targets/{id}';
};

export type GetBackupsTargetsByIdErrors = {
    /**
     * Invalid ID format
     */
    400: ResponseResponse;
    /**
     * Target not found
     */
    404: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type GetBackupsTargetsByIdError = GetBackupsTargetsByIdErrors[keyof GetBackupsTargetsByIdErrors];

export type GetBackupsTargetsByIdResponses = {
    /**
     * OK
     */
    200: HttpBackupTargetResponse;
};

export type GetBackupsTargetsByIdResponse = GetBackupsTargetsByIdResponses[keyof GetBackupsTargetsByIdResponses];

export type PutBackupsTargetsByIdData = {
    /**
     * Backup target update request
     */
    body: HttpUpdateBackupTargetRequest;
    path: {
        /**
         * Backup Target ID
         */
        id: number;
    };
    query?: never;
    url: '/backups/targets/{id}';
};

export type PutBackupsTargetsByIdErrors = {
    /**
     * Validation error
     */
    400: ResponseResponse;
    /**
     * Target not found
     */
    404: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type PutBackupsTargetsByIdError = PutBackupsTargetsByIdErrors[keyof PutBackupsTargetsByIdErrors];

export type PutBackupsTargetsByIdResponses = {
    /**
     * OK
     */
    200: HttpBackupTargetResponse;
};

export type PutBackupsTargetsByIdResponse = PutBackupsTargetsByIdResponses[keyof PutBackupsTargetsByIdResponses];

export type DeleteBackupsByIdData = {
    body?: never;
    path: {
        /**
         * Backup ID
         */
        id: number;
    };
    query?: never;
    url: '/backups/{id}';
};

export type DeleteBackupsByIdErrors = {
    /**
     * Invalid ID format
     */
    400: ResponseResponse;
    /**
     * Backup not found
     */
    404: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type DeleteBackupsByIdError = DeleteBackupsByIdErrors[keyof DeleteBackupsByIdErrors];

export type DeleteBackupsByIdResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetBackupsByIdData = {
    body?: never;
    path: {
        /**
         * Backup ID
         */
        id: number;
    };
    query?: never;
    url: '/backups/{id}';
};

export type GetBackupsByIdErrors = {
    /**
     * Invalid ID format
     */
    400: ResponseResponse;
    /**
     * Backup not found
     */
    404: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type GetBackupsByIdError = GetBackupsByIdErrors[keyof GetBackupsByIdErrors];

export type GetBackupsByIdResponses = {
    /**
     * OK
     */
    200: HttpBackupResponse;
};

export type GetBackupsByIdResponse = GetBackupsByIdResponses[keyof GetBackupsByIdResponses];

export type PostDummyData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
        /**
         * Proposal ID
         */
        proposalId: string;
    };
    query?: never;
    url: '/dummy';
};

export type PostDummyResponses = {
    /**
     * OK
     */
    200: HttpRemoveOrgPayload;
    /**
     * Created
     */
    201: HttpUpdateOrgMspPayload;
    /**
     * Accepted
     */
    202: HttpSetAnchorPeersPayload;
    /**
     * Non-Authoritative Information
     */
    203: HttpAddConsenterPayload;
    /**
     * No Content
     */
    204: HttpRemoveConsenterPayload;
    /**
     * Reset Content
     */
    205: HttpUpdateConsenterPayload;
    /**
     * Partial Content
     */
    206: HttpUpdateEtcdRaftOptionsPayload;
    /**
     * Multi-Status
     */
    207: HttpUpdateBatchSizePayload;
    /**
     * Already Reported
     */
    208: HttpUpdateBatchTimeoutPayload;
};

export type PostDummyResponse = PostDummyResponses[keyof PostDummyResponses];

export type GetKeyProvidersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/key-providers';
};

export type GetKeyProvidersErrors = {
    /**
     * Internal server error
     */
    500: {
        [key: string]: string;
    };
};

export type GetKeyProvidersError = GetKeyProvidersErrors[keyof GetKeyProvidersErrors];

export type GetKeyProvidersResponses = {
    /**
     * OK
     */
    200: Array<ModelsProviderResponse>;
};

export type GetKeyProvidersResponse = GetKeyProvidersResponses[keyof GetKeyProvidersResponses];

export type PostKeyProvidersData = {
    /**
     * Provider creation request
     */
    body: ModelsCreateProviderRequest;
    path?: never;
    query?: never;
    url: '/key-providers';
};

export type PostKeyProvidersErrors = {
    /**
     * Invalid request
     */
    400: {
        [key: string]: string;
    };
    /**
     * Internal server error
     */
    500: {
        [key: string]: string;
    };
};

export type PostKeyProvidersError = PostKeyProvidersErrors[keyof PostKeyProvidersErrors];

export type PostKeyProvidersResponses = {
    /**
     * Created
     */
    201: ModelsProviderResponse;
};

export type PostKeyProvidersResponse = PostKeyProvidersResponses[keyof PostKeyProvidersResponses];

export type DeleteKeyProvidersByIdData = {
    body?: never;
    path: {
        /**
         * Provider ID
         */
        id: number;
    };
    query?: never;
    url: '/key-providers/{id}';
};

export type DeleteKeyProvidersByIdErrors = {
    /**
     * Invalid ID
     */
    400: {
        [key: string]: string;
    };
    /**
     * Provider not found
     */
    404: {
        [key: string]: string;
    };
    /**
     * Provider has existing keys
     */
    409: {
        [key: string]: string;
    };
    /**
     * Internal server error
     */
    500: {
        [key: string]: string;
    };
};

export type DeleteKeyProvidersByIdError = DeleteKeyProvidersByIdErrors[keyof DeleteKeyProvidersByIdErrors];

export type DeleteKeyProvidersByIdResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetKeyProvidersByIdData = {
    body?: never;
    path: {
        /**
         * Provider ID
         */
        id: number;
    };
    query?: never;
    url: '/key-providers/{id}';
};

export type GetKeyProvidersByIdErrors = {
    /**
     * Invalid ID
     */
    400: {
        [key: string]: string;
    };
    /**
     * Provider not found
     */
    404: {
        [key: string]: string;
    };
    /**
     * Internal server error
     */
    500: {
        [key: string]: string;
    };
};

export type GetKeyProvidersByIdError = GetKeyProvidersByIdErrors[keyof GetKeyProvidersByIdErrors];

export type GetKeyProvidersByIdResponses = {
    /**
     * OK
     */
    200: ModelsProviderResponse;
};

export type GetKeyProvidersByIdResponse = GetKeyProvidersByIdResponses[keyof GetKeyProvidersByIdResponses];

export type GetKeysData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number
         */
        page?: number;
        /**
         * Page size
         */
        pageSize?: number;
    };
    url: '/keys';
};

export type GetKeysErrors = {
    /**
     * Internal server error
     */
    500: {
        [key: string]: string;
    };
};

export type GetKeysError = GetKeysErrors[keyof GetKeysErrors];

export type GetKeysResponses = {
    /**
     * OK
     */
    200: ModelsPaginatedResponse;
};

export type GetKeysResponse = GetKeysResponses[keyof GetKeysResponses];

export type PostKeysData = {
    /**
     * Key creation request
     */
    body: ModelsCreateKeyRequest;
    path?: never;
    query?: never;
    url: '/keys';
};

export type PostKeysErrors = {
    /**
     * Invalid request
     */
    400: {
        [key: string]: string;
    };
    /**
     * Internal server error
     */
    500: {
        [key: string]: string;
    };
};

export type PostKeysError = PostKeysErrors[keyof PostKeysErrors];

export type PostKeysResponses = {
    /**
     * Created
     */
    201: ModelsKeyResponse;
};

export type PostKeysResponse = PostKeysResponses[keyof PostKeysResponses];

export type GetKeysAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/keys/all';
};

export type GetKeysAllErrors = {
    /**
     * Internal server error
     */
    500: {
        [key: string]: string;
    };
};

export type GetKeysAllError = GetKeysAllErrors[keyof GetKeysAllErrors];

export type GetKeysAllResponses = {
    /**
     * OK
     */
    200: Array<ModelsKeyResponse>;
};

export type GetKeysAllResponse = GetKeysAllResponses[keyof GetKeysAllResponses];

export type GetKeysFilterData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Algorithm type (e.g., RSA, ECDSA)
         */
        algorithm?: string;
        /**
         * Curve type (e.g., P256, P384, P521)
         */
        curve?: string;
        /**
         * Page number
         */
        page?: number;
        /**
         * Page size
         */
        pageSize?: number;
    };
    url: '/keys/filter';
};

export type GetKeysFilterErrors = {
    /**
     * Invalid parameters
     */
    400: {
        [key: string]: string;
    };
    /**
     * Internal server error
     */
    500: {
        [key: string]: string;
    };
};

export type GetKeysFilterError = GetKeysFilterErrors[keyof GetKeysFilterErrors];

export type GetKeysFilterResponses = {
    /**
     * OK
     */
    200: ModelsPaginatedResponse;
};

export type GetKeysFilterResponse = GetKeysFilterResponses[keyof GetKeysFilterResponses];

export type DeleteKeysByIdData = {
    body?: never;
    path: {
        /**
         * Key ID
         */
        id: number;
    };
    query?: never;
    url: '/keys/{id}';
};

export type DeleteKeysByIdErrors = {
    /**
     * Invalid ID
     */
    400: {
        [key: string]: string;
    };
    /**
     * Key not found
     */
    404: {
        [key: string]: string;
    };
    /**
     * Internal server error
     */
    500: {
        [key: string]: string;
    };
};

export type DeleteKeysByIdError = DeleteKeysByIdErrors[keyof DeleteKeysByIdErrors];

export type DeleteKeysByIdResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetKeysByIdData = {
    body?: never;
    path: {
        /**
         * Key ID
         */
        id: number;
    };
    query?: never;
    url: '/keys/{id}';
};

export type GetKeysByIdErrors = {
    /**
     * Invalid ID
     */
    400: {
        [key: string]: string;
    };
    /**
     * Key not found
     */
    404: {
        [key: string]: string;
    };
    /**
     * Internal server error
     */
    500: {
        [key: string]: string;
    };
};

export type GetKeysByIdError = GetKeysByIdErrors[keyof GetKeysByIdErrors];

export type GetKeysByIdResponses = {
    /**
     * OK
     */
    200: ModelsKeyResponse;
};

export type GetKeysByIdResponse = GetKeysByIdResponses[keyof GetKeysByIdResponses];

export type PostKeysByKeyIdSignData = {
    /**
     * Certificate signing request
     */
    body: {
        [key: string]: unknown;
    };
    path: {
        /**
         * Key ID to sign
         */
        keyID: number;
    };
    query?: never;
    url: '/keys/{keyID}/sign';
};

export type PostKeysByKeyIdSignErrors = {
    /**
     * Invalid request
     */
    400: {
        [key: string]: string;
    };
    /**
     * Key not found
     */
    404: {
        [key: string]: string;
    };
    /**
     * Internal server error
     */
    500: {
        [key: string]: string;
    };
};

export type PostKeysByKeyIdSignError = PostKeysByKeyIdSignErrors[keyof PostKeysByKeyIdSignErrors];

export type PostKeysByKeyIdSignResponses = {
    /**
     * OK
     */
    200: ModelsKeyResponse;
};

export type PostKeysByKeyIdSignResponse = PostKeysByKeyIdSignResponses[keyof PostKeysByKeyIdSignResponses];

export type GetNetworksBesuData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Number of items to return (default: 10)
         */
        limit?: number;
        /**
         * Number of items to skip (default: 0)
         */
        offset?: number;
    };
    url: '/networks/besu';
};

export type GetNetworksBesuErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type GetNetworksBesuError = GetNetworksBesuErrors[keyof GetNetworksBesuErrors];

export type GetNetworksBesuResponses = {
    /**
     * OK
     */
    200: HttpListBesuNetworksResponse;
};

export type GetNetworksBesuResponse = GetNetworksBesuResponses[keyof GetNetworksBesuResponses];

export type PostNetworksBesuData = {
    /**
     * Network creation request
     */
    body: HttpCreateBesuNetworkRequest;
    path?: never;
    query?: never;
    url: '/networks/besu';
};

export type PostNetworksBesuErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type PostNetworksBesuError = PostNetworksBesuErrors[keyof PostNetworksBesuErrors];

export type PostNetworksBesuResponses = {
    /**
     * Created
     */
    201: HttpBesuNetworkResponse;
};

export type PostNetworksBesuResponse = PostNetworksBesuResponses[keyof PostNetworksBesuResponses];

export type PostNetworksBesuImportData = {
    /**
     * Import network request
     */
    body: HttpImportBesuNetworkRequest;
    path?: never;
    query?: never;
    url: '/networks/besu/import';
};

export type PostNetworksBesuImportErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type PostNetworksBesuImportError = PostNetworksBesuImportErrors[keyof PostNetworksBesuImportErrors];

export type PostNetworksBesuImportResponses = {
    /**
     * OK
     */
    200: HttpImportNetworkResponse;
};

export type PostNetworksBesuImportResponse = PostNetworksBesuImportResponses[keyof PostNetworksBesuImportResponses];

export type DeleteNetworksBesuByIdData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
    };
    query?: never;
    url: '/networks/besu/{id}';
};

export type DeleteNetworksBesuByIdErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Not Found
     */
    404: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type DeleteNetworksBesuByIdError = DeleteNetworksBesuByIdErrors[keyof DeleteNetworksBesuByIdErrors];

export type DeleteNetworksBesuByIdResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetNetworksBesuByIdData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
    };
    query?: never;
    url: '/networks/besu/{id}';
};

export type GetNetworksBesuByIdErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Not Found
     */
    404: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type GetNetworksBesuByIdError = GetNetworksBesuByIdErrors[keyof GetNetworksBesuByIdErrors];

export type GetNetworksBesuByIdResponses = {
    /**
     * OK
     */
    200: HttpBesuNetworkResponse;
};

export type GetNetworksBesuByIdResponse = GetNetworksBesuByIdResponses[keyof GetNetworksBesuByIdResponses];

export type GetNetworksFabricData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Number of items to return (default: 10)
         */
        limit?: number;
        /**
         * Number of items to skip (default: 0)
         */
        offset?: number;
    };
    url: '/networks/fabric';
};

export type GetNetworksFabricErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type GetNetworksFabricError = GetNetworksFabricErrors[keyof GetNetworksFabricErrors];

export type GetNetworksFabricResponses = {
    /**
     * OK
     */
    200: HttpListNetworksResponse;
};

export type GetNetworksFabricResponse = GetNetworksFabricResponses[keyof GetNetworksFabricResponses];

export type PostNetworksFabricData = {
    /**
     * Network creation request
     */
    body: HttpCreateFabricNetworkRequest;
    path?: never;
    query?: never;
    url: '/networks/fabric';
};

export type PostNetworksFabricErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type PostNetworksFabricError = PostNetworksFabricErrors[keyof PostNetworksFabricErrors];

export type PostNetworksFabricResponses = {
    /**
     * Created
     */
    201: HttpNetworkResponse;
};

export type PostNetworksFabricResponse = PostNetworksFabricResponses[keyof PostNetworksFabricResponses];

export type GetNetworksFabricByNameByNameData = {
    body?: never;
    path: {
        /**
         * Network Slug
         */
        slug: string;
    };
    query?: never;
    url: '/networks/fabric/by-name/{name}';
};

export type GetNetworksFabricByNameByNameErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Not Found
     */
    404: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type GetNetworksFabricByNameByNameError = GetNetworksFabricByNameByNameErrors[keyof GetNetworksFabricByNameByNameErrors];

export type GetNetworksFabricByNameByNameResponses = {
    /**
     * OK
     */
    200: HttpNetworkResponse;
};

export type GetNetworksFabricByNameByNameResponse = GetNetworksFabricByNameByNameResponses[keyof GetNetworksFabricByNameByNameResponses];

export type PostNetworksFabricImportData = {
    /**
     * Import network request
     */
    body: HttpImportFabricNetworkRequest;
    path?: never;
    query?: never;
    url: '/networks/fabric/import';
};

export type PostNetworksFabricImportErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type PostNetworksFabricImportError = PostNetworksFabricImportErrors[keyof PostNetworksFabricImportErrors];

export type PostNetworksFabricImportResponses = {
    /**
     * OK
     */
    200: HttpImportNetworkResponse;
};

export type PostNetworksFabricImportResponse = PostNetworksFabricImportResponses[keyof PostNetworksFabricImportResponses];

export type PostNetworksFabricImportWithOrgData = {
    /**
     * Import network with org request
     */
    body: HttpImportFabricNetworkWithOrgRequest;
    path?: never;
    query?: never;
    url: '/networks/fabric/import-with-org';
};

export type PostNetworksFabricImportWithOrgErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type PostNetworksFabricImportWithOrgError = PostNetworksFabricImportWithOrgErrors[keyof PostNetworksFabricImportWithOrgErrors];

export type PostNetworksFabricImportWithOrgResponses = {
    /**
     * OK
     */
    200: HttpImportNetworkResponse;
};

export type PostNetworksFabricImportWithOrgResponse = PostNetworksFabricImportWithOrgResponses[keyof PostNetworksFabricImportWithOrgResponses];

export type DeleteNetworksFabricByIdData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
    };
    query?: never;
    url: '/networks/fabric/{id}';
};

export type DeleteNetworksFabricByIdErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Not Found
     */
    404: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type DeleteNetworksFabricByIdError = DeleteNetworksFabricByIdErrors[keyof DeleteNetworksFabricByIdErrors];

export type DeleteNetworksFabricByIdResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetNetworksFabricByIdData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
    };
    query?: never;
    url: '/networks/fabric/{id}';
};

export type GetNetworksFabricByIdErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Not Found
     */
    404: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type GetNetworksFabricByIdError = GetNetworksFabricByIdErrors[keyof GetNetworksFabricByIdErrors];

export type GetNetworksFabricByIdResponses = {
    /**
     * OK
     */
    200: HttpNetworkResponse;
};

export type GetNetworksFabricByIdResponse = GetNetworksFabricByIdResponses[keyof GetNetworksFabricByIdResponses];

export type PostNetworksFabricByIdAnchorPeersData = {
    /**
     * Anchor peers configuration
     */
    body: HttpSetAnchorPeersRequest;
    path: {
        /**
         * Network ID
         */
        id: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/anchor-peers';
};

export type PostNetworksFabricByIdAnchorPeersErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type PostNetworksFabricByIdAnchorPeersError = PostNetworksFabricByIdAnchorPeersErrors[keyof PostNetworksFabricByIdAnchorPeersErrors];

export type PostNetworksFabricByIdAnchorPeersResponses = {
    /**
     * OK
     */
    200: HttpSetAnchorPeersResponse;
};

export type PostNetworksFabricByIdAnchorPeersResponse = PostNetworksFabricByIdAnchorPeersResponses[keyof PostNetworksFabricByIdAnchorPeersResponses];

export type GetNetworksFabricByIdChannelConfigData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/channel-config';
};

export type GetNetworksFabricByIdChannelConfigErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type GetNetworksFabricByIdChannelConfigError = GetNetworksFabricByIdChannelConfigErrors[keyof GetNetworksFabricByIdChannelConfigErrors];

export type GetNetworksFabricByIdChannelConfigResponses = {
    /**
     * OK
     */
    200: HttpChannelConfigResponse;
};

export type GetNetworksFabricByIdChannelConfigResponse = GetNetworksFabricByIdChannelConfigResponses[keyof GetNetworksFabricByIdChannelConfigResponses];

export type GetNetworksFabricByIdCurrentChannelConfigData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/current-channel-config';
};

export type GetNetworksFabricByIdCurrentChannelConfigErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type GetNetworksFabricByIdCurrentChannelConfigError = GetNetworksFabricByIdCurrentChannelConfigErrors[keyof GetNetworksFabricByIdCurrentChannelConfigErrors];

export type GetNetworksFabricByIdCurrentChannelConfigResponses = {
    /**
     * OK
     */
    200: HttpChannelConfigResponse;
};

export type GetNetworksFabricByIdCurrentChannelConfigResponse = GetNetworksFabricByIdCurrentChannelConfigResponses[keyof GetNetworksFabricByIdCurrentChannelConfigResponses];

export type GetNetworksFabricByIdNodesData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/nodes';
};

export type GetNetworksFabricByIdNodesErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Not Found
     */
    404: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type GetNetworksFabricByIdNodesError = GetNetworksFabricByIdNodesErrors[keyof GetNetworksFabricByIdNodesErrors];

export type GetNetworksFabricByIdNodesResponses = {
    /**
     * OK
     */
    200: HttpGetNetworkNodesResponse;
};

export type GetNetworksFabricByIdNodesResponse = GetNetworksFabricByIdNodesResponses[keyof GetNetworksFabricByIdNodesResponses];

export type PostNetworksFabricByIdNodesData = {
    /**
     * Node addition request
     */
    body: HttpAddNodeToNetworkRequest;
    path: {
        /**
         * Network ID
         */
        id: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/nodes';
};

export type PostNetworksFabricByIdNodesErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type PostNetworksFabricByIdNodesError = PostNetworksFabricByIdNodesErrors[keyof PostNetworksFabricByIdNodesErrors];

export type PostNetworksFabricByIdNodesResponses = {
    /**
     * OK
     */
    200: HttpNetworkResponse;
};

export type PostNetworksFabricByIdNodesResponse = PostNetworksFabricByIdNodesResponses[keyof PostNetworksFabricByIdNodesResponses];

export type DeleteNetworksFabricByIdOrderersByOrdererIdData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
        /**
         * Orderer ID
         */
        ordererId: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/orderers/{ordererId}';
};

export type DeleteNetworksFabricByIdOrderersByOrdererIdErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type DeleteNetworksFabricByIdOrderersByOrdererIdError = DeleteNetworksFabricByIdOrderersByOrdererIdErrors[keyof DeleteNetworksFabricByIdOrderersByOrdererIdErrors];

export type DeleteNetworksFabricByIdOrderersByOrdererIdResponses = {
    /**
     * OK
     */
    200: HttpNetworkResponse;
};

export type DeleteNetworksFabricByIdOrderersByOrdererIdResponse = DeleteNetworksFabricByIdOrderersByOrdererIdResponses[keyof DeleteNetworksFabricByIdOrderersByOrdererIdResponses];

export type PostNetworksFabricByIdOrderersByOrdererIdJoinData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
        /**
         * Orderer ID
         */
        ordererId: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/orderers/{ordererId}/join';
};

export type PostNetworksFabricByIdOrderersByOrdererIdJoinErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type PostNetworksFabricByIdOrderersByOrdererIdJoinError = PostNetworksFabricByIdOrderersByOrdererIdJoinErrors[keyof PostNetworksFabricByIdOrderersByOrdererIdJoinErrors];

export type PostNetworksFabricByIdOrderersByOrdererIdJoinResponses = {
    /**
     * OK
     */
    200: HttpNetworkResponse;
};

export type PostNetworksFabricByIdOrderersByOrdererIdJoinResponse = PostNetworksFabricByIdOrderersByOrdererIdJoinResponses[keyof PostNetworksFabricByIdOrderersByOrdererIdJoinResponses];

export type PostNetworksFabricByIdOrderersByOrdererIdUnjoinData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
        /**
         * Orderer ID
         */
        ordererId: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/orderers/{ordererId}/unjoin';
};

export type PostNetworksFabricByIdOrderersByOrdererIdUnjoinErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type PostNetworksFabricByIdOrderersByOrdererIdUnjoinError = PostNetworksFabricByIdOrderersByOrdererIdUnjoinErrors[keyof PostNetworksFabricByIdOrderersByOrdererIdUnjoinErrors];

export type PostNetworksFabricByIdOrderersByOrdererIdUnjoinResponses = {
    /**
     * OK
     */
    200: HttpNetworkResponse;
};

export type PostNetworksFabricByIdOrderersByOrdererIdUnjoinResponse = PostNetworksFabricByIdOrderersByOrdererIdUnjoinResponses[keyof PostNetworksFabricByIdOrderersByOrdererIdUnjoinResponses];

export type GetNetworksFabricByIdOrganizationsByOrgIdConfigData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
        /**
         * Organization ID
         */
        orgId: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/organizations/{orgId}/config';
};

export type GetNetworksFabricByIdOrganizationsByOrgIdConfigErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Not Found
     */
    404: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type GetNetworksFabricByIdOrganizationsByOrgIdConfigError = GetNetworksFabricByIdOrganizationsByOrgIdConfigErrors[keyof GetNetworksFabricByIdOrganizationsByOrgIdConfigErrors];

export type GetNetworksFabricByIdOrganizationsByOrgIdConfigResponses = {
    /**
     * Network configuration YAML
     */
    200: Blob | File;
};

export type GetNetworksFabricByIdOrganizationsByOrgIdConfigResponse = GetNetworksFabricByIdOrganizationsByOrgIdConfigResponses[keyof GetNetworksFabricByIdOrganizationsByOrgIdConfigResponses];

export type DeleteNetworksFabricByIdPeersByPeerIdData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
        /**
         * Peer ID
         */
        peerId: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/peers/{peerId}';
};

export type DeleteNetworksFabricByIdPeersByPeerIdErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type DeleteNetworksFabricByIdPeersByPeerIdError = DeleteNetworksFabricByIdPeersByPeerIdErrors[keyof DeleteNetworksFabricByIdPeersByPeerIdErrors];

export type DeleteNetworksFabricByIdPeersByPeerIdResponses = {
    /**
     * OK
     */
    200: HttpNetworkResponse;
};

export type DeleteNetworksFabricByIdPeersByPeerIdResponse = DeleteNetworksFabricByIdPeersByPeerIdResponses[keyof DeleteNetworksFabricByIdPeersByPeerIdResponses];

export type PostNetworksFabricByIdPeersByPeerIdJoinData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
        /**
         * Peer ID
         */
        peerId: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/peers/{peerId}/join';
};

export type PostNetworksFabricByIdPeersByPeerIdJoinErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type PostNetworksFabricByIdPeersByPeerIdJoinError = PostNetworksFabricByIdPeersByPeerIdJoinErrors[keyof PostNetworksFabricByIdPeersByPeerIdJoinErrors];

export type PostNetworksFabricByIdPeersByPeerIdJoinResponses = {
    /**
     * OK
     */
    200: HttpNetworkResponse;
};

export type PostNetworksFabricByIdPeersByPeerIdJoinResponse = PostNetworksFabricByIdPeersByPeerIdJoinResponses[keyof PostNetworksFabricByIdPeersByPeerIdJoinResponses];

export type PostNetworksFabricByIdPeersByPeerIdUnjoinData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
        /**
         * Peer ID
         */
        peerId: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/peers/{peerId}/unjoin';
};

export type PostNetworksFabricByIdPeersByPeerIdUnjoinErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type PostNetworksFabricByIdPeersByPeerIdUnjoinError = PostNetworksFabricByIdPeersByPeerIdUnjoinErrors[keyof PostNetworksFabricByIdPeersByPeerIdUnjoinErrors];

export type PostNetworksFabricByIdPeersByPeerIdUnjoinResponses = {
    /**
     * OK
     */
    200: HttpNetworkResponse;
};

export type PostNetworksFabricByIdPeersByPeerIdUnjoinResponse = PostNetworksFabricByIdPeersByPeerIdUnjoinResponses[keyof PostNetworksFabricByIdPeersByPeerIdUnjoinResponses];

export type PostNetworksFabricByIdReloadBlockData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/reload-block';
};

export type PostNetworksFabricByIdReloadBlockErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: string;
    };
    /**
     * Not Found
     */
    404: {
        [key: string]: string;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: string;
    };
};

export type PostNetworksFabricByIdReloadBlockError = PostNetworksFabricByIdReloadBlockErrors[keyof PostNetworksFabricByIdReloadBlockErrors];

export type PostNetworksFabricByIdReloadBlockResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: string;
    };
};

export type PostNetworksFabricByIdReloadBlockResponse = PostNetworksFabricByIdReloadBlockResponses[keyof PostNetworksFabricByIdReloadBlockResponses];

export type GetNodesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by blockchain platform
         */
        platform?: string;
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        limit?: number;
    };
    url: '/nodes';
};

export type GetNodesErrors = {
    /**
     * Validation error
     */
    400: ResponseErrorResponse;
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type GetNodesError = GetNodesErrors[keyof GetNodesErrors];

export type GetNodesResponses = {
    /**
     * OK
     */
    200: HttpPaginatedNodesResponse;
};

export type GetNodesResponse = GetNodesResponses[keyof GetNodesResponses];

export type PostNodesData = {
    /**
     * Node creation request
     */
    body: HttpCreateNodeRequest;
    path?: never;
    query?: never;
    url: '/nodes';
};

export type PostNodesErrors = {
    /**
     * Validation error
     */
    400: ResponseErrorResponse;
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type PostNodesError = PostNodesErrors[keyof PostNodesErrors];

export type PostNodesResponses = {
    /**
     * Created
     */
    201: HttpNodeResponse;
};

export type PostNodesResponse = PostNodesResponses[keyof PostNodesResponses];

export type GetNodesDefaultsBesuNodeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/nodes/defaults/besu-node';
};

export type GetNodesDefaultsBesuNodeErrors = {
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type GetNodesDefaultsBesuNodeError = GetNodesDefaultsBesuNodeErrors[keyof GetNodesDefaultsBesuNodeErrors];

export type GetNodesDefaultsBesuNodeResponses = {
    /**
     * OK
     */
    200: ServiceBesuNodeDefaults;
};

export type GetNodesDefaultsBesuNodeResponse = GetNodesDefaultsBesuNodeResponses[keyof GetNodesDefaultsBesuNodeResponses];

export type GetNodesDefaultsFabricData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Number of peer nodes
         */
        peerCount?: number;
        /**
         * Number of orderer nodes
         */
        ordererCount?: number;
        /**
         * Deployment mode
         */
        mode?: 'service' | 'docker';
    };
    url: '/nodes/defaults/fabric';
};

export type GetNodesDefaultsFabricErrors = {
    /**
     * Validation error
     */
    400: ResponseErrorResponse;
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type GetNodesDefaultsFabricError = GetNodesDefaultsFabricErrors[keyof GetNodesDefaultsFabricErrors];

export type GetNodesDefaultsFabricResponses = {
    /**
     * OK
     */
    200: ServiceNodesDefaultsResult;
};

export type GetNodesDefaultsFabricResponse = GetNodesDefaultsFabricResponses[keyof GetNodesDefaultsFabricResponses];

export type GetNodesDefaultsFabricOrdererData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/nodes/defaults/fabric-orderer';
};

export type GetNodesDefaultsFabricOrdererErrors = {
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type GetNodesDefaultsFabricOrdererError = GetNodesDefaultsFabricOrdererErrors[keyof GetNodesDefaultsFabricOrdererErrors];

export type GetNodesDefaultsFabricOrdererResponses = {
    /**
     * OK
     */
    200: ServiceNodeDefaults;
};

export type GetNodesDefaultsFabricOrdererResponse = GetNodesDefaultsFabricOrdererResponses[keyof GetNodesDefaultsFabricOrdererResponses];

export type GetNodesDefaultsFabricPeerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/nodes/defaults/fabric-peer';
};

export type GetNodesDefaultsFabricPeerErrors = {
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type GetNodesDefaultsFabricPeerError = GetNodesDefaultsFabricPeerErrors[keyof GetNodesDefaultsFabricPeerErrors];

export type GetNodesDefaultsFabricPeerResponses = {
    /**
     * OK
     */
    200: ServiceNodeDefaults;
};

export type GetNodesDefaultsFabricPeerResponse = GetNodesDefaultsFabricPeerResponses[keyof GetNodesDefaultsFabricPeerResponses];

export type GetNodesPlatformByPlatformData = {
    body?: never;
    path: {
        /**
         * Blockchain platform (FABRIC/BESU)
         */
        platform: 'FABRIC' | 'BESU';
    };
    query?: {
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        limit?: number;
    };
    url: '/nodes/platform/{platform}';
};

export type GetNodesPlatformByPlatformErrors = {
    /**
     * Validation error
     */
    400: ResponseErrorResponse;
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type GetNodesPlatformByPlatformError = GetNodesPlatformByPlatformErrors[keyof GetNodesPlatformByPlatformErrors];

export type GetNodesPlatformByPlatformResponses = {
    /**
     * OK
     */
    200: HttpPaginatedNodesResponse;
};

export type GetNodesPlatformByPlatformResponse = GetNodesPlatformByPlatformResponses[keyof GetNodesPlatformByPlatformResponses];

export type DeleteNodesByIdData = {
    body?: never;
    path: {
        /**
         * Node ID
         */
        id: number;
    };
    query?: never;
    url: '/nodes/{id}';
};

export type DeleteNodesByIdErrors = {
    /**
     * Validation error
     */
    400: ResponseErrorResponse;
    /**
     * Node not found
     */
    404: ResponseErrorResponse;
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type DeleteNodesByIdError = DeleteNodesByIdErrors[keyof DeleteNodesByIdErrors];

export type DeleteNodesByIdResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetNodesByIdData = {
    body?: never;
    path: {
        /**
         * Node ID
         */
        id: number;
    };
    query?: never;
    url: '/nodes/{id}';
};

export type GetNodesByIdErrors = {
    /**
     * Validation error
     */
    400: ResponseErrorResponse;
    /**
     * Node not found
     */
    404: ResponseErrorResponse;
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type GetNodesByIdError = GetNodesByIdErrors[keyof GetNodesByIdErrors];

export type GetNodesByIdResponses = {
    /**
     * OK
     */
    200: HttpNodeResponse;
};

export type GetNodesByIdResponse = GetNodesByIdResponses[keyof GetNodesByIdResponses];

export type GetNodesByIdEventsData = {
    body?: never;
    path: {
        /**
         * Node ID
         */
        id: number;
    };
    query?: {
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        limit?: number;
    };
    url: '/nodes/{id}/events';
};

export type GetNodesByIdEventsErrors = {
    /**
     * Validation error
     */
    400: ResponseErrorResponse;
    /**
     * Node not found
     */
    404: ResponseErrorResponse;
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type GetNodesByIdEventsError = GetNodesByIdEventsErrors[keyof GetNodesByIdEventsErrors];

export type GetNodesByIdEventsResponses = {
    /**
     * OK
     */
    200: HttpPaginatedNodeEventsResponse;
};

export type GetNodesByIdEventsResponse = GetNodesByIdEventsResponses[keyof GetNodesByIdEventsResponses];

export type GetNodesByIdLogsData = {
    body?: never;
    path: {
        /**
         * Node ID
         */
        id: number;
    };
    query?: {
        /**
         * Follow logs
         */
        follow?: boolean;
        /**
         * Number of lines to show from the end
         */
        tail?: number;
    };
    url: '/nodes/{id}/logs';
};

export type GetNodesByIdLogsErrors = {
    /**
     * Validation error
     */
    400: ResponseErrorResponse;
    /**
     * Node not found
     */
    404: ResponseErrorResponse;
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type GetNodesByIdLogsError = GetNodesByIdLogsErrors[keyof GetNodesByIdLogsErrors];

export type GetNodesByIdLogsResponses = {
    /**
     * Log stream
     */
    200: string;
};

export type GetNodesByIdLogsResponse = GetNodesByIdLogsResponses[keyof GetNodesByIdLogsResponses];

export type PostNodesByIdRestartData = {
    body?: never;
    path: {
        /**
         * Node ID
         */
        id: number;
    };
    query?: never;
    url: '/nodes/{id}/restart';
};

export type PostNodesByIdRestartErrors = {
    /**
     * Validation error
     */
    400: ResponseErrorResponse;
    /**
     * Node not found
     */
    404: ResponseErrorResponse;
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type PostNodesByIdRestartError = PostNodesByIdRestartErrors[keyof PostNodesByIdRestartErrors];

export type PostNodesByIdRestartResponses = {
    /**
     * OK
     */
    200: HttpNodeResponse;
};

export type PostNodesByIdRestartResponse = PostNodesByIdRestartResponses[keyof PostNodesByIdRestartResponses];

export type PostNodesByIdStartData = {
    body?: never;
    path: {
        /**
         * Node ID
         */
        id: number;
    };
    query?: never;
    url: '/nodes/{id}/start';
};

export type PostNodesByIdStartErrors = {
    /**
     * Validation error
     */
    400: ResponseErrorResponse;
    /**
     * Node not found
     */
    404: ResponseErrorResponse;
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type PostNodesByIdStartError = PostNodesByIdStartErrors[keyof PostNodesByIdStartErrors];

export type PostNodesByIdStartResponses = {
    /**
     * OK
     */
    200: HttpNodeResponse;
};

export type PostNodesByIdStartResponse = PostNodesByIdStartResponses[keyof PostNodesByIdStartResponses];

export type PostNodesByIdStopData = {
    body?: never;
    path: {
        /**
         * Node ID
         */
        id: number;
    };
    query?: never;
    url: '/nodes/{id}/stop';
};

export type PostNodesByIdStopErrors = {
    /**
     * Validation error
     */
    400: ResponseErrorResponse;
    /**
     * Node not found
     */
    404: ResponseErrorResponse;
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type PostNodesByIdStopError = PostNodesByIdStopErrors[keyof PostNodesByIdStopErrors];

export type PostNodesByIdStopResponses = {
    /**
     * OK
     */
    200: HttpNodeResponse;
};

export type PostNodesByIdStopResponse = PostNodesByIdStopResponses[keyof PostNodesByIdStopResponses];

export type GetNotificationsProvidersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/notifications/providers';
};

export type GetNotificationsProvidersErrors = {
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
};

export type GetNotificationsProvidersError = GetNotificationsProvidersErrors[keyof GetNotificationsProvidersErrors];

export type GetNotificationsProvidersResponses = {
    /**
     * OK
     */
    200: Array<HttpProviderResponse>;
};

export type GetNotificationsProvidersResponse = GetNotificationsProvidersResponses[keyof GetNotificationsProvidersResponses];

export type PostNotificationsProvidersData = {
    /**
     * Provider creation request
     */
    body: HttpCreateProviderRequest;
    path?: never;
    query?: never;
    url: '/notifications/providers';
};

export type PostNotificationsProvidersErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
};

export type PostNotificationsProvidersError = PostNotificationsProvidersErrors[keyof PostNotificationsProvidersErrors];

export type PostNotificationsProvidersResponses = {
    /**
     * Created
     */
    201: HttpProviderResponse;
};

export type PostNotificationsProvidersResponse = PostNotificationsProvidersResponses[keyof PostNotificationsProvidersResponses];

export type DeleteNotificationsProvidersByIdData = {
    body?: never;
    path: {
        /**
         * Provider ID
         */
        id: number;
    };
    query?: never;
    url: '/notifications/providers/{id}';
};

export type DeleteNotificationsProvidersByIdErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
    /**
     * Not Found
     */
    404: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
};

export type DeleteNotificationsProvidersByIdError = DeleteNotificationsProvidersByIdErrors[keyof DeleteNotificationsProvidersByIdErrors];

export type DeleteNotificationsProvidersByIdResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetNotificationsProvidersByIdData = {
    body?: never;
    path: {
        /**
         * Provider ID
         */
        id: number;
    };
    query?: never;
    url: '/notifications/providers/{id}';
};

export type GetNotificationsProvidersByIdErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
    /**
     * Not Found
     */
    404: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
};

export type GetNotificationsProvidersByIdError = GetNotificationsProvidersByIdErrors[keyof GetNotificationsProvidersByIdErrors];

export type GetNotificationsProvidersByIdResponses = {
    /**
     * OK
     */
    200: HttpProviderResponse;
};

export type GetNotificationsProvidersByIdResponse = GetNotificationsProvidersByIdResponses[keyof GetNotificationsProvidersByIdResponses];

export type PutNotificationsProvidersByIdData = {
    /**
     * Provider update request
     */
    body: HttpUpdateProviderRequest;
    path: {
        /**
         * Provider ID
         */
        id: number;
    };
    query?: never;
    url: '/notifications/providers/{id}';
};

export type PutNotificationsProvidersByIdErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
    /**
     * Not Found
     */
    404: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
};

export type PutNotificationsProvidersByIdError = PutNotificationsProvidersByIdErrors[keyof PutNotificationsProvidersByIdErrors];

export type PutNotificationsProvidersByIdResponses = {
    /**
     * OK
     */
    200: HttpProviderResponse;
};

export type PutNotificationsProvidersByIdResponse = PutNotificationsProvidersByIdResponses[keyof PutNotificationsProvidersByIdResponses];

export type PostNotificationsProvidersByIdTestData = {
    /**
     * Test provider request
     */
    body: HttpTestProviderRequest;
    path: {
        /**
         * Provider ID
         */
        id: number;
    };
    query?: never;
    url: '/notifications/providers/{id}/test';
};

export type PostNotificationsProvidersByIdTestErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
};

export type PostNotificationsProvidersByIdTestError = PostNotificationsProvidersByIdTestErrors[keyof PostNotificationsProvidersByIdTestErrors];

export type PostNotificationsProvidersByIdTestResponses = {
    /**
     * OK
     */
    200: HttpTestProviderResponse;
};

export type PostNotificationsProvidersByIdTestResponse = PostNotificationsProvidersByIdTestResponses[keyof PostNotificationsProvidersByIdTestResponses];

export type GetOrganizationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/organizations';
};

export type GetOrganizationsErrors = {
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: string;
    };
};

export type GetOrganizationsError = GetOrganizationsErrors[keyof GetOrganizationsErrors];

export type GetOrganizationsResponses = {
    /**
     * OK
     */
    200: Array<HandlerOrganizationResponse>;
};

export type GetOrganizationsResponse = GetOrganizationsResponses[keyof GetOrganizationsResponses];

export type PostOrganizationsData = {
    /**
     * Organization creation request
     */
    body: HandlerCreateOrganizationRequest;
    path?: never;
    query?: never;
    url: '/organizations';
};

export type PostOrganizationsErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: string;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: string;
    };
};

export type PostOrganizationsError = PostOrganizationsErrors[keyof PostOrganizationsErrors];

export type PostOrganizationsResponses = {
    /**
     * Created
     */
    201: HandlerOrganizationResponse;
};

export type PostOrganizationsResponse = PostOrganizationsResponses[keyof PostOrganizationsResponses];

export type GetOrganizationsByMspidByMspidData = {
    body?: never;
    path: {
        /**
         * MSP ID
         */
        mspid: string;
    };
    query?: never;
    url: '/organizations/by-mspid/{mspid}';
};

export type GetOrganizationsByMspidByMspidErrors = {
    /**
     * Not Found
     */
    404: {
        [key: string]: string;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: string;
    };
};

export type GetOrganizationsByMspidByMspidError = GetOrganizationsByMspidByMspidErrors[keyof GetOrganizationsByMspidByMspidErrors];

export type GetOrganizationsByMspidByMspidResponses = {
    /**
     * OK
     */
    200: HandlerOrganizationResponse;
};

export type GetOrganizationsByMspidByMspidResponse = GetOrganizationsByMspidByMspidResponses[keyof GetOrganizationsByMspidByMspidResponses];

export type DeleteOrganizationsByIdData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        id: number;
    };
    query?: never;
    url: '/organizations/{id}';
};

export type DeleteOrganizationsByIdErrors = {
    /**
     * Not Found
     */
    404: {
        [key: string]: string;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: string;
    };
};

export type DeleteOrganizationsByIdError = DeleteOrganizationsByIdErrors[keyof DeleteOrganizationsByIdErrors];

export type DeleteOrganizationsByIdResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetOrganizationsByIdData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        id: number;
    };
    query?: never;
    url: '/organizations/{id}';
};

export type GetOrganizationsByIdErrors = {
    /**
     * Not Found
     */
    404: {
        [key: string]: string;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: string;
    };
};

export type GetOrganizationsByIdError = GetOrganizationsByIdErrors[keyof GetOrganizationsByIdErrors];

export type GetOrganizationsByIdResponses = {
    /**
     * OK
     */
    200: HandlerOrganizationResponse;
};

export type GetOrganizationsByIdResponse = GetOrganizationsByIdResponses[keyof GetOrganizationsByIdResponses];

export type PutOrganizationsByIdData = {
    /**
     * Organization update request
     */
    body: HandlerUpdateOrganizationRequest;
    path: {
        /**
         * Organization ID
         */
        id: number;
    };
    query?: never;
    url: '/organizations/{id}';
};

export type PutOrganizationsByIdErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: string;
    };
    /**
     * Not Found
     */
    404: {
        [key: string]: string;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: string;
    };
};

export type PutOrganizationsByIdError = PutOrganizationsByIdErrors[keyof PutOrganizationsByIdErrors];

export type PutOrganizationsByIdResponses = {
    /**
     * OK
     */
    200: HandlerOrganizationResponse;
};

export type PutOrganizationsByIdResponse = PutOrganizationsByIdResponses[keyof PutOrganizationsByIdResponses];